#+STARTUP: overview

#+PROPERTY: header-args :comments yes :results silent
* Configurações Gerais
** Environment e Fonte padrão
#+BEGIN_SRC emacs-lisp
  ;; Set locale to Brazilian Portuguese
  (set-locale-environment "pt_BR.UTF-8")

  ;; Add frame margins. This makes things more pleasant to read.
  ;; (setq default-frame-alist '((internal-border-width . 20)))

  ;; Starts the Emacs server for emacsclient only if it's not started already
  ;;  (load "server")
  ;;  (unless (server-running-p) (server-start))

  ;; Clean whitespace before saving a file
  (add-hook 'before-save-hook 'whitespace-cleanup)


  (add-to-list 'default-frame-alist '(font . "Comic code-12"))
  (add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font-12"))

  (setq org-babel-sh-command "/bin/bash")


  ;; Seleções Visíveis
  (setq transient-mark-mode t)

  ;; Sobrescrevendo seleções automaticamente
  (require 'delsel)
  (delete-selection-mode 1)

  ;; End vai para o fim da linha
  (define-key global-map [end] 'end-of-line)

  ;; Home vai para o comeco da linha
  (define-key global-map [home] 'beginning-of-line)

  ;; CTRL-End vai para o fim do documento
  (define-key global-map [C-end] 'end-of-buffer)

  ;; CTRL-Home vai para o comeco do documento
  (define-key global-map [C-home] 'beginning-of-buffer)

  ;; Backspace
  (define-key global-map [backspace]
  'delete-backward-char)

  ;; Delete
  (define-key global-map [delete]
  'delete-char)

#+END_SRC
** Coletor de Lixo
#+BEGIN_SRC emacs-lisp
  (defvar file-name-handler-alist-old file-name-handler-alist)

;; https://lists.gnu.org/archive/html/bug-gnu-emacs/2017-12/msg01088.html
;; Long-story short, use select-active-regions 'only to make visual selection faster.
(setq-default gc-cons-threshold 800000
	  select-active-regions 'only
	  file-name-handler-alist nil
	  gc-cons-percentage 0.6
	  auto-window-vscroll nil
	  message-log-max 16384)

(add-hook 'after-init-hook
	  `(lambda ()
	 (setq file-name-handler-alist file-name-handler-alist-old
	   gc-cons-threshold 80000
	   select-active-regions 'only
	   gc-cons-percentage 0.1)
	 (garbage-collect)) t)

(setq inhibit-compacting-font-caches t)

;; Optimize garbage collection
(use-package gcmh
  :ensure t
  :disabled t
  :init
  (setq gcmh-verbose nil)
  :config
  (gcmh-mode 1))

#+END_SRC

** Histórico de comandos
#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.emacs.d/emacs-savehist")
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (setq history-length 10000)
  (setq history-delete-duplicates t)
  (setq history-length 1024)
  (add-hook 'after-init-hook 'savehist-mode)
#+END_SRC

** Bookmarks
#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file "~/.emacs.d/emacs-bookmarks")
  ;; Every time bookmarks are changed, save them
  (setq bookmark-save-flag 1)
#+END_SRC

** Identação
#+BEGIN_SRC  emacs-lisp
 ;; (setq-default tab-width 4)

#+END_SRC

** Definições de Interface
#+BEGIN_SRC emacs-lisp
  ;; tira o barulho chato de beep
  (setq visible-bell 1)

  ;; tira a mensagem padrão de inicio do emacs
  (setq inhibiy-startup-message t)


  (tool-bar-mode -1)  ;; tira a barra de ferramentas
  (menu-bar-mode -1)  ;; tira a barra de ferramentas
  (scroll-bar-mode -1)  ; Remover barra de rolagem

  ;; Adiciona um gancho? para entrar em linum-mode quando for texto e programação
  (add-hook 'text-mode-hook 'linum-mode)
  (add-hook 'prog-mode-hook 'linum-mode)

  ;; Remove a necessidade de escrever 'yes' ou 'no'
  (fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

** Navegador Padrão
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-display nil
	  browse-url-browser-function 'browse-url-default-browser
	  browse-url-firefox-program "firefox")
#+END_SRC

** Buffers
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)  ; flexibilita a procura de buffers
  (setq ido-everywhere t) ; busca qualquer coisa
  (ido-mode 1) ; inicia no modo 1 - com um buffer apenas
  (defalias 'list-buffers 'ibuffer) ; make ibuffer default
  (global-set-key (kbd "<f5>") 'revert-buffer)  ; Configura a tecla f5 para atualizar o buffer
  ;;(global-auto-revert-mode t) ;; Auto atualiza os buffers

  ;; Adiciona navegação entre os buffers, com as teclas Alt+Setas
  (when (fboundp 'windmove-default-keybindings)
	(windmove-default-keybindings))

#+END_SRC
* Pacotes
** Dashboard
#+BEGIN_SRC emacs-lisp
    (use-package dashboard
	:ensure t
	:init
	(setq dashboard-items '((recents . 15)
				(projects . 5))
	      dashboard-banner-logo-title "Hello!"
	      dashboard-startup-banner 'logo
	      dashboard-set-file-icons t
	      dashboard-heading-icons t
	      dashboard-set-init-info nil
	      dashboard-center-content t)
	:config
	(dashboard-setup-startup-hook))
      (provide 'dashboard-config)
#+END_SRC

** Rainbow colors
#+BEGIN_SRC
  M-x package-install RET rainbow-mode RET
#+END_SRC
** Instala Try, que serve para testar pacotes sem instalá-los
#+BEGIN_SRC emacs-lisp
  (use-package try
	:ensure t)
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Theme Gruvbox
#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :ensure t)
(load-theme 'gruvbox-dark-medium t)
#+END_SRC

** Help key combinations
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

** Buffer-Flip e Centaur-tabs
Aplica um Alt Tab Entre os Buffers e Buffers com Tabs
#+BEGIN_SRC emacs-lisp
	 (use-package buffer-flip
	   :ensure t
	   :bind  (("M-<tab>" . buffer-flip)
		   :map buffer-flip-map
		   ( "M-<tab>" .   buffer-flip-forward)
		   ( "M-S-<tab>" . buffer-flip-backward)
		   ( "M-ESC" .     buffer-flip-abort))
	   :config
	   (setq buffer-flip-skip-patterns
		 '("^\\*helm\\b"
		   "^\\*swiper\\*$")))

	 ;; Buffer tabs
	 (global-unset-key (kbd "C-x <prior>"))
	 (global-unset-key (kbd "C-x <next>"))
   (use-package centaur-tabs
	 :ensure t
	 :demand
	 :config
	 (setq centaur-tabs-style "box"
	   centaur-tabs-set-bar 'over
	   centaur-tabs-set-modified-marker t
	   centaur-tabs-modified-marker "*"
	   centaur-tabs-set-icons t
	   centaur-tabs-height 32)
	 (centaur-tabs-change-fonts (face-attribute 'default :font) 120)
	 (centaur-tabs-headline-match)
	 (centaur-tabs-mode t)
	 :bind
	 ("C-x <prior>" . centaur-tabs-backward)
	 ("C-x <next>" . centaur-tabs-forward)
	 :hook
	 (dashboard-mode . centaur-tabs-local-mode)
	 (vterm-mode . centaur-tabs-local-mode))
  ;; (centaur-tabs-group-by-projectile-project)
  (centaur-tabs-group-buffer-groups)
#+END_SRC

** Neotree, All the Icons e SpaceLine
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
	:ensure t)

;;  (use-package spaceline
;;	:ensure t)


;;(use-package spaceline-config
;;	:config (spaceline-emacs-theme))

  ;; neotree
  (use-package neotree
	:ensure t
	:config
	(setq neo-theme (if (display-graphic-p) 'icons 'ascii))
	:bind (("C-\\". 'neotree-toggle))
  )

#+END_SRC

** Swiper
Pesquisa dentro do código
#+BEGIN_SRC emacs-lisp
;; it looks like counsel is a requirement for swiper
(use-package counsel
:ensure t
)

(use-package swiper
  :ensure try
  :config
  (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(global-set-key "\C-s" 'swiper)
	(global-set-key (kbd "C-c C-r") 'ivy-resume)
	(global-set-key (kbd "<f6>") 'ivy-resume)
	(global-set-key (kbd "M-x") 'counsel-M-x)
	(global-set-key (kbd "C-x C-f") 'counsel-find-file)
	(global-set-key (kbd "<f1> f") 'counsel-describe-function)
	(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	(global-set-key (kbd "<f1> l") 'counsel-load-library)
	(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	(global-set-key (kbd "C-c g") 'counsel-git)
	(global-set-key (kbd "C-c j") 'counsel-git-grep)
	(global-set-key (kbd "C-c k") 'counsel-ag)
	(global-set-key (kbd "C-x l") 'counsel-locate)
	(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
#+END_SRC
** Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** Auto complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
	:ensure t
	:init
	(progn
	  (ac-config-default)
	  (global-auto-complete-mode t)
	  ))
#+END_SRC
** snippets and snippet expansion
Trechos de códigos pré-prontos
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
	:ensure t
	:init
	(yas-global-mode 1))
#+END_SRC
** GGTags
#+BEGIN_SRC emacs-lisp
  ;; tags for code navigation
  (use-package ggtags
	:ensure t
	:config
	(add-hook 'c-mode-common-hook
		  (lambda ()
		(when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		  (ggtags-mode 1))))
	)
#+END_SRC
** Programação
*** Definições
#+BEGIN_SRC emacs-lisp
   ;; Salva automaticamente quando abre um arquivo no modo de programacao
 ;; (add-hook 'prog-mode-hook #'(lambda () (auto-save-visited-mode 1)))
;; (indent-guide-global-mode)
;; (setq python-indent-guess-indent-offset t)
;; (setq python-indent-guess-indent-offset-verbose nil)
#+END_SRC
*** Python
**** Eglot
#+BEGIN_SRC emacs-lisp
	 (use-package eglot
	  :init
	  (setq eglot-report-progress nil)
	  :hook
	  ((python-mode . eglot-ensure))
	  )
	(add-to-list 'auto-mode-alist '("Pipfile" . conf-mode))




	  (setq elpy-rpc-python-command "python3")

		(require 'python)
		(define-key python-mode-map (kbd "C-c C-c")
		  (lambda () (interactive) (python-shell-send-buffer t)))
#+END_SRC

**** EIN - Jupyter
#+BEGIN_SRC emacs-lisp
    ;;  (use-package ein
    ;;    :ensure t)

    ;;  (setq ein:console-args '("--profile" "/home/anderson/.local/bin"))

    (use-package jupyter
      :ensure t)
#+END_SRC
*** Web-Mode
#+BEGIN_SRC emacs-lisp

  (use-package web-mode
	:ensure t)

  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (setq web-mode-engines-alist
	'(("php"    . "\\.phtml\\'")
	  ("blade"  . "\\.blade\\."))
	)

  (defun web-mode-tweaks ()
	;; Enable Flycheck
	(flycheck-mode 1)

	;;(setq-default indent-tabs-mode t)
	;;(setq-default tab-width 4) ; Assuming you want your tabs to be four spaces wide
	;;(defvaralias 'c-basic-offset 'tab-width)
	(setq-default js2-basic-offset 2)
	)



  (add-hook 'web-mode 'web-mode-tweaks)

#+END_SRC

*** PostgreSQL
#+BEGIN_SRC emacs-lisp

;;  (defun buffer-mode (buffer-or-name)
;;	(with-current-buffer buffer-or-name major-mode))


;;  (defun filter-buffers-by-mode (mode)
;;	(delq nil
;;		  (mapcar
;;		   (lambda (x) (and (eq (buffer-mode x) mode) x))
;;		   (buffer-list))))

	(setq sql-postgres-login-params
		  '((user :default "postgres")
			(database :default "alura")
			(server :default "172.17.0.2")
			(port :default 5432)))

	(add-hook 'sql-interactive-mode-hook
			(lambda ()
			  (toggle-truncate-lines t)))
#+END_SRC
