;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(shell-command-history magit-git-command-history magit-revision-history extended-command-history ido-file-history minibuffer-history empty-history read-from-kill-ring-history ivy-history counsel-M-x-history swiper-history ido-buffer-history file-name-history))
(setq shell-command-history '("/usr/bin/zsh" "/usr/bin/bash"))
(setq magit-revision-history '(#("origin/main" 0 11 (ivy-index 0)) #("1a51c1d" 0 7 (ivy-index 0)) #("main" 0 4 (ivy-index 0)) #("ola mundo" 0 9 (ivy-index 0))))
(setq ido-file-history '("." "music_status_bar.sh" "volume_icon.sh" "battery_status.sh" "advinha_mais.html" "estrelas.html" "media_idades_familiares.html" "media_idades_familiares.hml" "tabuada.html" "ano_copa.html" "jogo_advinha.html" "futebol.html" "imc.html" "programa.html" "texto_puro.html" "primeiro_teste.html"))
(setq minibuffer-history '("/usr/bin/bash" "/usr/bin/zsh"))
(setq ivy-history '(#("./" 0 2 (ivy-index 0)) #("... (choose a dir)" 0 18 (ivy-index 1)) #("~/.dotfiles/" 0 12 (ivy-index 0)) #("electric-indent-mode" 0 20 (ivy-index 14)) #("indent-guide" 0 12 (ivy-index 0)) #("web-mode-indent-style" 0 21 (ivy-index 0)) #("rainbow-mode" 0 12 (ivy-index 3))))
(setq counsel-M-x-history '(#("^term" 0 5 (ivy-index 0)) "term" #("^centaur-tabs-mode" 0 18 (ivy-index 0)) "centaur-tabs-mode" #("^centaur-tabs-g" 0 15 (ivy-index 0)) "centaur-tabs-group-buffer-groups" #("^rainbo" 0 7 (ivy-index 0)) "rainbow-mode" #("^magit-merge" 0 12 (ivy-index 3)) "magit-merge" #("^magit-status" 0 13 (ivy-index 2)) "magit-status" #("^rainb" 0 6 (ivy-index 0)) #("^rain" 0 5 (ivy-index 0)) #("^ansi-" 0 6 (ivy-index 1)) "ansi-term" #("^conf-mode" 0 10 (ivy-index 0)) "conf-mode" #("^ansi" 0 5 (ivy-index 1)) #("^magit-stat" 0 11 (ivy-index 2)) #("^ansi-te" 0 8 (ivy-index 0)) #("^java" 0 5 (ivy-index 1)) "javascript-mode" #("^customize-va" 0 13 (ivy-index 0)) "customize-variable" #("^indent-gui" 0 11 (ivy-index 0)) "indent-guide-mode" #("^package-install" 0 16 (ivy-index 0)) "package-install" #("^package-lis" 0 12 (ivy-index 0)) "package-list-packages" #("^web-mode" 0 9 (ivy-index 82)) "web-mode" #("ansi" 0 4 (ivy-index 2)) #("^cua" 0 4 (ivy-index 5)) "cua-toggle-rectangle-mark" "cua-paste" "cua-paste-pop" "cua-cut-region" #("^cua-sc" 0 7 (ivy-index 1)) "cua-scroll-down" #("^cua-s" 0 6 (ivy-index 2)) "cua-selection-mode"))
(setq swiper-history '(#("indent" 0 6 (ivy-index 16)) #("   indent-guide                   20160630       available    melpa-stable show vertical lines to guide indentation" 0 1 (display "1665 " swiper-line-number 1665) 1 3 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil)) 3 15 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Package" action package-menu-describe-package package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) follow-link t font-lock-face package-name face package-name category default-button button (t)) 15 16 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Package") 16 34 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Package" display (space :align-to 33)) 34 42 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Version" help-echo #("Version: 20160630" 9 17 (font-lock-face package-status-available)) font-lock-face package-status-available) 42 43 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Version") 43 49 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Version" display (space :align-to 48)) 49 58 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face package-status-available)) font-lock-face package-status-available) 58 59 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Status") 59 62 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Status" display (space :align-to 61)) 62 69 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Archive" help-echo #("Archive: melpa-stable" 9 21 (font-lock-face package-status-available)) font-lock-face package-status-available) 69 74 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Archive" help-echo #("Archive: melpa-stable" 9 21 (font-lock-face package-status-available)) display "…" font-lock-face package-status-available) 74 75 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Archive") 75 115 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Description" help-echo #("Description: show vertical lines to guide indentation" 13 53 (font-lock-face package-description)) font-lock-face package-description)) "scheme[SchemeNorm][ColBg" #("scheme[SchemeNorm][ColB" 0 23 (ivy-index 8)) #(" 	XSetForeground(dpy, drw->gc, scheme[SchemeNorm][ColBg].pixel);" 0 1 (display "2761 " swiper-line-number 2761) 1 2 (c-is-sws t fontified t) 2 3 (fontified t c-is-sws t) 3 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (rear-nonsticky t fontified t)) #("updatesys" 0 9 (ivy-index 18)) #(" updatesystray(void)" 0 1 (display "2700 " swiper-line-number 2700) 1 14 (face font-lock-function-name-face fontified t) 14 15 (c-type c-decl-arg-start fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (fontified t)) #("mai" 0 3 (ivy-index 0)) #(" main(int argc, char *argv[])" 0 1 (display "814 " swiper-line-number 814) 1 5 (face font-lock-function-name-face fontified t) 5 6 (c-type c-decl-arg-start fontified t) 6 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 14 (face font-lock-variable-name-face fontified t) 14 15 (c-type c-decl-arg-start fontified t) 15 16 (fontified t) 16 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 26 (face font-lock-variable-name-face fontified t) 26 29 (fontified t))))
(setq ido-buffer-history '("*terminal*" "index.html" "config.mk" "Untitled<2>" "Untitled<3>" "Untitled" "init.el" "myinit.org" "config" "muta_microfone" "config.def.h<.dwm>" "block-battery" "dwmbar-powerline" "battery_status.sh" "diminui_volume" "muta_volume" "*scratch*" "*Messages*" "*Async-native-compile-log*" "*Warnings*" "magit-process: .dotfiles" "magit: .dotfiles" "volume_icon.sh" "*ansi-term*" "app.js" "x.c" "x.c.rej" "config.def.h" "config.def.h.rej" "config.def.h<st>"))
(setq file-name-history '(#("/home/anderson/.local/bin/volume_icon.sh" 0 40 (ivy-index 6)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/index.html" 0 102 (ivy-index 7)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/app.js" 0 98 (ivy-index 3)) #("/home/anderson/.dwm/autostart.sh" 0 32 (ivy-index 0)) #("/home/anderson/.config/picom.conf" 0 33 (ivy-index 3)) #("/home/anderson/.emacs.d/myinit.org" 0 34 (ivy-index 1)) #("/home/anderson/.dotfiles/.dwm/" 0 30 (ivy-index 0)) #("/home/anderson/.dotfiles/.Xresources" 0 36 (ivy-index 0)) #("/home/anderson/.config/st/config.def.h" 0 38 (ivy-index 0)) "~/.dotfiles/.emacs.d/init.el"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq kill-ring '(#("#ZSH_THEME=" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 10 (face font-lock-comment-face fontified t) 10 11 (face font-lock-comment-face fontified t)) "robbyrussell" #("https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" 0 46 (face font-lock-comment-face fontified t)) #("pactl set-source-volume @DEFAULT_SOURCE@ +5%" 0 44 (fontified t)) "" "" #("is_mute=$(pactl get-source-mute @DEFAULT_SOURCE@ | grep 'sim' -ic)" 0 7 (face font-lock-variable-name-face fontified t) 7 10 (fontified t) 10 56 (face sh-quoted-exec fontified t) 56 61 (face sh-quoted-exec fontified t) 61 65 (face sh-quoted-exec fontified t) 65 66 (fontified t)) #("if [ \"$mute\" -eq 1 ]; then
    icon=\"󰸈 \"
else
    if [ \"$volume\" -le 30 ]; then
	icon=\"󰕿 \"
    elif [ \"$volume\" -le 60 ]; then
	icon=\"󰖀 \"
    elif [ \"$volume\" -ge 61 ]; then
	icon=\"󰕾 \"
    fi
fi" 0 2 (face font-lock-keyword-face fontified t) 2 5 (fontified t) 5 12 (face font-lock-string-face fontified t) 12 22 (fontified t) 22 26 (face font-lock-keyword-face fontified t) 26 31 (fontified t) 31 35 (face font-lock-variable-name-face fontified t) 35 36 (fontified t) 36 40 (face font-lock-string-face fontified t) 40 41 (fontified t) 41 45 (face font-lock-keyword-face fontified t) 45 50 (fontified t) 50 52 (face font-lock-keyword-face fontified t) 52 55 (fontified t) 55 64 (face font-lock-string-face fontified t) 64 75 (fontified t) 75 79 (face font-lock-keyword-face fontified t) 79 81 (fontified t) 81 85 (face font-lock-variable-name-face fontified t) 85 86 (fontified t) 86 90 (face font-lock-string-face fontified t) 90 95 (fontified t) 95 99 (face font-lock-keyword-face fontified t) 99 102 (fontified t) 102 111 (face font-lock-string-face fontified t) 111 122 (fontified t) 122 126 (face font-lock-keyword-face fontified t) 126 128 (fontified t) 128 132 (face font-lock-variable-name-face fontified t) 132 133 (fontified t) 133 137 (face font-lock-string-face fontified t) 137 142 (fontified t) 142 146 (face font-lock-keyword-face fontified t) 146 149 (fontified t) 149 158 (face font-lock-string-face fontified t) 158 169 (fontified t) 169 173 (face font-lock-keyword-face fontified t) 173 175 (fontified t) 175 179 (face font-lock-variable-name-face fontified t) 179 180 (fontified t) 180 184 (face font-lock-string-face fontified t) 184 189 (fontified t) 189 191 (face font-lock-keyword-face fontified t) 191 192 (fontified t) 192 194 (face font-lock-keyword-face fontified t)) #("volume=$(pactl get-source-volume @DEFAULT_SOURCE@ | grep \"Volume\" | awk '{print$5}' | sed 's/%//')" 0 6 (face font-lock-variable-name-face fontified t) 6 9 (fontified t) 9 57 (face sh-quoted-exec fontified t) 57 65 (face sh-quoted-exec fontified t) 65 72 (face sh-quoted-exec fontified t) 72 83 (face sh-quoted-exec fontified t) 83 90 (face sh-quoted-exec fontified t) 90 97 (face sh-quoted-exec fontified t) 97 98 (fontified t)) #("volume=$(pactl get-sink-volume @DEFAULT_SINK@ | grep \"Volume\" | awk '{print$5}' | sed 's/%//')" 0 6 (face font-lock-variable-name-face fontified t) 6 9 (fontified t) 9 53 (face sh-quoted-exec fontified t) 53 61 (face sh-quoted-exec fontified t) 61 68 (face sh-quoted-exec fontified t) 68 79 (face sh-quoted-exec fontified t) 79 86 (face sh-quoted-exec fontified t) 86 93 (face sh-quoted-exec fontified t) 93 94 (fontified t)) "  (use-package centaur-tabs
	:ensure t
	:demand
	:config
	(setq centaur-tabs-style \"box\"
	  centaur-tabs-set-bar 'over
	  centaur-tabs-set-modified-marker t
	  centaur-tabs-modified-marker \"*\"
	  centaur-tabs-set-icons t
	  centaur-tabs-height 32)
	(centaur-tabs-change-fonts (face-attribute 'default :font) 120)
	(centaur-tabs-headline-match)
	(centaur-tabs-mode t)
	:bind
	(\"C-x <prior>\" . centaur-tabs-backward)
	(\"C-x <next>\" . centaur-tabs-forward)
	:hook
	(dashboard-mode . centaur-tabs-local-mode)
	(vterm-mode . centaur-tabs-local-mode))" "(centaur-tabs-group-by-projectile-project)" "(use-package centaur-tabs
  :init
  (setq centaur-tabs-enable-key-bindings t)
  :config
  (setq centaur-tabs-style \"bar\"
        centaur-tabs-height 32
        centaur-tabs-set-icons t
        centaur-tabs-show-new-tab-button t
        centaur-tabs-set-modified-marker t
        centaur-tabs-show-navigation-buttons t
        centaur-tabs-set-bar 'under
        centaur-tabs-show-count nil
        ;; centaur-tabs-label-fixed-length 15
        ;; centaur-tabs-gray-out-icons 'buffer
        ;; centaur-tabs-plain-icons t
        x-underline-at-descent-line t
        centaur-tabs-left-edge-margin nil)
  (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
  (centaur-tabs-headline-match)
  ;; (centaur-tabs-enable-buffer-alphabetical-reordering)
  ;; (setq centaur-tabs-adjust-buffer-order t)
  (centaur-tabs-mode t)
  (setq uniquify-separator \"/\")
  (setq uniquify-buffer-name-style 'forward)
  (defun centaur-tabs-buffer-groups ()
    \"`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \\\"Emacs\\\".
Other buffer group by `centaur-tabs-get-group-name' with project name.\"
    (list
     (cond
      ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
      ;; \"Remote\")
      ((or (string-equal \"*\" (substring (buffer-name) 0 1))
           (memq major-mode '(magit-process-mode
                              magit-status-mode
                              magit-diff-mode
                              magit-log-mode
                              magit-file-mode
                              magit-blob-mode
                              magit-blame-mode
                              )))
       \"Emacs\")
      ((derived-mode-p 'prog-mode)
       \"Editing\")
      ((derived-mode-p 'dired-mode)
       \"Dired\")
      ((memq major-mode '(helpful-mode
                          help-mode))
       \"Help\")
      ((memq major-mode '(org-mode
                          org-agenda-clockreport-mode
                          org-src-mode
                          org-agenda-mode
                          org-beamer-mode
                          org-indent-mode
                          org-bullets-mode
                          org-cdlatex-mode
                          org-agenda-log-mode
                          diary-mode))
       \"OrgMode\")
      (t
       (centaur-tabs-get-group-name (current-buffer))))))
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  :bind
  (\"C-<prior>\" . centaur-tabs-backward)
  (\"C-<next>\" . centaur-tabs-forward)
  (\"C-S-<prior>\" . centaur-tabs-move-current-tab-to-left)
  (\"C-S-<next>\" . centaur-tabs-move-current-tab-to-right)
  (:map evil-normal-state-map
        (\"g t\" . centaur-tabs-forward)
        (\"g T\" . centaur-tabs-backward)))" "(defun tabbar-add-tab (tabset object &optional append_ignored)
  \"Add to TABSET a tab with value OBJECT if there isn't one there yet.
If the tab is added, it is added at the beginning of the tab list,
unless the optional argument APPEND is non-nil, in which case it is
added at the end.\"
  (let ((tabs (tabbar-tabs tabset)))
    (if (tabbar-get-tab object tabset)
        tabs
      (let ((tab (tabbar-make-tab object tabset)))
        (tabbar-set-template tabset nil)
        (set tabset (sort (cons tab tabs)
                          (lambda (a b) (string< (buffer-name (car a)) (buffer-name (car b))))))))))" "  (setq uniquify-separator \"/\")
  (setq uniquify-buffer-name-style 'forward)
  (defun centaur-tabs-buffer-groups ()
    \"`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \\\"Emacs\\\".
Other buffer group by `centaur-tabs-get-group-name' with project name.\"
    (list
     (cond
      ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
      ;; \"Remote\")
      ((or (string-equal \"*\" (substring (buffer-name) 0 1))
           (memq major-mode '(magit-process-mode
                              magit-status-mode
                              magit-diff-mode
                              magit-log-mode
                              magit-file-mode
                              magit-blob-mode
                              magit-blame-mode
                              )))
       \"Emacs\")
      ((derived-mode-p 'prog-mode)
       \"Editing\")
      ((derived-mode-p 'dired-mode)
       \"Dired\")
      ((memq major-mode '(helpful-mode
                          help-mode))
       \"Help\")
      ((memq major-mode '(org-mode
                          org-agenda-clockreport-mode
                          org-src-mode
                          org-agenda-mode
                          org-beamer-mode
                          org-indent-mode
                          org-bullets-mode
                          org-cdlatex-mode
                          org-agenda-log-mode
                          diary-mode))
       \"OrgMode\")
      (t
       (centaur-tabs-get-group-name (current-buffer))))))
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  :bind
  (\"C-<prior>\" . centaur-tabs-backward)
  (\"C-<next>\" . centaur-tabs-forward)
  (\"C-S-<prior>\" . centaur-tabs-move-current-tab-to-left)
  (\"C-S-<next>\" . centaur-tabs-move-current-tab-to-right)
  (:map evil-normal-state-map
        (\"g t\" . centaur-tabs-forward)
        (\"g T\" . centaur-tabs-backward)))" " (setq uniquify-separator \"/\")
  (setq uniquify-buffer-name-style 'forward)
  (defun centaur-tabs-buffer-groups ()
    \"`centaur-tabs-buffer-groups' control buffers' group rules.

Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \\\"Emacs\\\".
Other buffer group by `centaur-tabs-get-group-name' with project name.\"
    (list
     (cond
      ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
      ;; \"Remote\")
      ((or (string-equal \"*\" (substring (buffer-name) 0 1))
           (memq major-mode '(magit-process-mode
                              magit-status-mode
                              magit-diff-mode
                              magit-log-mode
                              magit-file-mode
                              magit-blob-mode
                              magit-blame-mode
                              )))
       \"Emacs\")
      ((derived-mode-p 'prog-mode)
       \"Editing\")
      ((derived-mode-p 'dired-mode)
       \"Dired\")
      ((memq major-mode '(helpful-mode
                          help-mode))
       \"Help\")
      ((memq major-mode '(org-mode
                          org-agenda-clockreport-mode
                          org-src-mode
                          org-agenda-mode
                          org-beamer-mode
                          org-indent-mode
                          org-bullets-mode
                          org-cdlatex-mode
                          org-agenda-log-mode
                          diary-mode))
       \"OrgMode\")
      (t
       (centaur-tabs-get-group-name (current-buffer))))))
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  :bind
  (\"C-<prior>\" . centaur-tabs-backward)
  (\"C-<next>\" . centaur-tabs-forward)
  (\"C-S-<prior>\" . centaur-tabs-move-current-tab-to-left)
  (\"C-S-<next>\" . centaur-tabs-move-current-tab-to-right)
  (:map evil-normal-state-map
        (\"g t\" . centaur-tabs-forward)
        (\"g T\" . centaur-tabs-backward)))" "; Inherit the face of `doom-modeline-panel` for better appearance
(set-face-attribute 'tab-bar-tab nil :inherit 'doom-modeline-panel :foreground nil :background nil)

;; Totally customize the format of the tab bar name
(defun my/tab-bar-format (tab i)
  (propertize
   (format
    (concat
      (if (eq (car tab) 'current-tab)
          \"🔥 \" \"\")
      \"%s\")
    (alist-get 'name tab))
   'face (list (append
                  '(:foreground \"#FFFFFF\")
                  (if (eq (car tab) 'current-tab)
                      '(:box t)
                      '())))))

;; Replace the default tab bar function
(setq tab-bar-tab-name-format-function #'my/tab-bar-format)

(defun my/tab-bar-tab-name-function ()
  (let ((project (project-current)))
    (if project
        (project-root project)
        (tab-bar-tab-name-current))))

(setq tab-bar-tab-name-function #'my/tab-bar-tab-name-function)

;; Only show the tab bar if there are 2 or more tabs
(setq tab-bar-show 1)

(defun my/tab-bar-string () \"HELLO\")

;; Customize the tab bar format to add the global mode line string
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator tab-bar-format-align-right tab-bar-format-global))

(add-to-list 'global-mode-string \"HELLO\")

;; Make sure mode line text in the tab bar can be read
(set-face-attribute 'tab-bar nil :foreground \"#FFFFFF\")

(defun my/project-create-tab ()
  (interactive)
  (tab-bar-new-tab)
  (magit-status))

(setq project-switch-commands #'my/project-create-tab)

(defun my/switch-to-tab-buffer ()
  (interactive)
  (if (project-current)
      (call-interactively #'project-switch-to-buffer)
    (call-interactively #'switch-to-buffer)))

(global-set-key (kbd \"C-x b\") #'my/switch-to-tab-buffer)

;; Turn on tab bar mode after startup
(tab-bar-mode 1)

;; Save the desktop session
(desktop-save-mode 1)" "[[fallthrough]];" "highlight=\"#e78a4e\"" "audio-input-microphone-muted.svg" "microphone-sensitivity-muted-symbolic.svg" "microphone-sensitivity-muted.svg" "/usr/share/icons/ePapirus/24x24/panel" "audio-input-microphone.svg" "/usr/share/icons/ePapirus-Dark/16x16/devices" "microphone-disabled-symbolic.svg" "/usr/share/icons/Papirus-Dark/symbolic/status" "audio-input-microphone.svg" "" "" #("pactl get-source-mute @DEFAULT_SOURCE@ | grep 'sim' -ic" 0 23 (fontified t face sh-quoted-exec) 23 37 (fontified t face sh-quoted-exec) 37 46 (fontified t face sh-quoted-exec) 46 49 (fontified t face sh-quoted-exec) 49 51 (fontified t face sh-quoted-exec) 51 55 (fontified t face sh-quoted-exec)) #("is_mute=$(pactl get-sink-mute @DEFAULT_SINK@ | grep 'sim' -ic)

if [ \"$is_mute\" -eq 1 ]; then
    notify-send -t 3000 \"󰝟 Mute:Yes\" \"Volume mutado\" --icon=\"/usr/share/icons/ePapirus/16x16/actions/audio-volume-muted.svg\"
else
    notify-send -t 3000 \" Mute:No\" \"Volume desmutado\" --icon=\"/usr/share/icons/ePapirus/16x16/actions/audio-volume-high.svg\"
fi
" 0 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t) 10 52 (fontified t face sh-quoted-exec) 52 55 (fontified t face sh-quoted-exec) 55 57 (fontified t face sh-quoted-exec) 57 61 (fontified t face sh-quoted-exec) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t) 64 66 (fontified t face font-lock-keyword-face) 66 69 (fontified t) 69 79 (fontified t face font-lock-string-face) 79 85 (fontified t) 85 89 (fontified t) 89 93 (fontified t face font-lock-keyword-face) 93 94 (fontified t) 94 98 (fontified t) 98 118 (fontified t) 118 119 (fontified t face font-lock-string-face) 119 120 (rear-nonsticky t fontified t face font-lock-string-face) 120 130 (fontified t face font-lock-string-face) 130 131 (fontified t) 131 146 (fontified t face font-lock-string-face) 146 154 (fontified t) 154 195 (fontified t face font-lock-string-face) 195 216 (fontified t face font-lock-string-face) 216 217 (fontified t rear-nonsticky t face font-lock-string-face) 217 218 (fontified t face font-lock-string-face) 218 219 (fontified t) 219 223 (fontified t face font-lock-keyword-face) 223 224 (rear-nonsticky t fontified t) 224 228 (fontified t) 228 248 (fontified t) 248 249 (fontified t face font-lock-string-face) 249 250 (fontified t rear-nonsticky t face font-lock-string-face) 250 259 (fontified t face font-lock-string-face) 259 260 (fontified t) 260 278 (fontified t face font-lock-string-face) 278 286 (fontified t) 286 327 (fontified t face font-lock-string-face) 327 347 (fontified t face font-lock-string-face) 347 348 (fontified t rear-nonsticky t face font-lock-string-face) 348 349 (rear-nonsticky t fontified t face font-lock-string-face) 349 350 (fontified t) 350 352 (fontified t face font-lock-keyword-face) 352 353 (fontified t)) "" "audio-volume-high.svg" "audio-volume-muted.svg" #("/usr/share/icons/ePapirus/16x16/devices/audio-speakers.svg" 0 58 (fontified t face font-lock-string-face)) #("notify-send -t 3000 \"󰝟 $is_mute\" \"Volume mutado\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/audio-speakers.svg\"" 0 20 (fontified t) 20 21 (fontified t face font-lock-string-face) 21 22 (rear-nonsticky t fontified t face font-lock-string-face) 22 32 (fontified t face font-lock-string-face) 32 33 (fontified t) 33 48 (fontified t face font-lock-string-face) 48 56 (fontified t) 56 116 (fontified t face font-lock-string-face)) "pactl get-sink-mute @DEFAULT_SINK@ | grep 'sim' -ic
" #("pactl get-sink-mute @DEFAULT_SINK@" 0 34 (fontified t face sh-quoted-exec)) "󰝟" #("notify-send -t 3000 \" 󰝝 $volume%\" \"Aumentado +5% de volume\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/audio-speakers.svg\"
" 0 20 (fontified t) 20 34 (fontified t face font-lock-string-face) 34 35 (fontified t) 35 60 (fontified t face font-lock-string-face) 60 68 (fontified t) 68 128 (fontified t face font-lock-string-face) 128 129 (fontified t)) "#AFAF00" #("static const char c_orange[]      = \"#d65d0e\";" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 16 (fontified t face font-lock-type-face) 16 17 (fontified t c-type c-decl-id-start face font-lock-type-face) 17 18 (fontified t) 18 26 (fontified t face font-lock-variable-name-face) 26 36 (fontified t) 36 45 (fontified t face font-lock-string-face) 45 46 (fontified t)) #("	{ run_command,	    \"^b#282828^^c#fb4934^%s\",		   \"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"}," 0 1 (fontified t) 1 2 (fontified t c-type c-not-decl) 2 14 (fontified t) 14 15 (fontified t c-type c-not-decl) 15 20 (fontified t) 20 44 (fontified t face font-lock-string-face) 44 50 (fontified t) 50 65 (fontified t face font-lock-string-face) 65 66 (syntax-table (1) fontified t face font-lock-string-face) 66 82 (fontified t face font-lock-string-face) 82 83 (syntax-table (1) fontified t face font-lock-string-face) 83 85 (fontified t face font-lock-string-face) 85 90 (fontified t face font-lock-string-face) 90 91 (syntax-table (1) fontified t face font-lock-string-face) 91 96 (fontified t face font-lock-string-face) 96 97 (syntax-table (1) fontified t face font-lock-string-face) 97 98 (fontified t face font-lock-string-face) 98 100 (fontified t)) #("echo \"$icon $title $artist $time\"" 0 4 (fontified t face font-lock-builtin-face) 4 5 (fontified t) 5 6 (fontified t face font-lock-string-face) 6 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face) 32 33 (rear-nonsticky t fontified t face font-lock-string-face)) #("    artist=$(mpc -f %artist% current)
    time=$(mpc -f %time% current)" 0 4 (fontified t) 4 10 (fontified t face font-lock-variable-name-face) 10 13 (fontified t) 13 26 (fontified t) 26 36 (fontified t) 36 38 (fontified t) 38 42 (fontified t) 42 46 (fontified t face font-lock-variable-name-face) 46 49 (fontified t) 49 60 (fontified t) 60 70 (fontified t) 70 71 (fontified t)) "mpc -f %time% current
" "mpc -f %artist% current
" "󰝚" "mpc -f %title% current
" #("previewname=\"$previewdir/$(mpc --format %album% current | base64).png\"" 0 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t) 12 70 (fontified t face font-lock-string-face)) "#!/bin/bash

# Coloque aqui o local que identifica sem seu dispositivo está carregando ou descarregando
# IMPORTANTE ! A saída deve ser em binário, caso contrário resultará em erro!
is_plugged=$(cat /sys/class/power_supply/ADP1/online)

# Coloque aqui o local que identifica o número relativo a porcentagem da bateria de seu dispositivo
battery_level=$(cat /sys/class/power_supply/BAT1/capacity)

# EXTRA! Altere os ícones para qualquer um de sua preferência, assim como os valores da %
# EXTRA! Customize a cor do ícone começando com %{F#} e fechando com %{F-}
if [ \"$is_plugged\" -eq 1 ]; then
    icon=\"%{F#F0C674}%{F-}\"
else
    if [ \"$battery_level\" -le 15 ]; then
        icon=\"%{F#F0C674}%{F-}\"
    elif [ \"$battery_level\" -le 25 ]; then
        icon=\"%{F#F0C674}%{F-}\"
    elif [ \"$battery_level\" -le 60 ]; then
        icon=\"%{F#F0C674}%{F-}\"
    elif [ \"$battery_level\" -le 90 ]; then
        icon=\"%{F#F0C674}%{F-}\"
    else
        icon=\"%{F#F0C674}%{F-}\"
    fi
fi

echo \"$icon $battery_level%\"" "" "flatpak run com.jgraph.drawio.desktop" "flatpak run md.obsidian.Obsidian" "flatpak run com.discordapp.Discord" "flatpak run com.spotify.Client" #(" --icon=\"/usr/share/icons/ePapirus/16x16/devices/audio-input-microphone.svg\"" 0 1 (fontified t) 1 8 (fontified t) 8 9 (fontified t face font-lock-string-face) 9 47 (fontified t face font-lock-string-face) 47 48 (rear-nonsticky t fontified t face font-lock-string-face) 48 71 (fontified t face font-lock-string-face) 71 74 (fontified t face font-lock-string-face) 74 75 (rear-nonsticky t fontified t face font-lock-string-face) 75 76 (rear-nonsticky t fontified t face font-lock-string-face)) #("--icon=\"/usr/share/icons/ePapirus/16x16/devices/audio-headphones.svg\"" 0 7 (fontified t) 7 8 (fontified t face font-lock-string-face) 8 46 (fontified t face font-lock-string-face) 46 47 (rear-nonsticky t fontified t face font-lock-string-face) 47 64 (fontified t face font-lock-string-face) 64 67 (fontified t face font-lock-string-face) 67 68 (rear-nonsticky t fontified t face font-lock-string-face) 68 69 (rear-nonsticky t fontified t face font-lock-string-face)) #("--icon=\"/usr/share/icons/ePapirus/16x16/devices/audio-speakers.svg\"" 0 7 (fontified t) 7 8 (fontified t face font-lock-string-face) 8 46 (fontified t face font-lock-string-face) 46 47 (rear-nonsticky t fontified t face font-lock-string-face) 47 62 (fontified t face font-lock-string-face) 62 65 (fontified t face font-lock-string-face) 65 66 (rear-nonsticky t fontified t face font-lock-string-face) 66 67 (rear-nonsticky t fontified t face font-lock-string-face))))
(setq search-ring 'nil)
(setq regexp-search-ring '("indent" "scheme\\[SchemeNorm]\\[ColB" "updatesys" "mai"))
