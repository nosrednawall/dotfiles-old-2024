;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(query-replace-history realgud:pdb-minibuffer-history gud-pdb-history coding-system-history string-rectangle-history read-expression-history command-history ess--completing-hist counsel-locate-history sql-product-history sql-server-history sql-database-history sql-user-history read-char-history counsel-git-history transient--history read-number-history compile-history shell-command-history magit-git-command-history magit-revision-history extended-command-history ido-file-history minibuffer-history empty-history read-from-kill-ring-history ivy-history counsel-M-x-history swiper-history ido-buffer-history file-name-history))
(setq query-replace-history '("#89B482" #("#427b58" 0 6 (face ((:foreground "white") (:background "#427b58"))) 6 7 (face ((:foreground "white") (:background "#427b58")) rear-nonsticky t)) "abcde" "$"))
(setq realgud:pdb-minibuffer-history '("python3 -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py" "python3 -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py" "python3 -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py" "python3 -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py" "python -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py"))
(setq gud-pdb-history '("prnabnt.py" "python -m pdb3" "python -m pdb" "python -m pdb prnabnt.py" "python -m pdb "))
(setq coding-system-history '(#("utf-8" 0 5 (ivy-index 16 idx 1033)) #("raw-text-unix" 0 13 (ivy-index 263 idx 1057)) #("iso-8859-6-unix" 0 15 (ivy-index 3 idx 19)) #("latin-1-unix" 0 12 (ivy-index 260 idx 1044)) #("unix" 0 4 (ivy-index 265 idx 1064)) #("iso-8859-6" 0 10 (ivy-index 17 idx 16)) #("prefer-utf-8" 0 12 (ivy-index 20 idx 1058)) #("utf-8-dos" 0 9 (ivy-index 18 idx 1035)) #("utf-8-unix" 0 10 (ivy-index 19 idx 1036)) #("georgian-academy" 0 16 (ivy-index 1 idx 0)) #("nil" 0 3 (ivy-index 0)) #("utf-8-auto" 0 10 (ivy-index 7 idx 1025))))
(setq command-history '((rainbow-mode 'toggle) (replace-string #("#427b58" 0 6 (face ((:foreground "white") (:background "#427b58"))) 6 7 (face ((:foreground "white") (:background "#427b58")) rear-nonsticky t)) "#89B482" nil nil nil nil nil) (map-query-replace-regexp "$" "abcde" nil nil nil nil) (term "/usr/bin/zsh") (realgud:pdb) (realgud:pdb-customize) (pdb-reset) (kill-buffer "*gud*") (package-install 'realgud nil) (pdb "prnabnt.py") (kill-buffer "*Python*") (cd "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/") (kill-buffer "slstatus.c") (pdb "python -m pdb3") (pdb "python -m pdb") (pdb "python -m pdb prnabnt.py") (pdb "python -m pdb ") (kill-buffer "*terminal*") (kill-buffer "emacs.org") (kill-buffer "slstatus") (kill-buffer "config.def.h") (kill-buffer "config.def.h<slstatus>") (kill-buffer "blocks.def.h") (kill-buffer "rofi_network") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py") (tetris-end-game) (tetris) (kill-buffer "snake-scores") (snake) (snake-start-game) (pong-quit) (pong) (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/achaSpc.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_10/achamaior.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_10/lancheria.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_10/lanche.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_09/contapal.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_09/juntatxt.py") (kill-buffer "*scratch*") (kill-buffer "*EGLOT (UFPR_Estatistica/(python-mode)) events*") (ess-show-call-stack) (scroll-down nil) (magit-reset-hard "HEAD") (magit-reset) (magit-reset-mixed "main") (magit-revert-no-commit "main" '("--edit")) (magit-revert) (kill-buffer "prova_001.r") (kill-buffer "dwm.c") (package-delete #s(package-desc edwina (20221206 1610) "Dynamic window manager" ((emacs (25))) nil nil "/home/anderson/.emacs.d/elpa/edwina-20221206.1610" ((:url . "https://gitlab.com/ajgrf/edwina") (:keywords "convenience") (:maintainer "Alex Griffin" . "a@ajgrf.com") (:maintainers ("Alex Griffin" . "a@ajgrf.com")) (:authors ("Alex Griffin" . "a@ajgrf.com")) (:commit . "f95c31b1de95df7e83338a5d4daf3363df325862")) nil) nil nil) (find-file "~/.emacs.d/emacs.org" t) (find-file "/home/anderson/.dotfiles/.emacs.d/emacs.org") (find-file "/home/anderson/.emacs.d/init.el") (recover-session) (execute-extended-command nil "recover-session" "recover-sess") (set-clipboard-coding-system 'utf-8) (set-clipboard-coding-system 'raw-text-unix) (set-clipboard-coding-system 'iso-8859-6-unix) (set-clipboard-coding-system 'latin-1-unix) (set-clipboard-coding-system 'unix) (set-clipboard-coding-system 'iso-8859-6) (set-clipboard-coding-system 'prefer-utf-8) (set-clipboard-coding-system 'utf-8-dos) (set-clipboard-coding-system 'utf-8-unix) (set-clipboard-coding-system 'georgian-academy) (set-clipboard-coding-system nil) (set-clipboard-coding-system 'utf-8-auto) (electric-indent-mode 'toggle) (neotree-create-node "/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-corrige") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/poluicao.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/abnt.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/percdna.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/copel.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/003_loja.py") (xclip-mode 'toggle) (package-install 'xclip nil) (simpleclip-mode 'toggle) (simpleclip-paste) (package-install 'simpleclip nil) (set-language-environment "Brazilian Portuguese") (kill-buffer "NotasAula.pdf") (shell nil) (string-rectangle 2806 5317 "") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/Scripts_R/Analise_Exploratoria_com_R.r") (neotree-create-node "/home/anderson/.dotfiles/.local/bin/brilho_tela_diminui") (neotree-create-node "/home/anderson/.dotfiles/.local/bin/brilho_tela_aumenta") (kill-buffer "config.h") (jupyter-org-kill-block-and-results) (jupyter-org-hydra/body) (jupyter-run-repl "python3" nil t nil t) (jupyter-repl-mode) (jupyter-load-file "/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/014_Python_Data_science/Projeto+inicial+-+Python+para+DS.ipynb") (ein:stop t "http://127.0.0.1:8888") (ein:run "/usr/bin/jupyter" "/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/014_Python_Data_science/" nil #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil) (ein:stop t nil) (ein:notebook-open "http://127.0.0.1:8888" "Projeto_Python_Data_Science.ipynb") (ein:ipynb-mode) (ein:run "/usr/bin/jupyter" "/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/013_Python_Ciencia_Dados/" nil #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil) (ein:run "/usr/bin/jupyter-execute" "/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/013_Python_Ciencia_Dados/" nil #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil) (ein:login "http://127.0.0.1:8888" #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil nil nil) (ein:jupyter-server-stop t nil) (ein:login "http://127.0.0.1:0" #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil nil nil) (ein:login "http://127.0.0.1" #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil nil nil) (package-install 'eink-theme nil) (package-install 'ein nil) (kill-buffer "100-graficos-tabelas-uni.R") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/Scripts_R/exercicio_medidas_posicao_dispersao.r") (projectile-switch-project nil) (project-switch-project "~/git/Educacional/Programa_Desenvolve_Boticario/") (project-switch-project "~/git/Educacional/UFPR_Estatistica/")))
(setq sql-product-history '(#("ansi" 0 4 (ivy-index 0))))
(setq sql-server-history '("172.17.0.2" "172.17.0.4" "172.17.0.3" "172.17.0.1"))
(setq sql-database-history '(#("alura" 0 5 (ivy-index 0)) #("postgres" 0 8 (ivy-index 0)) #("anderson" 0 8 (ivy-index 0))))
(setq sql-user-history '("postgres" "root"))
(setq read-number-history '("5432" "1"))
(setq compile-history '("make -k "))
(setq shell-command-history '("/usr/bin/zsh" "/usr/bin/bash"))
(setq magit-revision-history '(#("HEAD" 0 4 (ivy-index 3)) #("main" 0 4 (ivy-index 1)) #("5ad9048" 0 7 (ivy-index 0)) #("9e4e37a8e58c4c2695feeb6ce1223b8849c5f7f7" 0 40 (ivy-index 0)) #("e5b577f5f6a6135f1566bf97f4a4c1a2ea06af15" 0 40 (ivy-index 0)) #("origin/main" 0 11 (ivy-index 0)) #("1a51c1d" 0 7 (ivy-index 0)) #("ola mundo" 0 9 (ivy-index 0))))
(setq extended-command-history '("recover-session" "package-install"))
(setq ido-file-history '("." "prnabnt.py" "achaSpc.py" "achamaior.py" "lancheria.py" "test_while.py" "lanche.py" "contapal.py" "juntatxt.py" nil "emacs.org" "init.el" "dmenu-corrige" "poluicao.py" "abnt.py" "percdna.py" "copel.py" "003_loja.py" "Analise_Exploratoria_com_R.r" "brilho_tela_diminui" "brilho_tela_aumenta" "Projeto+inicial+-+Python+para+DS.ipynb" "exercicio_medidas_posicao_dispersao.r" "query_mariadb.sql" "somaMultiplos.py" "calculadora.py" "teste.sql" "onibus.py" "credito.py" "pesoideal.py" "achemaior.py" "medias.py" "multiplos.py" "notas.py" "calcnota.py" "py" "ultimoStr.py" "primaStr.py" "juntaStr.py" "compStr.py" "tamStr.py" "sl-wttr.sh" "sl-wttr.sh~" "degraus.py" "distpontos.py" "eq2graus.py" "volesFera.py" "calculos.py" "escada.py" "capitulo_02_resumo_dados.r" "sxhkdrc" "dmenu-bitwarden" "teste.ini" "config.ini" "teste" "eqSistCramer.py" "eqSist.py" "eqGrau1.py" "convKm.py" "mediaPond.py" "convFarenheit.py" "segundo2horas.py" "idadeDias2anos.py" "idadeAnos2dias.py" "media.py" "calcula_sistemas.py" "equacao_segundo_grau.py" "media_aritimetica.py" "media_aritimetica_3_valores.py" "soma_dois_numeros.py" "calcula_raiz_de_3_numeros.py" "aula004_usando_funcoes.sql" "aula003_sub_consultas.sql" "dmenu-teclados" "aula001.sql" "myinit.org" "tabela_funcionarios.sql" "tabela_aluno.sql" "README.md" "dunstrc" "cpu_status.sh" "music_status_bar.sh" "volume_icon.sh" "battery_status.sh" "advinha_mais.html" "estrelas.html" "media_idades_familiares.html" "media_idades_familiares.hml" "tabuada.html" "ano_copa.html" "jogo_advinha.html" "futebol.html" "imc.html" "programa.html" "texto_puro.html" "primeiro_teste.html"))
(setq minibuffer-history '(".emacs.d/emacs.org" ".local/bin/rofi_network" ".dwm/config.def.h" ".local/bin/dmenu/dmenu-monitor" ".dwm/autostart.sh" ".dwm/config.h" "jupyter-execute" "jupyter notebook" "/home/anderson/.local/bin/jupyter lab" "~/.local/bin/jupyter lab" "jupyter lab" "python3 -m jupyter lab" "jupyter" ".Xresources" "~/.dotfiles/" "djklsklsdsdnj" "dashboard" "/usr/bin/zsh" "select * from curso;" "select * from cursos;" "/usr/bin/bash"))
(setq ivy-history '(#("realgud" 0 7 (ivy-index 11)) #("prnabnt.py" 0 10 (ivy-index 0)) #("pr" 0 2 (ivy-index 0)) #("edwina-20221206.1610" 0 20 (ivy-index 1)) #("xclip" 0 5 (ivy-index 0)) #("simpleclip" 0 10 (ivy-index 1)) #("Brazilian Portuguese" 0 20 (idx 22 ivy-index 22)) #("con" 0 3 (ivy-index 0)) "config.h" #("config." 0 7 (ivy-index 0)) "config.def.h" #("CE301_Estatistica_Basica/" 0 25 (ivy-index 3)) #("/home/anderson/git/Educacional/UFPR_Estatistica/" 0 48 (ivy-index 2)) #("Python 3 (ipykernel)" 0 20 (ivy-index 0)) #("python3" 0 7 (idx 0 ivy-index 0)) #("http://127.0.0.1:8888/Projeto_Python_Data_Science.ipynb" 0 55 (ivy-index 0)) #("8888" 0 4 (ivy-index 0)) #("0" 0 1 (ivy-index 0)) #("eink-theme" 0 10 (ivy-index 4)) #("ein" 0 3 (ivy-index 5)) #("CE301_Estatistica_Basica/Scripts_R/" 0 35 (ivy-index 8)) #("005_Logica_Programacao_Javascript/Logica/jogo_advinha.html" 0 58 (ivy-index 34)) #("~/git/Educacional/Programa_Desenvolve_Boticario/" 0 48 (ivy-index 1)) #("CE300_Estatistica_e_Sociedade/Seminario_001/Impacto_Vacina_Tdap_em_gravidas.pdf" 0 79 (ivy-index 1)) #("~/git/Educacional/UFPR_Estatistica/" 0 35 (ivy-index 2)) #("... (choose a dir)" 0 18 (ivy-index 3)) #("~/.dotfiles/" 0 12 (ivy-index 1)) #("./" 0 2 (ivy-index 0)) #("compilation-disable-input" 0 25 (ivy-index 4)) #("tree-sitter-ispell" 0 18 (ivy-index 1)) #("tree-sitter-langs" 0 17 (ivy-index 0)) #("tree-sitter" 0 11 (ivy-index 4)) #("rainbow-mode" 0 12 (ivy-index 0)) #("101-medidas-uni.R" 0 17 (ivy-index 4)) #("origin" 0 6 (ivy-index 0)) #("master" 0 6 (ivy-index 0)) #("pdf-tools" 0 9 (ivy-index 0)) #("~/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/" 0 79 (ivy-index 0)) #("dape" 0 4 (ivy-index 0)) #("elpy" 0 4 (ivy-index 1)) #("nyan-mode" 0 9 (ivy-index 0)) #("flycheck" 0 8 (ivy-index 64)) #("emacsql-psql" 0 12 (ivy-index 13)) #("index.html" 0 10 (ivy-index 0)) #("myterminal-controls" 0 19 (ivy-index 10)) #("electric-indent-mode" 0 20 (ivy-index 14)) #("indent-guide" 0 12 (ivy-index 0)) #("web-mode-indent-style" 0 21 (ivy-index 0))))
(setq counsel-M-x-history '(#("^rainbo" 0 7 (ivy-index 0)) "rainbow-mode" #("^rainb" 0 6 (ivy-index 0)) #("^" 0 1 (ivy-index 1)) "replace-string" #("^map" 0 4 (ivy-index 0)) "map-query-replace-regexp" #("^repla" 0 6 (ivy-index 1)) "term" #("^term" 0 5 (ivy-index 0)) "realgud:pdb" #("^realgud:pd" 0 11 (ivy-index 3)) "realgud:pdb-customize" #("^pd" 0 3 (ivy-index 1)) "pdb-reset" #("^re" 0 3 (ivy-index 0)) #("^realgu" 0 7 (ivy-index 2)) #("^pack" 0 5 (ivy-index 0)) "package-install" #("^pdb" 0 4 (ivy-index 0)) "pdb" #("^cd" 0 3 (ivy-index 0)) "cd" #("^ter" 0 4 (ivy-index 0)) #("^proje" 0 6 (ivy-index 2)) "projectile-mode-menu" #("^tetr" 0 5 (ivy-index 1)) "tetris-end-game" "tetris" "snake" #("^snake" 0 6 (ivy-index 9)) "snake-start-game" #("^sna" 0 4 (ivy-index 0)) #("^pon" 0 4 (ivy-index 1)) "pong-quit" "pong" #("^package-inst" 0 13 (ivy-index 0)) #("^ess-" 0 5 (ivy-index 109)) "ess-show-call-stack" #("^scroll-down" 0 12 (ivy-index 0)) "scroll-down" #("^magit-re" 0 9 (ivy-index 0)) "magit-reset" #("^magit" 0 6 (ivy-index 22)) "magit-revert" #("^package" 0 8 (ivy-index 0)) "package-delete" "set-clipboard-coding-system" #("^set-cli" 0 8 (ivy-index 0)) #("^ele" 0 4 (ivy-index 3)) "electric-indent-mode" #("^xcl" 0 4 (ivy-index 0)) "xclip-mode" #("^xc" 0 3 (ivy-index 0)) #("^package-ins" 0 12 (ivy-index 0)) #("^simpl" 0 6 (ivy-index 0)) "simpleclip-mode" "simpleclip-paste" "set-language-environment" #("^set-la" 0 7 (ivy-index 0)) #("^shell" 0 6 (ivy-index 0)) "shell" #("^jupyter-" 0 9 (ivy-index 57)) "jupyter-org-kill-block-and-results" #("^jupyter" 0 8 (ivy-index 11)) "jupyter-org-hydra/body" "jupyter-run-repl" "jupyter-repl-mode" #("^jupyter-re" 0 11 (ivy-index 0)) "jupyter-load-file" #("^jupyter-run" 0 12 (ivy-index 0)) "ein:stop" "ein:run" #("^ein" 0 4 (ivy-index 4)) "ein:ipynb-mode" "ein:login" "ein:jupyter-server-stop" #("^ein:l" 0 6 (ivy-index 0)) #("^package-install" 0 16 (ivy-index 0)) #("^projectile" 0 11 (ivy-index 0)) "projectile-switch-project" #("^projectile-s" 0 13 (ivy-index 1)) #("^packa" 0 6 (ivy-index 0)) #("^projectile-mo" 0 14 (ivy-index 1)) #("^projectile-co" 0 14 (ivy-index 2)) "projectile-configure-project" #("^projectile-" 0 12 (ivy-index 0)) "projectile-skel-dir-locals" #("^sql-maria" 0 10 (ivy-index 0)) "sql-mariadb" "sql-postgres" #("^sql-pos" 0 8 (ivy-index 0)) #("^sql-mari" 0 9 (ivy-index 0)) #("^python-mode" 0 12 (ivy-index 0)) "python-mode" #("^python" 0 7 (ivy-index 0)) #("^eglo" 0 5 (ivy-index 0)) "eglot" #("packa" 0 5 (ivy-index 0)) #("^rain" 0 5 (ivy-index 0)) #("^magit-" 0 7 (ivy-index 24)) "magit-status" #("^pdf-view" 0 9 (ivy-index 0)) "pdf-view-mode" #("^pdf-vi" 0 7 (ivy-index 0)) #("^pdf-t" 0 6 (ivy-index 6)) "pdf-tools-enable-minor-modes" #("^try" 0 4 (ivy-index 0)) "try" #("^r" 0 2 (ivy-index 1)) "R" #("^R" 0 2 (ivy-index 1)) "R-mode" #("^dape" 0 5 (ivy-index 0)) "dape-continue" #("^elpy-mo" 0 8 (ivy-index 1)) "elpy-mode" #("^elpy-ena" 0 9 (ivy-index 0)) "elpy-enable" #("^elpy-dis" 0 9 (ivy-index 0)) "elpy-disable" #("^elpy" 0 5 (ivy-index 0)) #("^elpy-shell-send" 0 16 (ivy-index 2)) "elpy-shell-send-file" "elpy-shell-send-buffer" "elpy-shell-send-statement-and-step" #("^elpy-con" 0 9 (ivy-index 0)) "elpy-config" #("^elpy-s" 0 7 (ivy-index 11)) "elpy-shell-send-defun-and-go" #("^run-p" 0 6 (ivy-index 1)) "run-python" #("^sql-post" 0 9 (ivy-index 0)) #("^unta" 0 5 (ivy-index 0)) "untabify" #("^elpy-mode" 0 10 (ivy-index 0)) #("^elpy-mod" 0 9 (ivy-index 1)) #("^auto-com" 0 9 (ivy-index 2)) "auto-complete-mode" #("^auto" 0 5 (ivy-index 3)) "auto-complete" #("^elpy-c" 0 7 (ivy-index 1)) #("^elpy-conf" 0 10 (ivy-index 0)) #("^elpy-confi" 0 11 (ivy-index 0)) #("^nyan" 0 5 (ivy-index 4)) "nyan-start-animation" "nyan-start-music" "nyan-mode" "nyan-scroll-buffer" #("^nya" 0 4 (ivy-index 1)) "nyan-toggle-wavy-trail" #("nyan-" 0 5 (ivy-index 7)) #("^spaceline-toggle-n" 0 19 (ivy-index 1)) "spaceline-toggle-nyan-cat-on" "spaceline-toggle-nyan-cat" "elpy-autopep8-fix-code" #("^elpy-menu" 0 10 (ivy-index 0)) "elpy-menu" #("^elpy-" 0 6 (ivy-index 16)) "elpy-check" #("^elpy-config" 0 12 (ivy-index 0)) #("^elpy-en" 0 8 (ivy-index 0)) #("^pyve" 0 5 (ivy-index 5)) "pyvenv-workon" #("^pyvenv" 0 7 (ivy-index 6)) "pyvenv-activate" #("^elpy-rpc" 0 9 (ivy-index 1)) "elpy-rpc-restart" #("^elpy-rp" 0 8 (ivy-index 1)) #("^ansi" 0 5 (ivy-index 1)) "ansi-term" #("^python-mo" 0 10 (ivy-index 0)) #("^sql" 0 4 (ivy-index 1)) #("^conf-mo" 0 8 (ivy-index 0)) "conf-mode" #("linu" 0 4 (ivy-index 0)) "linum-mode" #("^sql-hel" 0 8 (ivy-index 0)) "sql-help" #("^sql-set" 0 8 (ivy-index 1)) "sql-set-sqli-buffer" "sql-set-product" #("^sql-mode" 0 9 (ivy-index 0)) "sql-mode" #("^markdown-pre" 0 13 (ivy-index 0)) "markdown-preview-cleanup" #("^markdown-previ" 0 15 (ivy-index 1)) "markdown-preview" "markdown-preview-mode" "markdown-preview-open-browser" #("^markdown-vi" 0 12 (ivy-index 0)) "markdown-view-mode" #("^markdown-v" 0 11 (ivy-index 0)) #("^markdown-p" 0 11 (ivy-index 0)) #("^markdown-mode" 0 14 (ivy-index 2)) "markdown-mode" #("^markdo" 0 7 (ivy-index 2)) #("^ra" 0 3 (ivy-index 1)) #("^conf-mod" 0 9 (ivy-index 0)) #("^myter" 0 6 (ivy-index 1)) "myterminal-controls-open-controls" #("^magit-rebase" 0 13 (ivy-index 2)) "magit-rebase" #("^magit-log-current" 0 18 (ivy-index 0)) "magit-log-current" #("^magit-log --g" 0 14 (ivy-index 0)) "magit-log:--grep" #("^magit-lo" 0 9 (ivy-index 1)) "magit-log:-G" #("^magit-log" 0 10 (ivy-index 8)) "magit-log" #("^centaur-tabs-mode" 0 18 (ivy-index 0)) "centaur-tabs-mode" #("^centaur-tabs-g" 0 15 (ivy-index 0)) "centaur-tabs-group-buffer-groups" #("^magit-merge" 0 12 (ivy-index 3)) "magit-merge" #("^magit-status" 0 13 (ivy-index 2)) #("^ansi-" 0 6 (ivy-index 1)) #("^conf-mode" 0 10 (ivy-index 0)) #("^magit-stat" 0 11 (ivy-index 2)) #("^ansi-te" 0 8 (ivy-index 0)) #("^java" 0 5 (ivy-index 1)) "javascript-mode" #("^customize-va" 0 13 (ivy-index 0)) "customize-variable" #("^indent-gui" 0 11 (ivy-index 0)) "indent-guide-mode" #("^package-lis" 0 12 (ivy-index 0)) "package-list-packages" #("^web-mode" 0 9 (ivy-index 82)) "web-mode" #("ansi" 0 4 (ivy-index 2)) #("^cua" 0 4 (ivy-index 5)) "cua-toggle-rectangle-mark" "cua-paste" "cua-paste-pop" "cua-cut-region" #("^cua-sc" 0 7 (ivy-index 1)) "cua-scroll-down" #("^cua-s" 0 6 (ivy-index 2)) "cua-selection-mode"))
(setq swiper-history '(#("updatebars" 0 10 (ivy-index 3)) #(" updatebars(void)" 0 1 (display "2467 " swiper-line-number 2467) 1 11 (face font-lock-function-name-face fontified t) 11 12 (c-type c-decl-arg-start fontified t) 12 16 (face font-lock-type-face fontified t) 16 17 (fontified t)) #("togglebar" 0 9 (ivy-index 1)) #(" togglebar(const Arg *arg)" 0 1 (display "2300 " swiper-line-number 2300) 1 10 (face font-lock-function-name-face fontified t) 10 11 (c-type c-decl-arg-start fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 25 (face font-lock-variable-name-face fontified t) 25 26 (fontified t)) #("setup" 0 5 (ivy-index 1)) #(" setup(void)" 0 1 (display "2094 " swiper-line-number 2094) 1 6 (face font-lock-function-name-face fontified t) 6 7 (c-type c-decl-arg-start fontified t) 7 11 (face font-lock-type-face fontified t) 11 12 (fontified t)) #("drawbar" 0 7 (ivy-index 2)) #(" drawbar(Monitor *m)" 0 1 (display "1005 " swiper-line-number 1005) 1 8 (face font-lock-function-name-face fontified t) 8 9 (c-type c-decl-arg-start fontified t) 9 16 (face font-lock-type-face fontified t) 16 18 (fontified t) 18 19 (face font-lock-variable-name-face fontified t) 19 20 (fontified t)) #("configureno" 0 11 (ivy-index 3)) #(" configurenotify(XEvent *e)" 0 1 (swiper-line-number 687 display "687  ") 1 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t c-type c-decl-arg-start) 17 23 (fontified t face font-lock-type-face) 23 25 (fontified t) 25 26 (fontified t face font-lock-variable-name-face) 26 27 (fontified t)) #("sp" 0 2 (ivy-index 0)) #("  * whenever a new event has been fetched. This allows event dispatching" 0 1 (swiper-line-number 10 display "10   ") 1 72 (fontified t face font-lock-comment-face c-in-sws t)) #("updatege" 0 8 (ivy-index 4)) #(" updategeom(void)" 0 1 (swiper-line-number 2511 display "2511 ") 1 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t c-type c-decl-arg-start) 12 16 (fontified t face font-lock-type-face) 16 17 (fontified t)) "indent" #("indent" 0 6 (ivy-index 16)) #("   indent-guide                   20160630       available    melpa-stable show vertical lines to guide indentation" 0 1 (swiper-line-number 1665 display "1665 ") 1 3 (tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 3 15 (button (t) category default-button face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package tabulated-list-column-name "Package" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 15 16 (tabulated-list-column-name "Package" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 16 34 (display (space :align-to 33) tabulated-list-column-name "Package" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 34 42 (font-lock-face package-status-available help-echo #("Version: 20160630" 9 17 (font-lock-face package-status-available)) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 42 43 (tabulated-list-column-name "Version" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 43 49 (display (space :align-to 48) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 49 58 (font-lock-face package-status-available help-echo #("Status: available" 8 17 (font-lock-face package-status-available)) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 58 59 (tabulated-list-column-name "Status" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 59 62 (display (space :align-to 61) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 62 69 (font-lock-face package-status-available help-echo #("Archive: melpa-stable" 9 21 (font-lock-face package-status-available)) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 69 74 (font-lock-face package-status-available display "…" help-echo #("Archive: melpa-stable" 9 21 (font-lock-face package-status-available)) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 74 75 (tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 75 115 (font-lock-face package-description help-echo #("Description: show vertical lines to guide indentation" 13 53 (font-lock-face package-description)) tabulated-list-column-name "Description" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))])) "scheme[SchemeNorm][ColBg" #("scheme[SchemeNorm][ColB" 0 23 (ivy-index 8)) #(" 	XSetForeground(dpy, drw->gc, scheme[SchemeNorm][ColBg].pixel);" 0 1 (swiper-line-number 2761 display "2761 ") 1 2 (fontified t c-is-sws t) 2 3 (c-is-sws t fontified t) 3 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t rear-nonsticky t)) #("updatesys" 0 9 (ivy-index 18)) #(" updatesystray(void)" 0 1 (swiper-line-number 2700 display "2700 ") 1 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t c-type c-decl-arg-start) 15 19 (fontified t face font-lock-type-face) 19 20 (fontified t)) #("mai" 0 3 (ivy-index 0)) #(" main(int argc, char *argv[])" 0 1 (swiper-line-number 814 display "814 ") 1 5 (fontified t face font-lock-function-name-face) 5 6 (fontified t c-type c-decl-arg-start) 6 9 (fontified t face font-lock-type-face) 9 10 (fontified t) 10 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t c-type c-decl-arg-start) 15 16 (fontified t) 16 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-variable-name-face) 26 29 (fontified t))))
(setq ido-buffer-history '("*gud*" "*Python*" "slstatus.c" "*terminal*" "emacs.org" "slstatus" "config.def.h" "config.def.h<slstatus>" "blocks.def.h" "rofi_network" "snake-scores" "*scratch*" "*EGLOT (UFPR_Estatistica/(python-mode)) events*" "prova_001.r" "dwm.c" "NotasAula.pdf" "config.h" "100-graficos-tabelas-uni.R" "*SQL: MariaDB*" "achemaior.py" "sl-wttr.sh" "dmenu-docker-images" "dmenu-power" "dmenu-atalhos-programas" "equacao_segundo_grau.py" "media_aritimetica_3_valores.py" "calcula_raiz_de_3_numeros.py" "teste.py" "*Elpy Config*" "*Customize Option: Python Flymake Command*" "if_monitor.sh" "*ansi-term*" "dmenu-teclados" "tabela_funcionarios.sql" "aula001.sql" "banco-inicial.sql" "*SQL: Postgres*" "dmenu-docker-compose.sh" "HELLO" "index.theme" "icon-theme.cache" "]" "action-unavailable-symbolic.svg" "autostart.sh" "dmenu-window" "battery_status.sh" "init.el" "dunstrc" "*Compile-Log*" "picom.conf" "index.html" "config.mk" "Untitled<2>" "Untitled<3>" "Untitled" "myinit.org" "config" "muta_microfone" "config.def.h<.dwm>" "block-battery" "dwmbar-powerline" "diminui_volume" "muta_volume" "*Messages*" "*Async-native-compile-log*" "*Warnings*" "magit-process: .dotfiles" "magit: .dotfiles" "volume_icon.sh" "app.js" "x.c" "x.c.rej" "config.def.h.rej" "config.def.h<st>"))
(setq file-name-history '(#("/home/anderson/.dwm/autostart_blocking.sh" 0 41 (ivy-index 1)) #("/home/anderson/.Xresources" 0 26 (ivy-index 0)) #("/home/anderson/.dotfiles/.config/dwmblocks/blocks.def.h" 0 55 (ivy-index 7)) #("/home/anderson/.dotfiles/.config/slstatus/" 0 42 (ivy-index 0)) "~/.emacs.d/emacs.org" "/home/anderson/.dotfiles/.emacs.d/emacs.org" "/home/anderson/.emacs.d/init.el" #("/home/anderson/.dotfiles/" 0 25 (ivy-index 0)) #("/home/anderson/.xinitrc" 0 23 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/" 0 91 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/teste_while.py" 0 116 (ivy-index 0)) #("/home/anderson/.emacs.d/emacs.org" 0 33 (ivy-index 3)) #("/home/anderson/.emacs.d/projects" 0 32 (ivy-index 19)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/013_Python_Ciencia_Dados/Projeto_Python_Data_Science.ipynb" 0 119 (ivy-index 2)) #("/home/anderson/git/Educacional/UFPR_Estatistica/SobreviventesTitanic.r" 0 70 (ivy-index 0)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/007_PostgreSQL/" 0 76 (ivy-index 9)) #("/home/anderson/git;Edu" 0 22 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/histograma_em_r.r" 0 90 (ivy-index 0)) "~/git/Educacional/Programa_Desenvolve_Boticario/012_PowerBI_Tratamento_Dados/power_query_dump.sql" "~/git/win10vm/win10.xml" #("/home/anderson/.dwm/autostart.sh" 0 32 (ivy-index 0)) #("/home/anderson/.config/slstatus/" 0 32 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/100-graficos-tabelas-uni.R" 0 99 (ivy-index 14)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/Livro_Estatitica_Basica/testes.r" 0 105 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/" 0 73 (ivy-index 4)) #("/var/spool/cron/crontabs/anderson" 0 33 (ivy-index 0)) #("/var/spool/cron/crontabs/" 0 25 (ivy-index 2)) "/tmp/crontab.uSJaXd/crontab" "/tmp/crontab.vtEVge/crontab" "/home/anderson/.dotfiles/.local/bin/sl-wttr.sh~" #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/101-medidas-uni.R" 0 90 (ivy-index 0)) #("/home/anderson/.dwm/config.def.h" 0 32 (ivy-index 0)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/008_Postgres_views_funcoes_consultas/dados-aula-2.sql" 0 114 (ivy-index 5)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/calcula_raiz_de_3_numeros.py" 0 119 (ivy-index 0)) #("/home/anderson/.dotfiles/.config/slstatus/config.def.h" 0 54 (ivy-index 0)) #("/home/anderson/.local/bin/battery_status.sh" 0 43 (ivy-index 1)) #("/home/anderson/teste.py" 0 23 (ivy-index 0)) #("/home/anderson/.dotfiles/.local/bin/dmenu/" 0 42 (ivy-index 2)) #("/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-docker-lista-funcionando" 0 72 (ivy-index 0)) #("/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-atalhos-programas" 0 65 (ivy-index 0)) #("/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-docker-images" 0 61 (ivy-index 4)) #("/home/anderson/dmenu-docker-compose.sh" 0 38 (ivy-index 2)) #("/home/anderson/.dotfiles/.dwm/config.def.h" 0 42 (ivy-index 0)) "/home/anderson/.emacs.d/myinit.org" #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/007_PostgreSQL/tabela_funcionarios.sql" 0 99 (ivy-index 9)) "/home/anderson/.dotfiles/.config/dunst/dunstrc" #("/home/anderson/.local/bin/volume_icon.sh" 0 40 (ivy-index 6)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/index.html" 0 102 (ivy-index 7)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/app.js" 0 98 (ivy-index 3)) #("/home/anderson/.config/picom.conf" 0 33 (ivy-index 3)) #("/home/anderson/.dotfiles/.dwm/" 0 30 (ivy-index 0)) #("/home/anderson/.dotfiles/.Xresources" 0 36 (ivy-index 0)) #("/home/anderson/.config/st/config.def.h" 0 38 (ivy-index 0)) "~/.dotfiles/.emacs.d/init.el"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq kill-ring '("^b#282828^^c#89B482^" #("^b#282828^^c#dfbf8e^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 18 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 18 19 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e"))) 19 20 (rear-nonsticky t fontified t face font-lock-string-face)) #("^b#282828^^c#89B482^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 19 (fontified t face ((:foreground "black") (:background "#89B482"))) 19 20 (fontified t face font-lock-string-face)) #("^b#282828^^c#dfbf8e^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 18 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 18 19 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e"))) 19 20 (rear-nonsticky t fontified t face font-lock-string-face)) #("^c#dfbf8e^" 0 2 (fontified t face font-lock-string-face) 2 8 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 8 9 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e"))) 9 10 (rear-nonsticky t fontified t face font-lock-string-face)) "static const char c_bg[]          = \"#222121\";
static const char c_fg[]          = \"#dfbf8e\";
static const char c_white[]       = \"#fbf1c7\";
static const char c_red[]         = \"#cc241d\";
static const char c_green[]       = \"#B8bb26\";
static const char c_yellow[]      = \"#fabd2f\";
static const char c_blue[]        = \"#45858B\";
static const char c_purple[]      = \"#b16286\";
static const char c_aqua[]        = \"#689d6a\";
static const char c_gray[]        = \"#a89984\";
static const char c_orange[]      = \"#d65d0e\";
static const char c_aqua2[]       = \"#427b58\";

static const char icone_color[] = \"^b#282828^^c#629464^\";
static const char texto_color[] = \"^b#282828^^c^#dfbf8e\";

static const struct arg args[] = {
	/* function                     format					argument */
	{ run_command,		\"^b#282828^^c#629464^ %s\",			\"bash ~/.local/bin/music_status_bar.sh\"},
	{ run_command,		\"^b#282828^^c#b16286^ %s\",			\"bash ~/.local/bin/sl-wttr.sh\"},
	{ run_command,		\"^b#282828^^c#fb4934^ %s\",			\"bash ~/.local/bin/cpu_status.sh\"},
	//{ cpu_perc,		\"^b#282828^^c#fb4934^ %.3s󰏰 \",			NULL},
	//{ run_command,	\"^b#282828^^c#fb4934^%s\",			\"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"},
	{ ram_perc,		\"^b#282828^^c#B8bb26^  %s󰏰 \",			NULL},
	{ disk_perc,		\"^b#282828^^c#45858B^ 󰋊 %s󰏰 \",			\"/\" },
	{ wifi_essid,		\"^b#282828^^c#fabd2f^  %s\",			\"wlan0\" },
	{ wifi_perc,		\"^b#282828^^c#fabd2f^ %s󰏰 \",			\"wlan0\" },
	//{ netspeed_rx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ netspeed_tx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ battery_perc,	\"^b#282828^^c#b16286^  %s󰏰 \",			\"BAT1\" },
	{ run_command,		\"%s\",						\"bash ~/.local/bin/battery_status.sh\" },
	{ run_command,		\"^b#282828^^c#dfbf8e^ %s\",			\"bash ~/.local/bin/volume_icon.sh\" },
	{ run_command,		\"^b#282828^^c#45858b^ 󰌌 %s\",			\"setxkbmap -query | grep layout | awk '{print$2}'\"},
	{ run_command,		\"^b#282828^^c#d65d0e^  %s\",			\"date +'%a %d %b %Y'\" },
	{ run_command,		\"^b#282828^^c#689d6a^ 󰥔 %s \",			\"date +'%H:%M'\"},
};
" "#89B482" #("#427b58" 0 7 (fontified t face ((:foreground "white") (:background "#427b58")))) #("^b#282828^^c#dfbf8e^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 18 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 18 19 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e"))) 19 20 (fontified t rear-nonsticky t face font-lock-string-face)) #("#dfbf8e" 0 6 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 6 7 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e")))) #("^b#282828^^c#427b58^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 19 (fontified t face ((:foreground "white") (:background "#427b58"))) 19 20 (fontified t face font-lock-string-face)) "	{ run_command,		\"^b#282828^^c#427b58^ %s\",			\"bash ~/.local/bin/music_status_bar.sh\"},
	{ run_command,		\"^b#282828^^c#427b58^ %s\",			\"bash ~/.local/bin/sl-wttr.sh\"},
	{ run_command,		\"^b#282828^^c#427b58^ %s\",			\"bash ~/.local/bin/cpu_status.sh\"},
	//{ cpu_perc,		\"^b#282828^^c#427b58^ %.3s󰏰 \",			NULL},
	//{ run_command,	\"^b#282828^^c#427b58^%s\",			\"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"},
	{ ram_perc,			\"^b#282828^^c#427b58^  %s󰏰 \",			NULL},
	{ disk_perc,		\"^b#282828^^c#427b58^ 󰋊 %s󰏰 \",			\"/\" },
	{ wifi_essid,		\"^b#282828^^c#427b58^  %s\",			\"wlan0\" },
	{ wifi_perc,		\"^b#282828^^c#427b58^ %s󰏰 \",			\"wlan0\" },
	//{ netspeed_rx,	\"^b#282828^^c#427b58^   %s\",			\"wlan0\" },
	//{ netspeed_tx,	\"^b#282828^^c#427b58^   %s\",			\"wlan0\" },
	//{ battery_perc,	\"^b#282828^^c#427b58^  %s󰏰 \",			\"BAT1\" },
	{ run_command,		\"%s\",						\"bash ~/.local/bin/battery_status.sh\" },
	{ run_command,		\"^b#282828^^c#427b58^ %s\",			\"bash ~/.local/bin/volume_icon.sh\" },
	{ run_command,		\"^b#282828^^c#427b58^ 󰌌 %s\",			\"setxkbmap -query | grep layout | awk '{print$2}'\"},
	{ run_command,		\"^b#282828^^c#427b58^  %s\",			\"date +'%a %d %b %Y'\" },
	{ run_command,		\"^b#282828^^c#427b58^ 󰥔 %s \",			\"date +'%H:%M'\"}," #("static const char c_bg[]          = \"#222121\";
static const char c_fg[]          = \"#dfbf8e\";
static const char c_white[]       = \"#fbf1c7\";
static const char c_red[]         = \"#cc241d\";
static const char c_green[]       = \"#B8bb26\";
static const char c_yellow[]      = \"#fabd2f\";
static const char c_blue[]        = \"#45858B\";
static const char c_purple[]      = \"#b16286\";
static const char c_aqua[]        = \"#689d6a\";
static const char c_gray[]        = \"#a89984\";
static const char c_orange[]      = \"#d65d0e\";
static const char c_aqua2[]       = \"#427b58\";

static const char icone_color[] = \"^b#282828^^c#629464^\";
static const char texto_color[] = \"^b#282828^^c^#dfbf8e\";

static const struct arg args[] = {
	/* function                     format					argument */
	{ run_command,		\"^b#282828^^c#629464^ %s\",			\"bash ~/.local/bin/music_status_bar.sh\"},
	{ run_command,		\"^b#282828^^c#b16286^ %s\",			\"bash ~/.local/bin/sl-wttr.sh\"},
	{ run_command,		\"^b#282828^^c#fb4934^ %s\",			\"bash ~/.local/bin/cpu_status.sh\"},
	//{ cpu_perc,		\"^b#282828^^c#fb4934^ %.3s󰏰 \",			NULL},
	//{ run_command,	\"^b#282828^^c#fb4934^%s\",			\"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"},
	{ ram_perc,		\"^b#282828^^c#B8bb26^  %s󰏰 \",			NULL},
	{ disk_perc,		\"^b#282828^^c#45858B^ 󰋊 %s󰏰 \",			\"/\" },
	{ wifi_essid,		\"^b#282828^^c#fabd2f^  %s\",			\"wlan0\" },
	{ wifi_perc,		\"^b#282828^^c#fabd2f^ %s󰏰 \",			\"wlan0\" },
	//{ netspeed_rx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ netspeed_tx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ battery_perc,	\"^b#282828^^c#b16286^  %s󰏰 \",			\"BAT1\" },
	{ run_command,		\"%s\",						\"bash ~/.local/bin/battery_status.sh\" },
	{ run_command,		\"^b#282828^^c#dfbf8e^ %s\",			\"bash ~/.local/bin/volume_icon.sh\" },
	{ run_command,		\"^b#282828^^c#45858b^ 󰌌 %s\",			\"setxkbmap -query | grep layout | awk '{print$2}'\"},
	{ run_command,		\"^b#282828^^c#d65d0e^  %s\",			\"date +'%a %d %b %Y'\" },
	{ run_command,		\"^b#282828^^c#689d6a^ 󰥔 %s \",			\"date +'%H:%M'\"},
};
" 0 1 (fontified t c-is-sws t face font-lock-keyword-face) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 16 (fontified t face font-lock-type-face) 16 17 (fontified t c-type c-decl-id-start face font-lock-type-face) 17 18 (fontified t) 18 22 (fontified t face font-lock-variable-name-face) 22 36 (fontified t) 36 37 (fontified t face font-lock-string-face) 37 44 (fontified t face ((:foreground "white") (:background "#222121"))) 44 45 (fontified t face font-lock-string-face) 45 47 (fontified t) 47 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 63 (fontified t face font-lock-type-face) 63 64 (fontified t c-type c-decl-id-start face font-lock-type-face) 64 65 (fontified t) 65 69 (fontified t face font-lock-variable-name-face) 69 83 (fontified t) 83 84 (fontified t face font-lock-string-face) 84 91 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 91 92 (fontified t face font-lock-string-face) 92 94 (fontified t) 94 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-keyword-face) 106 107 (fontified t) 107 110 (fontified t face font-lock-type-face) 110 111 (fontified t c-type c-decl-id-start face font-lock-type-face) 111 112 (fontified t) 112 119 (fontified t face font-lock-variable-name-face) 119 130 (fontified t) 130 131 (fontified t face font-lock-string-face) 131 138 (fontified t face ((:foreground "black") (:background "#fbf1c7"))) 138 139 (fontified t face font-lock-string-face) 139 141 (fontified t) 141 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 157 (fontified t face font-lock-type-face) 157 158 (fontified t c-type c-decl-id-start face font-lock-type-face) 158 159 (fontified t) 159 164 (fontified t face font-lock-variable-name-face) 164 177 (fontified t) 177 178 (fontified t face font-lock-string-face) 178 185 (fontified t face ((:foreground "white") (:background "#cc241d"))) 185 186 (fontified t face font-lock-string-face) 186 188 (fontified t) 188 190 (fontified t face font-lock-keyword-face) 190 194 (fontified t face font-lock-keyword-face) 194 195 (fontified t) 195 200 (fontified t face font-lock-keyword-face) 200 201 (fontified t) 201 204 (fontified t face font-lock-type-face) 204 205 (fontified t c-type c-decl-id-start face font-lock-type-face) 205 206 (fontified t) 206 213 (fontified t face font-lock-variable-name-face) 213 224 (fontified t) 224 225 (fontified t face font-lock-string-face) 225 232 (fontified t face ((:foreground "black") (:background "#B8bb26"))) 232 233 (fontified t face font-lock-string-face) 233 235 (fontified t) 235 241 (fontified t face font-lock-keyword-face) 241 242 (fontified t) 242 247 (fontified t face font-lock-keyword-face) 247 248 (fontified t) 248 251 (fontified t face font-lock-type-face) 251 252 (fontified t c-type c-decl-id-start face font-lock-type-face) 252 253 (fontified t) 253 261 (fontified t face font-lock-variable-name-face) 261 271 (fontified t) 271 272 (fontified t face font-lock-string-face) 272 279 (fontified t face ((:foreground "black") (:background "#fabd2f"))) 279 280 (fontified t face font-lock-string-face) 280 281 (fontified t) 281 282 (fontified t) 282 288 (fontified t face font-lock-keyword-face) 288 289 (fontified t) 289 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 298 (fontified t face font-lock-type-face) 298 299 (fontified t c-type c-decl-id-start face font-lock-type-face) 299 300 (fontified t) 300 306 (fontified t face font-lock-variable-name-face) 306 318 (fontified t) 318 319 (fontified t face font-lock-string-face) 319 326 (fontified t face ((:foreground "white") (:background "#45858B"))) 326 327 (fontified t face font-lock-string-face) 327 329 (fontified t) 329 335 (fontified t face font-lock-keyword-face) 335 336 (fontified t) 336 341 (fontified t face font-lock-keyword-face) 341 342 (fontified t) 342 345 (fontified t face font-lock-type-face) 345 346 (fontified t c-type c-decl-id-start face font-lock-type-face) 346 347 (fontified t) 347 355 (fontified t face font-lock-variable-name-face) 355 365 (fontified t) 365 366 (fontified t face font-lock-string-face) 366 373 (fontified t face ((:foreground "white") (:background "#b16286"))) 373 374 (fontified t face font-lock-string-face) 374 376 (fontified t) 376 382 (fontified t face font-lock-keyword-face) 382 383 (fontified t) 383 388 (fontified t face font-lock-keyword-face) 388 389 (fontified t) 389 392 (fontified t face font-lock-type-face) 392 393 (fontified t c-type c-decl-id-start face font-lock-type-face) 393 394 (fontified t) 394 400 (fontified t face font-lock-variable-name-face) 400 412 (fontified t) 412 413 (fontified t face font-lock-string-face) 413 420 (fontified t face ((:foreground "black") (:background "#689d6a"))) 420 421 (fontified t face font-lock-string-face) 421 423 (fontified t) 423 429 (fontified t face font-lock-keyword-face) 429 430 (fontified t) 430 435 (fontified t face font-lock-keyword-face) 435 436 (fontified t) 436 439 (fontified t face font-lock-type-face) 439 440 (fontified t c-type c-decl-id-start face font-lock-type-face) 440 441 (fontified t) 441 447 (fontified t face font-lock-variable-name-face) 447 459 (fontified t) 459 460 (fontified t face font-lock-string-face) 460 467 (fontified t face ((:foreground "black") (:background "#a89984"))) 467 468 (fontified t face font-lock-string-face) 468 470 (fontified t) 470 476 (fontified t face font-lock-keyword-face) 476 477 (fontified t) 477 482 (fontified t face font-lock-keyword-face) 482 483 (fontified t) 483 486 (fontified t face font-lock-type-face) 486 487 (fontified t c-type c-decl-id-start face font-lock-type-face) 487 488 (fontified t) 488 496 (fontified t face font-lock-variable-name-face) 496 506 (fontified t) 506 507 (fontified t face font-lock-string-face) 507 514 (fontified t face ((:foreground "white") (:background "#d65d0e"))) 514 515 (fontified t face font-lock-string-face) 515 517 (fontified t) 517 523 (fontified t face font-lock-keyword-face) 523 524 (fontified t) 524 529 (fontified t face font-lock-keyword-face) 529 530 (fontified t) 530 533 (fontified t face font-lock-type-face) 533 534 (fontified t c-type c-decl-id-start face font-lock-type-face) 534 535 (fontified t) 535 542 (fontified t face font-lock-variable-name-face) 542 553 (fontified t) 553 554 (fontified t face font-lock-string-face) 554 561 (fontified t face ((:foreground "white") (:background "#427b58"))) 561 562 (fontified t face font-lock-string-face) 562 564 (fontified t) 564 565 (fontified t rear-nonsticky t) 565 566 (fontified t face font-lock-keyword-face) 566 567 (fontified t face font-lock-keyword-face) 567 568 (fontified t face font-lock-keyword-face) 568 569 (fontified t face font-lock-keyword-face) 569 570 (fontified t face font-lock-keyword-face) 570 571 (fontified t face font-lock-keyword-face) 571 572 (fontified t) 572 573 (fontified t face font-lock-keyword-face) 573 574 (fontified t face font-lock-keyword-face) 574 575 (fontified t face font-lock-keyword-face) 575 576 (fontified t face font-lock-keyword-face) 576 577 (fontified t face font-lock-keyword-face) 577 578 (fontified t) 578 579 (fontified t face font-lock-type-face) 579 580 (fontified t face font-lock-type-face) 580 581 (fontified t face font-lock-type-face) 581 582 (fontified t c-type c-decl-id-start face font-lock-type-face) 582 583 (fontified t) 583 584 (fontified t face font-lock-variable-name-face) 584 585 (fontified t face font-lock-variable-name-face) 585 586 (fontified t face font-lock-variable-name-face) 586 587 (fontified t face font-lock-variable-name-face) 587 588 (fontified t face font-lock-variable-name-face) 588 589 (fontified t face font-lock-variable-name-face) 589 590 (fontified t face font-lock-variable-name-face) 590 591 (fontified t face font-lock-variable-name-face) 591 592 (fontified t face font-lock-variable-name-face) 592 593 (fontified t face font-lock-variable-name-face) 593 594 (fontified t face font-lock-variable-name-face) 594 595 (fontified t) 595 596 (fontified t) 596 597 (fontified t) 597 598 (fontified t) 598 599 (fontified t) 599 600 (fontified t face font-lock-string-face) 600 601 (fontified t face font-lock-string-face) 601 602 (fontified t face font-lock-string-face) 602 603 (fontified t face ((:foreground "white") (:background "#282828"))) 603 604 (fontified t face ((:foreground "white") (:background "#282828"))) 604 605 (fontified t face ((:foreground "white") (:background "#282828"))) 605 606 (fontified t face ((:foreground "white") (:background "#282828"))) 606 607 (fontified t face ((:foreground "white") (:background "#282828"))) 607 608 (fontified t face ((:foreground "white") (:background "#282828"))) 608 609 (fontified t face ((:foreground "white") (:background "#282828"))) 609 610 (fontified t face font-lock-string-face) 610 611 (fontified t face font-lock-string-face) 611 612 (fontified t face font-lock-string-face) 612 613 (fontified t face ((:foreground "black") (:background "#629464"))) 613 614 (fontified t face ((:foreground "black") (:background "#629464"))) 614 615 (fontified t face ((:foreground "black") (:background "#629464"))) 615 616 (fontified t face ((:foreground "black") (:background "#629464"))) 616 617 (fontified t face ((:foreground "black") (:background "#629464"))) 617 618 (fontified t face ((:foreground "black") (:background "#629464"))) 618 619 (fontified t face ((:foreground "black") (:background "#629464"))) 619 620 (rear-nonsticky t fontified t face font-lock-string-face) 620 621 (fontified t face font-lock-string-face) 621 622 (fontified t) 622 623 (fontified t) 623 624 (fontified t face font-lock-keyword-face) 624 625 (fontified t face font-lock-keyword-face) 625 626 (fontified t face font-lock-keyword-face) 626 627 (fontified t face font-lock-keyword-face) 627 628 (fontified t face font-lock-keyword-face) 628 629 (fontified t face font-lock-keyword-face) 629 630 (fontified t) 630 631 (fontified t face font-lock-keyword-face) 631 632 (fontified t face font-lock-keyword-face) 632 633 (fontified t face font-lock-keyword-face) 633 634 (fontified t face font-lock-keyword-face) 634 635 (fontified t face font-lock-keyword-face) 635 636 (fontified t) 636 637 (fontified t face font-lock-type-face) 637 638 (fontified t face font-lock-type-face) 638 639 (fontified t face font-lock-type-face) 639 640 (fontified t c-type c-decl-id-start face font-lock-type-face) 640 641 (fontified t) 641 642 (fontified t face font-lock-variable-name-face) 642 643 (fontified t face font-lock-variable-name-face) 643 644 (fontified t face font-lock-variable-name-face) 644 645 (fontified t face font-lock-variable-name-face) 645 646 (fontified t face font-lock-variable-name-face) 646 647 (fontified t face font-lock-variable-name-face) 647 648 (fontified t face font-lock-variable-name-face) 648 649 (fontified t face font-lock-variable-name-face) 649 650 (fontified t face font-lock-variable-name-face) 650 651 (fontified t face font-lock-variable-name-face) 651 652 (fontified t face font-lock-variable-name-face) 652 653 (fontified t) 653 654 (fontified t) 654 655 (fontified t) 655 656 (fontified t) 656 657 (fontified t) 657 658 (fontified t face font-lock-string-face) 658 659 (fontified t face font-lock-string-face) 659 660 (fontified t face font-lock-string-face) 660 661 (fontified t face ((:foreground "white") (:background "#282828"))) 661 662 (fontified t face ((:foreground "white") (:background "#282828"))) 662 663 (fontified t face ((:foreground "white") (:background "#282828"))) 663 664 (fontified t face ((:foreground "white") (:background "#282828"))) 664 665 (fontified t face ((:foreground "white") (:background "#282828"))) 665 666 (fontified t face ((:foreground "white") (:background "#282828"))) 666 667 (fontified t face ((:foreground "white") (:background "#282828"))) 667 668 (fontified t face font-lock-string-face) 668 669 (fontified t face font-lock-string-face) 669 670 (fontified t face font-lock-string-face) 670 671 (rear-nonsticky t fontified t face font-lock-string-face) 671 677 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 677 678 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e"))) 678 679 (fontified t face font-lock-string-face) 679 680 (fontified t) 680 681 (fontified t) 681 682 (fontified t) 682 683 (fontified t face font-lock-keyword-face) 683 688 (fontified t face font-lock-keyword-face) 688 689 (fontified t) 689 694 (fontified t face font-lock-keyword-face) 694 695 (fontified t) 695 701 (fontified t face font-lock-keyword-face) 701 702 (fontified t) 702 704 (fontified t face font-lock-type-face) 704 705 (fontified t c-type c-decl-id-start face font-lock-type-face) 705 706 (fontified t) 706 710 (fontified t face font-lock-variable-name-face) 710 715 (fontified t) 715 716 (fontified t) 716 717 (fontified t) 717 718 (fontified t c-in-sws t c-is-sws t) 718 719 (fontified t c-is-sws t c-in-sws t face font-lock-comment-delimiter-face) 719 721 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 721 769 (fontified t c-in-sws t face font-lock-comment-face) 769 772 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 772 773 (fontified t c-in-sws t) 773 774 (fontified t c-is-sws t) 774 775 (fontified t c-is-sws t c-type c-not-decl) 775 787 (fontified t) 787 788 (fontified t c-type c-not-decl) 788 790 (fontified t) 790 791 (fontified t face font-lock-string-face) 791 792 (fontified t face font-lock-string-face) 792 793 (fontified t face font-lock-string-face) 793 794 (fontified t face ((:foreground "white") (:background "#282828"))) 794 795 (fontified t face ((:foreground "white") (:background "#282828"))) 795 796 (fontified t face ((:foreground "white") (:background "#282828"))) 796 797 (fontified t face ((:foreground "white") (:background "#282828"))) 797 798 (fontified t face ((:foreground "white") (:background "#282828"))) 798 799 (fontified t face ((:foreground "white") (:background "#282828"))) 799 800 (fontified t face ((:foreground "white") (:background "#282828"))) 800 801 (fontified t face font-lock-string-face) 801 802 (fontified t face font-lock-string-face) 802 803 (fontified t face font-lock-string-face) 803 804 (fontified t face ((:foreground "black") (:background "#629464"))) 804 805 (fontified t face ((:foreground "black") (:background "#629464"))) 805 806 (fontified t face ((:foreground "black") (:background "#629464"))) 806 807 (fontified t face ((:foreground "black") (:background "#629464"))) 807 808 (fontified t face ((:foreground "black") (:background "#629464"))) 808 809 (fontified t face ((:foreground "black") (:background "#629464"))) 809 810 (fontified t face ((:foreground "black") (:background "#629464"))) 810 811 (fontified t face font-lock-string-face) 811 812 (fontified t face font-lock-string-face) 812 815 (fontified t face font-lock-string-face) 815 816 (fontified t) 816 819 (fontified t) 819 858 (fontified t face font-lock-string-face) 858 859 (fontified t) 859 860 (fontified t) 860 861 (fontified t) 861 862 (fontified t) 862 863 (c-is-sws t fontified t c-type c-not-decl) 863 875 (fontified t) 875 876 (fontified t c-type c-not-decl) 876 878 (fontified t) 878 881 (fontified t face font-lock-string-face) 881 888 (fontified t face ((:foreground "white") (:background "#282828"))) 888 891 (fontified t face font-lock-string-face) 891 896 (fontified t face ((:foreground "white") (:background "#b16286"))) 896 898 (fontified t face ((:foreground "white") (:background "#b16286"))) 898 903 (fontified t face font-lock-string-face) 903 907 (fontified t) 907 937 (fontified t face font-lock-string-face) 937 939 (fontified t) 939 940 (fontified t) 940 941 (c-in-sws t fontified t) 941 942 (c-is-sws t fontified t c-type c-not-decl) 942 954 (fontified t) 954 955 (fontified t c-type c-not-decl) 955 957 (fontified t) 957 960 (fontified t face font-lock-string-face) 960 967 (fontified t face ((:foreground "white") (:background "#282828"))) 967 970 (fontified t face font-lock-string-face) 970 977 (fontified t face ((:foreground "white") (:background "#fb4934"))) 977 982 (fontified t face font-lock-string-face) 982 986 (fontified t) 986 1019 (fontified t face font-lock-string-face) 1019 1022 (fontified t) 1022 1023 (c-in-sws t c-is-sws t fontified t) 1023 1024 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 1024 1025 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1025 1041 (c-in-sws t fontified t face font-lock-comment-face) 1041 1048 (c-in-sws t fontified t face ((:foreground "white") (:background "#282828"))) 1048 1051 (c-in-sws t fontified t face font-lock-comment-face) 1051 1058 (c-in-sws t fontified t face ((:foreground "white") (:background "#fb4934"))) 1058 1079 (c-in-sws t fontified t face font-lock-comment-face) 1079 1080 (c-in-sws t fontified t) 1080 1082 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1082 1100 (c-in-sws t fontified t face font-lock-comment-face) 1100 1107 (c-in-sws t fontified t face ((:foreground "white") (:background "#282828"))) 1107 1110 (c-in-sws t fontified t face font-lock-comment-face) 1110 1117 (c-in-sws t fontified t face ((:foreground "white") (:background "#fb4934"))) 1117 1140 (c-in-sws t fontified t face font-lock-comment-face) 1140 1141 (syntax-table (1) c-in-sws t fontified t face font-lock-comment-face) 1141 1157 (c-in-sws t fontified t face font-lock-comment-face) 1157 1158 (syntax-table (1) c-in-sws t fontified t face font-lock-comment-face) 1158 1165 (c-in-sws t fontified t face font-lock-comment-face) 1165 1166 (syntax-table (1) c-in-sws t fontified t face font-lock-comment-face) 1166 1171 (c-in-sws t fontified t face font-lock-comment-face) 1171 1172 (syntax-table (1) c-in-sws t fontified t face font-lock-comment-face) 1172 1175 (c-in-sws t fontified t face font-lock-comment-face) 1175 1176 (fontified t c-in-sws t face font-lock-comment-face) 1176 1177 (fontified t c-is-sws t) 1177 1178 (fontified t c-type c-not-decl) 1178 1187 (fontified t) 1187 1188 (fontified t c-type c-not-decl) 1188 1190 (fontified t) 1190 1193 (fontified t face font-lock-string-face) 1193 1200 (fontified t face ((:foreground "white") (:background "#282828"))) 1200 1203 (fontified t face font-lock-string-face) 1203 1210 (fontified t face ((:foreground "black") (:background "#B8bb26"))) 1210 1219 (fontified t face font-lock-string-face) 1219 1223 (fontified t) 1223 1227 (fontified t face font-lock-constant-face) 1227 1229 (fontified t) 1229 1230 (fontified t) 1230 1231 (c-is-sws t fontified t) 1231 1232 (c-is-sws t fontified t c-type c-not-decl) 1232 1242 (fontified t) 1242 1243 (fontified t c-type c-not-decl) 1243 1245 (fontified t) 1245 1248 (fontified t face font-lock-string-face) 1248 1255 (fontified t face ((:foreground "white") (:background "#282828"))) 1255 1258 (fontified t face font-lock-string-face) 1258 1265 (fontified t face ((:foreground "white") (:background "#45858B"))) 1265 1274 (fontified t face font-lock-string-face) 1274 1278 (fontified t) 1278 1281 (fontified t face font-lock-string-face) 1281 1285 (fontified t) 1285 1286 (fontified t) 1286 1287 (fontified t c-type c-not-decl) 1287 1298 (fontified t) 1298 1299 (fontified t c-type c-not-decl) 1299 1301 (fontified t) 1301 1304 (fontified t face font-lock-string-face) 1304 1311 (fontified t face ((:foreground "white") (:background "#282828"))) 1311 1314 (fontified t face font-lock-string-face) 1314 1321 (fontified t face ((:foreground "black") (:background "#fabd2f"))) 1321 1328 (fontified t face font-lock-string-face) 1328 1332 (fontified t) 1332 1339 (fontified t face font-lock-string-face) 1339 1344 (fontified t) 1344 1345 (fontified t c-type c-not-decl) 1345 1355 (fontified t) 1355 1356 (fontified t c-type c-not-decl) 1356 1358 (fontified t) 1358 1361 (fontified t face font-lock-string-face) 1361 1368 (fontified t face ((:foreground "white") (:background "#282828"))) 1368 1371 (fontified t face font-lock-string-face) 1371 1378 (fontified t face ((:foreground "black") (:background "#fabd2f"))) 1378 1385 (fontified t face font-lock-string-face) 1385 1389 (fontified t) 1389 1396 (fontified t face font-lock-string-face) 1396 1400 (fontified t) 1400 1401 (c-in-sws t c-is-sws t fontified t) 1401 1402 (c-in-sws t c-is-sws t fontified t face font-lock-comment-delimiter-face) 1402 1403 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1403 1417 (c-in-sws t fontified t face font-lock-comment-face) 1417 1418 (c-in-sws t fontified t face font-lock-comment-face) 1418 1419 (c-in-sws t fontified t face font-lock-comment-face) 1419 1422 (c-in-sws t fontified t face font-lock-comment-face) 1422 1429 (c-in-sws t fontified t face ((:foreground "white") (:background "#282828"))) 1429 1432 (c-in-sws t fontified t face font-lock-comment-face) 1432 1439 (c-in-sws t fontified t face ((:foreground "black") (:background "#fabd2f"))) 1439 1461 (c-in-sws t fontified t face font-lock-comment-face) 1461 1462 (c-in-sws t fontified t face font-lock-comment-face) 1462 1463 (c-in-sws t fontified t) 1463 1464 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1464 1465 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1465 1479 (c-in-sws t fontified t face font-lock-comment-face) 1479 1480 (c-in-sws t fontified t face font-lock-comment-face) 1480 1481 (c-in-sws t fontified t face font-lock-comment-face) 1481 1484 (c-in-sws t fontified t face font-lock-comment-face) 1484 1491 (c-in-sws t fontified t face ((:foreground "white") (:background "#282828"))) 1491 1494 (c-in-sws t fontified t face font-lock-comment-face) 1494 1501 (c-in-sws t fontified t face ((:foreground "black") (:background "#fabd2f"))) 1501 1524 (c-in-sws t fontified t face font-lock-comment-face) 1524 1525 (c-in-sws t fontified t) 1525 1527 (c-in-sws t fontified t face font-lock-comment-delimiter-face) 1527 1546 (c-in-sws t fontified t face font-lock-comment-face) 1546 1553 (c-in-sws t fontified t face ((:foreground "white") (:background "#282828"))) 1553 1556 (c-in-sws t fontified t face font-lock-comment-face) 1556 1563 (c-in-sws t fontified t face ((:foreground "white") (:background "#b16286"))) 1563 1586 (c-in-sws t fontified t face font-lock-comment-face) 1586 1587 (c-is-sws t c-in-sws t fontified t) 1587 1588 (c-is-sws t fontified t c-type c-not-decl) 1588 1600 (fontified t) 1600 1601 (fontified t c-type c-not-decl) 1601 1603 (fontified t) 1603 1607 (fontified t face font-lock-string-face) 1607 1609 (fontified t) 1609 1614 (fontified t) 1614 1617 (fontified t face font-lock-string-face) 1617 1651 (fontified t face font-lock-string-face) 1651 1655 (fontified t) 1655 1656 (fontified t) 1656 1657 (fontified t c-type c-not-decl) 1657 1669 (fontified t) 1669 1670 (fontified t c-type c-not-decl) 1670 1672 (fontified t) 1672 1675 (fontified t face font-lock-string-face) 1675 1682 (fontified t face ((:foreground "white") (:background "#282828"))) 1682 1685 (fontified t face font-lock-string-face) 1685 1692 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 1692 1697 (fontified t face font-lock-string-face) 1697 1701 (fontified t) 1701 1735 (fontified t face font-lock-string-face) 1735 1740 (fontified t) 1740 1741 (fontified t c-type c-not-decl) 1741 1753 (fontified t) 1753 1754 (fontified t c-type c-not-decl) 1754 1756 (fontified t) 1756 1759 (fontified t face font-lock-string-face) 1759 1766 (fontified t face ((:foreground "white") (:background "#282828"))) 1766 1769 (fontified t face font-lock-string-face) 1769 1776 (fontified t face ((:foreground "white") (:background "#45858b"))) 1776 1783 (fontified t face font-lock-string-face) 1783 1787 (fontified t) 1787 1825 (fontified t face font-lock-string-face) 1825 1826 (syntax-table (1) fontified t face font-lock-string-face) 1826 1835 (fontified t face font-lock-string-face) 1835 1836 (syntax-table (1) fontified t face font-lock-string-face) 1836 1837 (fontified t face font-lock-string-face) 1837 1841 (fontified t) 1841 1842 (fontified t c-type c-not-decl) 1842 1854 (fontified t) 1854 1855 (fontified t c-type c-not-decl) 1855 1857 (fontified t) 1857 1860 (fontified t face font-lock-string-face) 1860 1861 (fontified t face ((:foreground "white") (:background "#282828"))) 1861 1867 (fontified t face ((:foreground "white") (:background "#282828"))) 1867 1870 (fontified t face font-lock-string-face) 1870 1877 (fontified t face ((:foreground "white") (:background "#d65d0e"))) 1877 1884 (fontified t face font-lock-string-face) 1884 1888 (fontified t) 1888 1895 (fontified t face font-lock-string-face) 1895 1896 (syntax-table (1) fontified t face font-lock-string-face) 1896 1899 (fontified t face font-lock-string-face) 1899 1907 (fontified t face font-lock-string-face) 1907 1908 (syntax-table (1) fontified t face font-lock-string-face) 1908 1909 (fontified t face font-lock-string-face) 1909 1913 (fontified t) 1913 1914 (fontified t) 1914 1915 (fontified t c-type c-not-decl) 1915 1927 (fontified t) 1927 1928 (fontified t c-type c-not-decl) 1928 1930 (fontified t) 1930 1933 (fontified t face font-lock-string-face) 1933 1940 (fontified t face ((:foreground "white") (:background "#282828"))) 1940 1943 (fontified t face font-lock-string-face) 1943 1950 (fontified t face ((:foreground "black") (:background "#689d6a"))) 1950 1958 (fontified t face font-lock-string-face) 1958 1962 (fontified t) 1962 1969 (fontified t face font-lock-string-face) 1969 1970 (syntax-table (1) fontified t face font-lock-string-face) 1970 1975 (fontified t face font-lock-string-face) 1975 1976 (syntax-table (1) fontified t face font-lock-string-face) 1976 1977 (fontified t face font-lock-string-face) 1977 1979 (fontified t) 1979 1980 (fontified t) 1980 1981 (c-is-sws t fontified t) 1981 1983 (fontified t)) #("	{ ram_perc,		\"^b#282828^^c#B8bb26^  %s󰏰 \",			NULL}," 0 1 (c-is-sws t c-in-sws t fontified t) 1 2 (c-is-sws t fontified t c-type c-not-decl) 2 11 (fontified t) 11 12 (fontified t c-type c-not-decl) 12 14 (fontified t) 14 17 (fontified t face font-lock-string-face) 17 24 (fontified t face ((:foreground "white") (:background "#282828"))) 24 27 (fontified t face font-lock-string-face) 27 34 (fontified t face ((:foreground "black") (:background "#B8bb26"))) 34 43 (fontified t face font-lock-string-face) 43 47 (fontified t) 47 51 (fontified t face font-lock-constant-face) 51 53 (fontified t)) #("#dfbf8e" 0 7 (fontified t face ((:foreground "black") (:background "#dfbf8e")))) #("^b#282828^^c#629464^" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face ((:foreground "white") (:background "#282828"))) 3 4 (fontified t face ((:foreground "white") (:background "#282828"))) 4 5 (fontified t face ((:foreground "white") (:background "#282828"))) 5 6 (fontified t face ((:foreground "white") (:background "#282828"))) 6 7 (fontified t face ((:foreground "white") (:background "#282828"))) 7 8 (fontified t face ((:foreground "white") (:background "#282828"))) 8 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 10 (fontified t face font-lock-string-face) 10 11 (fontified t face font-lock-string-face) 11 12 (fontified t face font-lock-string-face) 12 13 (fontified t face ((:foreground "black") (:background "#629464"))) 13 14 (fontified t face ((:foreground "black") (:background "#629464"))) 14 15 (fontified t face ((:foreground "black") (:background "#629464"))) 15 16 (fontified t face ((:foreground "black") (:background "#629464"))) 16 17 (fontified t face ((:foreground "black") (:background "#629464"))) 17 18 (fontified t face ((:foreground "black") (:background "#629464"))) 18 19 (fontified t face ((:foreground "black") (:background "#629464"))) 19 20 (fontified t face font-lock-string-face)) "static const char norm_fg[] = \"#D5C4A1\";
static const char norm_bg[] = \"#1d2021\";
static const char norm_border[] = \"#665c54\";

static const char sel_fg[] = \"#FE8019\";
static const char sel_bg[] = \"#1d2021\";
static const char sel_border[] = \"#fbf1c7\";

static const char urg_fg[] = \"#fbf1c7\";
static const char urg_bg[] = \"#fb4934\";
static const char urg_border[] = \"#fb4934\";

" #("	{ run_command,		\"^b#282828^^c#629464^ %s\",			\"bash ~/.local/bin/music_status_bar.sh\"},
	{ run_command,		\"^b#282828^^c#b16286^ %s\",			\"bash ~/.local/bin/sl-wttr.sh\"},
	{ run_command,		\"^b#282828^^c#fb4934^ %s\",			\"bash ~/.local/bin/cpu_status.sh\"},
	//{ cpu_perc,		\"^b#282828^^c#fb4934^ %.3s󰏰 \",			NULL},
	//{ run_command,	\"^b#282828^^c#fb4934^%s\",			\"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"},
	{ ram_perc,		\"^b#282828^^c#B8bb26^  %s󰏰 \",			NULL},
	{ disk_perc,		\"^b#282828^^c#45858B^ 󰋊 %s󰏰 \",			\"/\" },
	{ wifi_essid,		\"^b#282828^^c#fabd2f^  %s\",			\"wlan0\" },
	{ wifi_perc,		\"^b#282828^^c#fabd2f^ %s󰏰 \",			\"wlan0\" },
	//{ netspeed_rx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ netspeed_tx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ battery_perc,	\"^b#282828^^c#b16286^  %s󰏰 \",			\"BAT1\" },
	{ run_command,		\"%s\",						\"bash ~/.local/bin/battery_status.sh\" },
	{ run_command,		\"^b#282828^^c#dfbf8e^ %s\",			\"bash ~/.local/bin/volume_icon.sh\" },
	{ run_command,		\"^b#282828^^c#45858b^ 󰌌 %s\",			\"setxkbmap -query | grep layout | awk '{print$2}'\"},
	{ run_command,		\"^b#282828^^c#d65d0e^  %s\",			\"date +'%a %d %b %Y'\" },
	{ run_command,		\"^b#282828^^c#689d6a^ 󰥔 %s \",			\"date +'%H:%M'\"},
};" 0 1 (fontified t c-in-sws t face font-lock-comment-face) 1 2 (fontified t c-in-sws t face font-lock-comment-face) 2 14 (fontified t c-in-sws t face font-lock-comment-face) 14 15 (fontified t c-in-sws t face font-lock-comment-face) 15 17 (fontified t c-in-sws t face font-lock-comment-face) 17 20 (fontified t c-in-sws t face font-lock-comment-face) 20 27 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 27 30 (fontified t c-in-sws t face font-lock-comment-face) 30 37 (fontified t c-in-sws t face ((:foreground "black") (:background "#629464"))) 37 42 (fontified t c-in-sws t face font-lock-comment-face) 42 46 (fontified t c-in-sws t face font-lock-comment-face) 46 85 (fontified t c-in-sws t face font-lock-comment-face) 85 89 (fontified t c-in-sws t face font-lock-comment-face) 89 90 (fontified t c-in-sws t face font-lock-comment-face) 90 102 (fontified t c-in-sws t face font-lock-comment-face) 102 103 (fontified t c-in-sws t face font-lock-comment-face) 103 105 (fontified t c-in-sws t face font-lock-comment-face) 105 108 (fontified t c-in-sws t face font-lock-comment-face) 108 115 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 115 118 (fontified t c-in-sws t face font-lock-comment-face) 118 123 (fontified t c-in-sws t face ((:foreground "white") (:background "#b16286"))) 123 125 (fontified t c-in-sws t face ((:foreground "white") (:background "#b16286"))) 125 130 (fontified t c-in-sws t face font-lock-comment-face) 130 134 (fontified t c-in-sws t face font-lock-comment-face) 134 164 (fontified t c-in-sws t face font-lock-comment-face) 164 167 (fontified t c-in-sws t face font-lock-comment-face) 167 168 (fontified t c-in-sws t face font-lock-comment-face) 168 169 (fontified t c-in-sws t face font-lock-comment-face) 169 181 (fontified t c-in-sws t face font-lock-comment-face) 181 182 (fontified t c-in-sws t face font-lock-comment-face) 182 184 (fontified t c-in-sws t face font-lock-comment-face) 184 187 (fontified t c-in-sws t face font-lock-comment-face) 187 194 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 194 197 (fontified t c-in-sws t face font-lock-comment-face) 197 204 (fontified t c-in-sws t face ((:foreground "white") (:background "#fb4934"))) 204 209 (fontified t c-in-sws t face font-lock-comment-face) 209 213 (fontified t c-in-sws t face font-lock-comment-face) 213 246 (fontified t c-in-sws t face font-lock-comment-face) 246 249 (fontified t c-in-sws t face font-lock-comment-face) 249 250 (fontified t c-in-sws t face font-lock-comment-face) 250 251 (fontified t c-in-sws t face font-lock-comment-face) 251 252 (fontified t c-in-sws t face font-lock-comment-face) 252 268 (fontified t c-in-sws t face font-lock-comment-face) 268 275 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 275 278 (fontified t c-in-sws t face font-lock-comment-face) 278 285 (fontified t c-in-sws t face ((:foreground "white") (:background "#fb4934"))) 285 306 (fontified t c-in-sws t face font-lock-comment-face) 306 307 (fontified t c-in-sws t face font-lock-comment-face) 307 309 (fontified t c-in-sws t face font-lock-comment-face) 309 327 (fontified t c-in-sws t face font-lock-comment-face) 327 334 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 334 337 (fontified t c-in-sws t face font-lock-comment-face) 337 344 (fontified t c-in-sws t face ((:foreground "white") (:background "#fb4934"))) 344 367 (fontified t c-in-sws t face font-lock-comment-face) 367 368 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 368 384 (fontified t c-in-sws t face font-lock-comment-face) 384 385 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 385 392 (fontified t c-in-sws t face font-lock-comment-face) 392 393 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 393 398 (fontified t c-in-sws t face font-lock-comment-face) 398 399 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 399 403 (fontified t c-in-sws t face font-lock-comment-face) 403 404 (fontified t c-in-sws t face font-lock-comment-face) 404 405 (fontified t c-in-sws t face font-lock-comment-face) 405 414 (fontified t c-in-sws t face font-lock-comment-face) 414 415 (fontified t c-in-sws t face font-lock-comment-face) 415 417 (fontified t c-in-sws t face font-lock-comment-face) 417 420 (fontified t c-in-sws t face font-lock-comment-face) 420 427 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 427 430 (fontified t c-in-sws t face font-lock-comment-face) 430 437 (fontified t c-in-sws t face ((:foreground "black") (:background "#B8bb26"))) 437 446 (fontified t c-in-sws t face font-lock-comment-face) 446 450 (fontified t c-in-sws t face font-lock-comment-face) 450 454 (fontified t c-in-sws t face font-lock-comment-face) 454 458 (fontified t c-in-sws t face font-lock-comment-face) 458 459 (fontified t c-in-sws t face font-lock-comment-face) 459 469 (fontified t c-in-sws t face font-lock-comment-face) 469 470 (fontified t c-in-sws t face font-lock-comment-face) 470 472 (fontified t c-in-sws t face font-lock-comment-face) 472 475 (fontified t c-in-sws t face font-lock-comment-face) 475 482 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 482 485 (fontified t c-in-sws t face font-lock-comment-face) 485 492 (fontified t c-in-sws t face ((:foreground "white") (:background "#45858B"))) 492 501 (fontified t c-in-sws t face font-lock-comment-face) 501 505 (fontified t c-in-sws t face font-lock-comment-face) 505 508 (fontified t c-in-sws t face font-lock-comment-face) 508 513 (fontified t c-in-sws t face font-lock-comment-face) 513 514 (fontified t c-in-sws t face font-lock-comment-face) 514 525 (fontified t c-in-sws t face font-lock-comment-face) 525 526 (fontified t c-in-sws t face font-lock-comment-face) 526 528 (fontified t c-in-sws t face font-lock-comment-face) 528 531 (fontified t c-in-sws t face font-lock-comment-face) 531 538 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 538 541 (fontified t c-in-sws t face font-lock-comment-face) 541 548 (fontified t c-in-sws t face ((:foreground "black") (:background "#fabd2f"))) 548 555 (fontified t c-in-sws t face font-lock-comment-face) 555 559 (fontified t c-in-sws t face font-lock-comment-face) 559 566 (fontified t c-in-sws t face font-lock-comment-face) 566 571 (fontified t c-in-sws t face font-lock-comment-face) 571 572 (fontified t c-in-sws t face font-lock-comment-face) 572 582 (fontified t c-in-sws t face font-lock-comment-face) 582 583 (fontified t c-in-sws t face font-lock-comment-face) 583 585 (fontified t c-in-sws t face font-lock-comment-face) 585 588 (fontified t c-in-sws t face font-lock-comment-face) 588 595 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 595 598 (fontified t c-in-sws t face font-lock-comment-face) 598 605 (fontified t c-in-sws t face ((:foreground "black") (:background "#fabd2f"))) 605 612 (fontified t c-in-sws t face font-lock-comment-face) 612 616 (fontified t c-in-sws t face font-lock-comment-face) 616 623 (fontified t c-in-sws t face font-lock-comment-face) 623 627 (fontified t c-in-sws t face font-lock-comment-face) 627 628 (fontified t c-in-sws t face font-lock-comment-face) 628 629 (fontified t c-in-sws t face font-lock-comment-face) 629 630 (fontified t c-in-sws t face font-lock-comment-face) 630 649 (fontified t c-in-sws t face font-lock-comment-face) 649 656 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 656 659 (fontified t c-in-sws t face font-lock-comment-face) 659 666 (fontified t c-in-sws t face ((:foreground "black") (:background "#fabd2f"))) 666 689 (fontified t c-in-sws t face font-lock-comment-face) 689 690 (fontified t c-in-sws t face font-lock-comment-face) 690 692 (fontified t c-in-sws t face font-lock-comment-face) 692 711 (fontified t c-in-sws t face font-lock-comment-face) 711 718 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 718 721 (fontified t c-in-sws t face font-lock-comment-face) 721 728 (fontified t c-in-sws t face ((:foreground "black") (:background "#fabd2f"))) 728 751 (fontified t c-in-sws t face font-lock-comment-face) 751 752 (fontified t c-in-sws t face font-lock-comment-face) 752 754 (fontified t c-in-sws t face font-lock-comment-face) 754 773 (fontified t c-in-sws t face font-lock-comment-face) 773 780 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 780 783 (fontified t c-in-sws t face font-lock-comment-face) 783 790 (fontified t c-in-sws t face ((:foreground "white") (:background "#b16286"))) 790 813 (fontified t c-in-sws t face font-lock-comment-face) 813 814 (fontified t c-in-sws t face font-lock-comment-face) 814 815 (fontified t c-in-sws t face font-lock-comment-face) 815 827 (fontified t c-in-sws t face font-lock-comment-face) 827 828 (fontified t c-in-sws t face font-lock-comment-face) 828 830 (fontified t c-in-sws t face font-lock-comment-face) 830 834 (fontified t c-in-sws t face font-lock-comment-face) 834 841 (fontified t c-in-sws t face font-lock-comment-face) 841 878 (fontified t c-in-sws t face font-lock-comment-face) 878 883 (fontified t c-in-sws t face font-lock-comment-face) 883 884 (fontified t c-in-sws t face font-lock-comment-face) 884 896 (fontified t c-in-sws t face font-lock-comment-face) 896 897 (fontified t c-in-sws t face font-lock-comment-face) 897 899 (fontified t c-in-sws t face font-lock-comment-face) 899 902 (fontified t c-in-sws t face font-lock-comment-face) 902 909 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 909 912 (fontified t c-in-sws t face font-lock-comment-face) 912 919 (fontified t c-in-sws t face ((:foreground "black") (:background "#dfbf8e"))) 919 924 (fontified t c-in-sws t face font-lock-comment-face) 924 928 (fontified t c-in-sws t face font-lock-comment-face) 928 962 (fontified t c-in-sws t face font-lock-comment-face) 962 967 (fontified t c-in-sws t face font-lock-comment-face) 967 968 (fontified t c-in-sws t face font-lock-comment-face) 968 980 (fontified t c-in-sws t face font-lock-comment-face) 980 981 (fontified t c-in-sws t face font-lock-comment-face) 981 983 (fontified t c-in-sws t face font-lock-comment-face) 983 986 (fontified t c-in-sws t face font-lock-comment-face) 986 993 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 993 996 (fontified t c-in-sws t face font-lock-comment-face) 996 1003 (fontified t c-in-sws t face ((:foreground "white") (:background "#45858b"))) 1003 1010 (fontified t c-in-sws t face font-lock-comment-face) 1010 1014 (fontified t c-in-sws t face font-lock-comment-face) 1014 1052 (fontified t c-in-sws t face font-lock-comment-face) 1052 1053 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 1053 1062 (fontified t c-in-sws t face font-lock-comment-face) 1062 1063 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 1063 1064 (fontified t c-in-sws t face font-lock-comment-face) 1064 1068 (fontified t c-in-sws t face font-lock-comment-face) 1068 1069 (fontified t c-in-sws t face font-lock-comment-face) 1069 1081 (fontified t c-in-sws t face font-lock-comment-face) 1081 1082 (fontified t c-in-sws t face font-lock-comment-face) 1082 1084 (fontified t c-in-sws t face font-lock-comment-face) 1084 1087 (fontified t c-in-sws t face font-lock-comment-face) 1087 1094 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 1094 1097 (fontified t c-in-sws t face font-lock-comment-face) 1097 1104 (fontified t c-in-sws t face ((:foreground "white") (:background "#d65d0e"))) 1104 1111 (fontified t c-in-sws t face font-lock-comment-face) 1111 1115 (fontified t c-in-sws t face font-lock-comment-face) 1115 1122 (fontified t c-in-sws t face font-lock-comment-face) 1122 1123 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 1123 1134 (fontified t c-in-sws t face font-lock-comment-face) 1134 1135 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 1135 1136 (fontified t c-in-sws t face font-lock-comment-face) 1136 1141 (fontified t c-in-sws t face font-lock-comment-face) 1141 1142 (fontified t c-in-sws t face font-lock-comment-face) 1142 1154 (fontified t c-in-sws t face font-lock-comment-face) 1154 1155 (fontified t c-in-sws t face font-lock-comment-face) 1155 1157 (fontified t c-in-sws t face font-lock-comment-face) 1157 1160 (fontified t c-in-sws t face font-lock-comment-face) 1160 1167 (fontified t c-in-sws t face ((:foreground "white") (:background "#282828"))) 1167 1170 (fontified t c-in-sws t face font-lock-comment-face) 1170 1177 (fontified t c-in-sws t face ((:foreground "black") (:background "#689d6a"))) 1177 1185 (fontified t c-in-sws t face font-lock-comment-face) 1185 1189 (fontified t c-in-sws t face font-lock-comment-face) 1189 1196 (fontified t c-in-sws t face font-lock-comment-face) 1196 1197 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 1197 1202 (fontified t c-in-sws t face font-lock-comment-face) 1202 1203 (syntax-table (1) fontified t c-in-sws t face font-lock-comment-face) 1203 1204 (fontified t c-in-sws t face font-lock-comment-face) 1204 1207 (fontified t c-in-sws t face font-lock-comment-face) 1207 1209 (c-in-sws t fontified t face font-lock-comment-face)) #("#427b58" 0 7 (fontified t face ((:foreground "white") (:background "#427b58")))) #("b#282828^^c#fb4934^" 0 1 (fontified t face font-lock-string-face) 1 8 (fontified t face ((:foreground "white") (:background "#282828"))) 8 11 (fontified t face font-lock-string-face) 11 18 (fontified t face ((:foreground "white") (:background "#fb4934"))) 18 19 (fontified t face font-lock-string-face)) #("
static const struct arg args[] = {
	/* function                     format					argument */
	{ run_command,		\"^b#282828^^c#629464^ %s\",			\"bash ~/.local/bin/music_status_bar.sh\"},
	{ run_command,		\"^b#282828^^c#b16286^ %s\",			\"bash ~/.local/bin/sl-wttr.sh\"},
	{ run_command,		\"^b#282828^^c#fb4934^ %s\",			\"bash ~/.local/bin/cpu_status.sh\"},
	//{ cpu_perc,		\"^b#282828^^c#fb4934^ %.3s󰏰 \",			NULL},
	//{ run_command,	\"^b#282828^^c#fb4934^%s\",			\"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"},
	{ ram_perc,		\"^b#282828^^c#B8bb26^  %s󰏰 \",			NULL},
	{ disk_perc,		\"^b#282828^^c#45858B^ 󰋊 %s󰏰 \",			\"/\" },
	{ wifi_essid,		\"^b#282828^^c#fabd2f^  %s\",			\"wlan0\" },
	{ wifi_perc,		\"^b#282828^^c#fabd2f^ %s󰏰 \",			\"wlan0\" },
	//{ netspeed_rx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ netspeed_tx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ battery_perc,	\"^b#282828^^c#b16286^  %s󰏰 \",			\"BAT1\" },
	{ run_command,		\"%s\",						\"bash ~/.local/bin/battery_status.sh\" },
	{ run_command,		\"^b#282828^^c#dfbf8e^ %s\",			\"bash ~/.local/bin/volume_icon.sh\" },
	{ run_command,		\"^b#282828^^c#45858b^ 󰌌 %s\",			\"setxkbmap -query | grep layout | awk '{print$2}'\"},
	{ run_command,		\"^b#282828^^c#d65d0e^  %s\",			\"date +'%a %d %b %Y'\" },
	{ run_command,		\"^b#282828^^c#689d6a^ 󰥔 %s \",			\"date +'%H:%M'\"},
};
" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 23 (fontified t face font-lock-type-face) 23 24 (fontified t c-type c-decl-id-start face font-lock-type-face) 24 25 (fontified t) 25 29 (fontified t face font-lock-variable-name-face) 29 36 (fontified t) 36 37 (fontified t c-in-sws t c-is-sws t) 37 38 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 38 40 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 40 88 (fontified t c-in-sws t face font-lock-comment-face) 88 91 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 91 92 (fontified t c-in-sws t) 92 93 (fontified t c-is-sws t c-in-sws t) 93 94 (fontified t c-is-sws t c-type c-not-decl) 94 106 (fontified t) 106 107 (fontified t c-type c-not-decl) 107 109 (fontified t) 109 134 (fontified t face font-lock-string-face) 134 138 (fontified t) 138 177 (fontified t face font-lock-string-face) 177 181 (fontified t) 181 182 (fontified t c-type c-not-decl) 182 194 (fontified t) 194 195 (fontified t c-type c-not-decl) 195 197 (fontified t) 197 215 (fontified t face font-lock-string-face) 215 222 (fontified t face font-lock-string-face) 222 226 (fontified t) 226 256 (fontified t face font-lock-string-face) 256 259 (fontified t) 259 260 (fontified t) 260 261 (fontified t c-type c-not-decl) 261 273 (fontified t) 273 274 (fontified t c-type c-not-decl) 274 276 (fontified t) 276 301 (fontified t face font-lock-string-face) 301 305 (fontified t) 305 338 (fontified t face font-lock-string-face) 338 341 (fontified t) 341 342 (fontified t c-in-sws t c-is-sws t) 342 343 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 343 344 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 344 398 (fontified t face font-lock-comment-face c-in-sws t) 398 399 (fontified t c-in-sws t) 399 401 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 401 459 (fontified t face font-lock-comment-face c-in-sws t) 459 460 (syntax-table (1) fontified t face font-lock-comment-face c-in-sws t) 460 476 (fontified t face font-lock-comment-face c-in-sws t) 476 477 (syntax-table (1) fontified t face font-lock-comment-face c-in-sws t) 477 484 (fontified t face font-lock-comment-face c-in-sws t) 484 485 (syntax-table (1) fontified t face font-lock-comment-face c-in-sws t) 485 490 (fontified t face font-lock-comment-face c-in-sws t) 490 491 (syntax-table (1) fontified t face font-lock-comment-face c-in-sws t) 491 495 (fontified t face font-lock-comment-face c-in-sws t) 495 496 (fontified t c-is-sws t c-in-sws t) 496 497 (fontified t c-is-sws t c-type c-not-decl) 497 506 (fontified t) 506 507 (fontified t c-type c-not-decl) 507 509 (fontified t) 509 538 (fontified t face font-lock-string-face) 538 542 (fontified t) 542 546 (fontified t face font-lock-constant-face) 546 550 (fontified t) 550 551 (fontified t c-type c-not-decl) 551 561 (fontified t) 561 562 (fontified t c-type c-not-decl) 562 564 (fontified t) 564 593 (fontified t face font-lock-string-face) 593 597 (fontified t) 597 600 (fontified t face font-lock-string-face) 600 605 (fontified t) 605 606 (fontified t c-type c-not-decl) 606 617 (fontified t) 617 618 (fontified t c-type c-not-decl) 618 620 (fontified t) 620 647 (fontified t face font-lock-string-face) 647 651 (fontified t) 651 658 (fontified t face font-lock-string-face) 658 663 (fontified t) 663 664 (fontified t c-type c-not-decl) 664 674 (fontified t) 674 675 (fontified t c-type c-not-decl) 675 677 (fontified t) 677 704 (fontified t face font-lock-string-face) 704 708 (fontified t) 708 715 (fontified t face font-lock-string-face) 715 719 (fontified t) 719 720 (fontified t c-in-sws t c-is-sws t) 720 721 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 721 722 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 722 781 (fontified t face font-lock-comment-face c-in-sws t) 781 782 (fontified t c-in-sws t) 782 784 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 784 843 (fontified t face font-lock-comment-face c-in-sws t) 843 844 (fontified t c-in-sws t) 844 846 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 846 905 (fontified t face font-lock-comment-face c-in-sws t) 905 906 (fontified t c-is-sws t c-in-sws t) 906 907 (fontified t c-is-sws t c-type c-not-decl) 907 919 (fontified t) 919 920 (fontified t c-type c-not-decl) 920 922 (fontified t) 922 926 (fontified t face font-lock-string-face) 926 933 (fontified t) 933 970 (fontified t face font-lock-string-face) 970 975 (fontified t) 975 976 (fontified t c-type c-not-decl) 976 988 (fontified t) 988 989 (fontified t c-type c-not-decl) 989 991 (fontified t) 991 1016 (fontified t face font-lock-string-face) 1016 1020 (fontified t) 1020 1054 (fontified t face font-lock-string-face) 1054 1059 (fontified t) 1059 1060 (fontified t c-type c-not-decl) 1060 1072 (fontified t) 1072 1073 (fontified t c-type c-not-decl) 1073 1075 (fontified t) 1075 1102 (fontified t face font-lock-string-face) 1102 1106 (fontified t) 1106 1144 (fontified t face font-lock-string-face) 1144 1145 (syntax-table (1) fontified t face font-lock-string-face) 1145 1154 (fontified t face font-lock-string-face) 1154 1155 (syntax-table (1) fontified t face font-lock-string-face) 1155 1156 (fontified t face font-lock-string-face) 1156 1160 (fontified t) 1160 1161 (fontified t c-type c-not-decl) 1161 1173 (fontified t) 1173 1174 (fontified t c-type c-not-decl) 1174 1176 (fontified t) 1176 1203 (fontified t face font-lock-string-face) 1203 1207 (fontified t) 1207 1214 (fontified t face font-lock-string-face) 1214 1215 (syntax-table (1) fontified t face font-lock-string-face) 1215 1226 (fontified t face font-lock-string-face) 1226 1227 (syntax-table (1) fontified t face font-lock-string-face) 1227 1228 (fontified t face font-lock-string-face) 1228 1233 (fontified t) 1233 1234 (fontified t c-type c-not-decl) 1234 1246 (fontified t) 1246 1247 (fontified t c-type c-not-decl) 1247 1249 (fontified t) 1249 1277 (fontified t face font-lock-string-face) 1277 1281 (fontified t) 1281 1288 (fontified t face font-lock-string-face) 1288 1289 (syntax-table (1) fontified t face font-lock-string-face) 1289 1294 (fontified t face font-lock-string-face) 1294 1295 (syntax-table (1) fontified t face font-lock-string-face) 1295 1296 (fontified t face font-lock-string-face) 1296 1302 (fontified t)) " breakpoint()" #("#+END_SRC" 0 9 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line)) #("#+BEGIN_SRC emacs-lisp
" 0 14 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 14 22 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 22 23 (fontified t font-lock-fontified t help-echo nil font-lock-multiline t face org-block-begin-line)) "(customize-variable 'realgud:pdb-command-name)" #("Current directory is /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/" 0 131 (fontified t)) #("    print('O formado do nome informado em abnt fica: ', end='')" 0 4 (fontified t) 4 9 (fontified t face font-lock-builtin-face) 9 10 (fontified t) 10 54 (fontified t face font-lock-string-face) 54 60 (fontified t) 60 62 (fontified t face font-lock-string-face) 62 63 (fontified t)) #("end=''" 0 4 (fontified t) 4 5 (face font-lock-string-face fontified t) 5 6 (face font-lock-string-face rear-nonsticky t fontified t)) #("'O formado do nome informado em abnt fica: ', end=''" 0 1 (face font-lock-string-face fontified t) 1 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 50 (fontified t) 50 51 (face font-lock-string-face fontified t) 51 52 (face font-lock-string-face fontified t)) #("^c#fabd2f^" 0 2 (fontified t face font-lock-string-face) 2 8 (fontified t face font-lock-string-face) 8 9 (fontified t rear-nonsticky t face font-lock-string-face) 9 10 (fontified t face font-lock-string-face)) #("#fabd2f" 0 7 (face font-lock-string-face fontified t)) #("
static const struct arg args[] = {
	/* function                     format					argument */
	{ run_command,		\"^b#282828^^c#629464^ %s\",			\"bash ~/.local/bin/music_status_bar.sh\"},
	{ run_command,		\"^b#282828^^c#b16286^ %s\",			\"bash ~/.local/bin/sl-wttr.sh\"},
	{ run_command,		\"^b#282828^^c#fb4934^ %s\",			\"bash ~/.local/bin/cpu_status.sh\"},
	//{ cpu_perc,		\"^b#282828^^c#fb4934^ %.3s󰏰 \",			NULL},
	//{ run_command,	\"^b#282828^^c#fb4934^%s\",			\"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"},
	{ ram_perc,		\"^b#282828^^c#B8bb26^  %s󰏰 \",			NULL},
	{ disk_perc,		\"^b#282828^^c#45858B^ 󰋊 %s󰏰 \",			\"/\" },
	{ wifi_essid,		\"^b#282828^^c#fabd2f^  %s\",			\"wlan0\" },
	{ wifi_perc,		\"^b#282828^^c#fabd2f^ %s󰏰 \",			\"wlan0\" },
	//{ netspeed_rx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ netspeed_tx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ battery_perc,	\"^b#282828^^c#b16286^  %s󰏰 \",			\"BAT1\" },
	{ run_command,		\"%s\",						\"bash ~/.local/bin/battery_status.sh\" },
	{ run_command,		\"^b#282828^^c#dfbf8e^ %s\",			\"bash ~/.local/bin/volume_icon.sh\" },
	{ run_command,		\"^b#282828^^c#45858b^ 󰌌 %s\",			\"setxkbmap -query | grep layout | awk '{print$2}'\"},
	{ run_command,		\"^b#282828^^c#d65d0e^  %s\",			\"date +'%a %d %b %Y'\" },
	{ run_command,		\"^b#282828^^c#689d6a^ 󰥔 %s \",			\"date +'%H:%M'\"},
};
" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 23 (fontified t face font-lock-type-face) 23 24 (fontified t c-type c-decl-id-start face font-lock-type-face) 24 25 (fontified t) 25 29 (fontified t face font-lock-variable-name-face) 29 36 (fontified t) 36 37 (fontified t c-in-sws t c-is-sws t) 37 38 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 38 40 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 40 88 (fontified t c-in-sws t face font-lock-comment-face) 88 91 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 91 92 (fontified t c-in-sws t) 92 93 (fontified t c-is-sws t c-in-sws t) 93 94 (fontified t c-is-sws t c-type c-not-decl) 94 106 (fontified t) 106 107 (fontified t c-type c-not-decl) 107 109 (fontified t) 109 134 (fontified t face font-lock-string-face) 134 138 (fontified t) 138 177 (fontified t face font-lock-string-face) 177 181 (fontified t) 181 182 (fontified t c-type c-not-decl) 182 194 (fontified t) 194 195 (fontified t c-type c-not-decl) 195 197 (fontified t) 197 215 (fontified t face font-lock-string-face) 215 222 (fontified t face font-lock-string-face) 222 226 (fontified t) 226 256 (fontified t face font-lock-string-face) 256 259 (fontified t) 259 260 (fontified t) 260 261 (fontified t c-type c-not-decl) 261 273 (fontified t) 273 274 (fontified t c-type c-not-decl) 274 276 (fontified t) 276 301 (fontified t face font-lock-string-face) 301 305 (fontified t) 305 338 (fontified t face font-lock-string-face) 338 341 (fontified t) 341 342 (fontified t c-in-sws t c-is-sws t) 342 343 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 343 344 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 344 398 (fontified t face font-lock-comment-face c-in-sws t) 398 399 (fontified t c-in-sws t) 399 401 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 401 459 (fontified t face font-lock-comment-face c-in-sws t) 459 460 (syntax-table (1) fontified t face font-lock-comment-face c-in-sws t) 460 476 (fontified t face font-lock-comment-face c-in-sws t) 476 477 (syntax-table (1) fontified t face font-lock-comment-face c-in-sws t) 477 484 (fontified t face font-lock-comment-face c-in-sws t) 484 485 (syntax-table (1) fontified t face font-lock-comment-face c-in-sws t) 485 490 (fontified t face font-lock-comment-face c-in-sws t) 490 491 (syntax-table (1) fontified t face font-lock-comment-face c-in-sws t) 491 495 (fontified t face font-lock-comment-face c-in-sws t) 495 496 (fontified t c-is-sws t c-in-sws t) 496 497 (fontified t c-is-sws t c-type c-not-decl) 497 506 (fontified t) 506 507 (fontified t c-type c-not-decl) 507 509 (fontified t) 509 538 (fontified t face font-lock-string-face) 538 542 (fontified t) 542 546 (fontified t face font-lock-constant-face) 546 550 (fontified t) 550 551 (fontified t c-type c-not-decl) 551 561 (fontified t) 561 562 (fontified t c-type c-not-decl) 562 564 (fontified t) 564 593 (fontified t face font-lock-string-face) 593 597 (fontified t) 597 600 (fontified t face font-lock-string-face) 600 605 (fontified t) 605 606 (fontified t c-type c-not-decl) 606 617 (fontified t) 617 618 (fontified t c-type c-not-decl) 618 620 (fontified t) 620 647 (fontified t face font-lock-string-face) 647 651 (fontified t) 651 658 (fontified t face font-lock-string-face) 658 663 (fontified t) 663 664 (fontified t c-type c-not-decl) 664 674 (fontified t) 674 675 (fontified t c-type c-not-decl) 675 677 (fontified t) 677 704 (fontified t face font-lock-string-face) 704 708 (fontified t) 708 715 (fontified t face font-lock-string-face) 715 719 (fontified t) 719 720 (fontified t c-in-sws t c-is-sws t) 720 721 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 721 722 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 722 781 (fontified t face font-lock-comment-face c-in-sws t) 781 782 (fontified t c-in-sws t) 782 784 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 784 843 (fontified t face font-lock-comment-face c-in-sws t) 843 844 (fontified t c-in-sws t) 844 846 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 846 905 (fontified t face font-lock-comment-face c-in-sws t) 905 906 (fontified t c-is-sws t c-in-sws t) 906 907 (fontified t c-is-sws t c-type c-not-decl) 907 919 (fontified t) 919 920 (fontified t c-type c-not-decl) 920 922 (fontified t) 922 926 (fontified t face font-lock-string-face) 926 933 (fontified t) 933 970 (fontified t face font-lock-string-face) 970 975 (fontified t) 975 976 (fontified t c-type c-not-decl) 976 988 (fontified t) 988 989 (fontified t c-type c-not-decl) 989 991 (fontified t) 991 1016 (fontified t face font-lock-string-face) 1016 1020 (fontified t) 1020 1054 (fontified t face font-lock-string-face) 1054 1059 (fontified t) 1059 1060 (fontified t c-type c-not-decl) 1060 1072 (fontified t) 1072 1073 (fontified t c-type c-not-decl) 1073 1075 (fontified t) 1075 1102 (fontified t face font-lock-string-face) 1102 1106 (fontified t) 1106 1144 (fontified t face font-lock-string-face) 1144 1145 (syntax-table (1) fontified t face font-lock-string-face) 1145 1154 (fontified t face font-lock-string-face) 1154 1155 (syntax-table (1) fontified t face font-lock-string-face) 1155 1156 (fontified t face font-lock-string-face) 1156 1160 (fontified t) 1160 1161 (fontified t c-type c-not-decl) 1161 1173 (fontified t) 1173 1174 (fontified t c-type c-not-decl) 1174 1176 (fontified t) 1176 1203 (fontified t face font-lock-string-face) 1203 1207 (fontified t) 1207 1214 (fontified t face font-lock-string-face) 1214 1215 (syntax-table (1) fontified t face font-lock-string-face) 1215 1226 (fontified t face font-lock-string-face) 1226 1227 (syntax-table (1) fontified t face font-lock-string-face) 1227 1228 (fontified t face font-lock-string-face) 1228 1233 (fontified t) 1233 1234 (fontified t c-type c-not-decl) 1234 1246 (fontified t) 1246 1247 (fontified t c-type c-not-decl) 1247 1249 (fontified t) 1249 1277 (fontified t face font-lock-string-face) 1277 1281 (fontified t) 1281 1288 (fontified t face font-lock-string-face) 1288 1289 (syntax-table (1) fontified t face font-lock-string-face) 1289 1294 (fontified t face font-lock-string-face) 1294 1295 (syntax-table (1) fontified t face font-lock-string-face) 1295 1296 (fontified t face font-lock-string-face) 1296 1302 (fontified t)) "pdb3\")" #("nomeMeioPosicao = ultimaPosicao+1
                print(nomeCompleto[nomeMeioPosicao].upper()+'. ',  end='')
" 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 8 (fontified t face font-lock-variable-name-face) 8 9 (fontified t face font-lock-variable-name-face) 9 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t face font-lock-variable-name-face) 13 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 33 (fontified t) 33 34 (fontified t) 34 50 (fontified t) 50 55 (fontified t face font-lock-builtin-face) 55 56 (fontified t) 56 69 (fontified t) 69 84 (fontified t) 84 94 (fontified t) 94 98 (fontified t face font-lock-string-face) 98 105 (fontified t) 105 107 (fontified t face font-lock-string-face) 107 108 (rear-nonsticky t fontified t) 108 109 (fontified t)) #("        print(nomeCompleto[nomeMeioPosicao], ' ',  end='')" 0 8 (fontified t) 8 13 (fontified t face font-lock-builtin-face) 13 14 (fontified t) 14 27 (fontified t) 27 42 (fontified t) 42 43 (fontified t) 43 45 (fontified t) 45 48 (fontified t face font-lock-string-face) 48 55 (fontified t) 55 57 (fontified t face font-lock-string-face) 57 58 (fontified t)) #("qtdeEspacos = qtdeEspacos - 1" 0 11 (fontified t face font-lock-variable-name-face) 11 29 (fontified t)) #("print(nomeCompleto[ultimoNomeInicio:].upper(), ' ', end='')" 0 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t) 6 19 (fontified t) 19 36 (fontified t) 36 47 (fontified t) 47 50 (fontified t face font-lock-string-face) 50 56 (fontified t) 56 58 (fontified t face font-lock-string-face) 58 59 (fontified t)) #("nomeCompleto.rfind(' ', ultimaPosicao+1)" 0 19 (fontified t) 19 22 (fontified t face font-lock-string-face) 22 40 (fontified t)) "iwconfig | awk '/wlp5s0/ {print$4}' | sed 's/ESSID://'" #("-font 'Comic code 15' -show drun -icon-theme 'Gruvbox' -show-icons -theme 'gruvbox-dark'" 0 6 (fontified t face font-lock-string-face) 6 7 (syntax-table (1) fontified t face font-lock-string-face) 7 20 (fontified t face font-lock-string-face) 20 21 (syntax-table (1) fontified t face font-lock-string-face) 21 45 (fontified t face font-lock-string-face) 45 46 (syntax-table (1) fontified t face font-lock-string-face) 46 53 (fontified t face font-lock-string-face) 53 54 (syntax-table (1) fontified t face font-lock-string-face) 54 74 (fontified t face font-lock-string-face) 74 75 (syntax-table (1) fontified t face font-lock-string-face) 75 87 (fontified t face font-lock-string-face) 87 88 (syntax-table (1) fontified t face font-lock-string-face)) #("qtdeEspacos = nomeCompleto.count(' ')
ultimaPosicao = -1

if qtdeEspacos == 0:
    print('Nao informado um nome completo')

else:
    print('O nome ', nomeCompleto, ' possui espacos nas posicoes: ', end='')
    while qtdeEspacos != 0:

        posicao = nomeCompleto.find(' ', ultimaPosicao+1)
        ultimaPosicao = posicao
        qtdeEspacos = qtdeEspacos - 1
        print(posicao, ' ',  end='')
print('')
" 0 11 (face font-lock-variable-name-face fontified t) 11 14 (fontified t) 14 33 (fontified t) 33 36 (face font-lock-string-face fontified t) 36 37 (rear-nonsticky t fontified t) 37 38 (fontified t) 38 51 (face font-lock-variable-name-face fontified t) 51 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 60 (face font-lock-keyword-face fontified t) 60 72 (fontified t) 72 79 (fontified t) 79 83 (fontified t) 83 88 (face font-lock-builtin-face fontified t) 88 89 (fontified t) 89 120 (face font-lock-string-face fontified t) 120 121 (face font-lock-string-face fontified t) 121 123 (fontified t) 123 124 (fontified t) 124 128 (face font-lock-keyword-face fontified t) 128 129 (fontified t) 129 130 (fontified t) 130 134 (fontified t) 134 139 (face font-lock-builtin-face fontified t) 139 140 (fontified t) 140 149 (face font-lock-string-face fontified t) 149 151 (fontified t) 151 165 (fontified t) 165 197 (face font-lock-string-face fontified t) 197 199 (fontified t) 199 203 (fontified t) 203 205 (face font-lock-string-face fontified t) 205 206 (fontified t rear-nonsticky t) 206 207 (fontified t) 207 211 (fontified t) 211 216 (face font-lock-keyword-face fontified t) 216 217 (fontified t) 217 235 (fontified t) 235 236 (fontified t) 236 244 (fontified t) 244 251 (fontified t) 251 254 (fontified t) 254 266 (fontified t) 266 272 (fontified t) 272 275 (face font-lock-string-face fontified t) 275 277 (fontified t) 277 292 (fontified t) 292 294 (fontified t) 294 302 (fontified t) 302 315 (fontified t) 315 324 (fontified t) 324 325 (fontified t rear-nonsticky t) 325 326 (fontified t) 326 334 (fontified t) 334 345 (fontified t) 345 348 (fontified t) 348 364 (fontified t) 364 372 (fontified t) 372 377 (face font-lock-builtin-face fontified t) 377 378 (fontified t) 378 387 (fontified t) 387 390 (face font-lock-string-face fontified t) 390 392 (fontified t) 392 393 (fontified t) 393 397 (fontified t) 397 398 (face font-lock-string-face fontified t) 398 399 (face font-lock-string-face fontified t) 399 401 (fontified t) 401 406 (face font-lock-builtin-face fontified t) 406 407 (fontified t) 407 408 (face font-lock-string-face fontified t) 408 409 (face font-lock-string-face fontified t) 409 411 (fontified t)) "Escreva programa que leia um nome completo de uma pessoa e imprima na tela o
último sobrenome com todas as letras maiúsculas, seguido de vı́rgula, seguido do restante
do nome, onde apenas o 1o. nome deve estar por extenso e o restante abreviado.
Ex.: se entrada for ’Armando Luiz Nicolini Delgado’ a saı́da deve ser ’DELGADO, Ar-
mando L. N.’" #("#!/usr/bin/env python3
# coding=utf8
# ----------------------------------------------------------------------------
# Created By  : Anderson José de Souza Inácio
# Created Date: 2024-04-07
# version ='1.0'
# ---------------------------------------------------------------------------
\"\"\" Curso Estatística 2024 UFPR
Disciplina CI182 Fundamentos de Programacao de Computadores
Aula 4 Exercício 11.2 - 1 achaSpc

Escreva programa que leia um nome completo de uma pessoa e imprima na tela
a localização de todos os espaços existentes no nome. Se não houver
espaços, o programa deve indicar isto em uma mensagem conveniente..\"\"\"
# ---------------------------------------------------------------------------
# Import
# ---------------------------------------------------------------------------
# from string import *
# import math
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 23 (face font-lock-comment-face fontified t) 23 25 (face font-lock-comment-delimiter-face fontified t) 25 37 (face font-lock-comment-face fontified t) 37 39 (face font-lock-comment-delimiter-face fontified t) 39 116 (face font-lock-comment-face fontified t) 116 118 (face font-lock-comment-delimiter-face fontified t) 118 162 (face font-lock-comment-face fontified t) 162 164 (face font-lock-comment-delimiter-face fontified t) 164 189 (face font-lock-comment-face fontified t) 189 191 (face font-lock-comment-delimiter-face fontified t) 191 206 (face font-lock-comment-face fontified t) 206 208 (face font-lock-comment-delimiter-face fontified t) 208 284 (face font-lock-comment-face fontified t) 284 286 (face font-lock-doc-face fontified t) 286 287 (face font-lock-doc-face syntax-table (15) fontified t) 287 376 (face font-lock-doc-face fontified t) 376 410 (face font-lock-doc-face fontified t) 410 411 (face font-lock-doc-face fontified t) 411 486 (face font-lock-doc-face fontified t) 486 558 (face font-lock-doc-face fontified t) 558 579 (face font-lock-doc-face fontified t) 579 624 (face font-lock-doc-face fontified t) 624 625 (face font-lock-doc-face fontified t rear-nonsticky t) 625 626 (face font-lock-doc-face fontified t) 626 627 (face font-lock-doc-face fontified t syntax-table (15)) 627 629 (face font-lock-doc-face fontified t) 629 630 (fontified t) 630 632 (face font-lock-comment-delimiter-face fontified t) 632 708 (face font-lock-comment-face fontified t) 708 710 (face font-lock-comment-delimiter-face fontified t) 710 717 (face font-lock-comment-face fontified t) 717 719 (face font-lock-comment-delimiter-face fontified t) 719 795 (face font-lock-comment-face fontified t) 795 797 (face font-lock-comment-delimiter-face fontified t) 797 818 (face font-lock-comment-face fontified t) 818 820 (face font-lock-comment-delimiter-face fontified t) 820 831 (face font-lock-comment-face fontified t) 831 832 (face font-lock-comment-face fontified t rear-nonsticky t)) #(", sep=';'" 0 6 (fontified t) 6 9 (face font-lock-string-face fontified t)) #("[ultimaPosicao+1:]" 0 1 (fontified t) 1 17 (fontified t) 17 18 (fontified t)) #("    contador = 0" 0 4 (fontified t) 4 12 (fontified t) 12 16 (fontified t)) #("    for letra in nomeCompleto:
        print(contador, letra)
        contador = contador + 1" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 14 (fontified t) 14 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 29 (face font-lock-variable-name-face fontified t) 29 31 (fontified t) 31 39 (fontified t) 39 44 (face font-lock-builtin-face fontified t) 44 45 (fontified t) 45 60 (fontified t) 60 62 (fontified t) 62 70 (fontified t) 70 78 (face font-lock-variable-name-face fontified t) 78 93 (fontified t)) #("        ultimaPosicao = posicao" 0 8 (fontified t) 8 21 (face font-lock-variable-name-face fontified t) 21 31 (fontified t)) #("        print('O nome ', nomeCompleto, ' possui espacos nas posicoes: ',
              end='')" 0 8 (fontified t) 8 13 (face font-lock-builtin-face fontified t) 13 14 (fontified t) 14 23 (face font-lock-string-face fontified t) 23 25 (fontified t) 25 39 (fontified t) 39 71 (face font-lock-string-face fontified t) 71 91 (fontified t) 91 93 (face font-lock-string-face fontified t) 93 94 (fontified t)) #("qtdeEspacos = nomeCompleto.count(' ')" 0 11 (face font-lock-variable-name-face fontified t) 11 14 (fontified t) 14 33 (fontified t) 33 36 (face font-lock-string-face fontified t) 36 37 (fontified t)) #("nomeCompleto.count(' ') == 0:" 0 19 (fontified t) 19 22 (face font-lock-string-face fontified t) 22 29 (fontified t)) "Escreva programa que leia um nome completo de uma pessoa e imprima na tela
a localização de todos os espaços existentes no nome. Se não houver espaços, o programa
deve indicar isto em uma mensagem conveniente." "#!/usr/bin/env python3
# coding=utf8
# ----------------------------------------------------------------------------
# Created By  : Anderson José de Souza Inácio
# Created Date: 2024-04-07
# version ='1.0'
# ---------------------------------------------------------------------------
\"\"\" Curso Estatística 2024 UFPR
Disciplina CI182 Fundamentos de Programacao de Computadores
Aula 4 Exercício 10.3 - 1 lanche

Escrever um programa que leia o código de um item pedido, a quantidade do
item e calcule o valor a ser pago por aquele item. Considere que a cada
execução do programa somente será calculado o valor referente a 1 (um)
item. Se um valor inválido de código  for indicado, o programa deve emitir
uma mensagem conveniente e, sem exibir outros resultados, terminar.\"\"\"
# ---------------------------------------------------------------------------
# Import
# ---------------------------------------------------------------------------
# from string import *
# import math
" "deve ser impresso. O número zero é o ultimo número fornecido como dado de entrada.
OBSERVACAO: o zero não deve ser considerado na busca do maior valor." "Fazer um programa que seja capaz de ler números inteiros positivos do te-
clado e de identificar o maior destes números lidos. Ao final, o maior número encontrado" "#!/usr/bin/env python3
# coding=utf8
# ----------------------------------------------------------------------------
# Created By  : Anderson José de Souza Inácio
# Created Date: 2024-04-07
# version ='1.0'
# ---------------------------------------------------------------------------
\"\"\" Curso Estatística 2024 UFPR
Disciplina CI182 Fundamentos de Programacao de Computadores
Aula 4 Exercício 10.3 - 1 lanche

Escrever um programa que leia o código de um item pedido, a quantidade do
item e calcule o valor a ser pago por aquele item. Considere que a cada
execução do programa somente será calculado o valor referente a 1 (um)
item. Se um valor inválido de código  for indicado, o programa deve emitir
uma mensagem conveniente e, sem exibir outros resultados, terminar.\"\"\"
# ---------------------------------------------------------------------------
# Import
# ---------------------------------------------------------------------------
# from string import *
# import math
" #("valorTotal + (" 0 14 (fontified t)) "Complete o programa anterior de forma que seja feito o cálculo do preço do
lanche até que o usuário entre com código de ı́tem 0 (zero), quando então o programa deve
exibir o valor total e terminar." #("valorTotal = 0
pedido = 1

while pedido:
    pedido = input('Informe o codigo do produto: ')

    if not pedido:
        print('Codigo nao informado, saindo...')
        break

    qtde = int(input('Informe a quantidade: '))

    if pedido == 100:
        valorTotal = qtde * 1.2

    elif pedido == 101:
        valorTotal = qtde * 1.3

    elif pedido == 102:
        valorTotal = qtde * 1.5

    elif pedido == 103:
        valorTotal = qtde * 1.2

    elif pedido == 104:
        valorTotal = qtde * 1.3

    elif pedido == 105:
        valorTotal = qtde * 1

    else:
        print('Codigo incorreto')
        break
    print('O valor total e de R$', round(valorTotal, 0))
" 0 10 (face font-lock-variable-name-face fontified t) 10 14 (fontified t) 14 15 (fontified t) 15 21 (face font-lock-variable-name-face fontified t) 21 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 32 (face font-lock-keyword-face fontified t) 32 33 (fontified t) 33 39 (fontified t) 39 41 (fontified t) 41 45 (fontified t) 45 51 (face font-lock-variable-name-face fontified t) 51 54 (fontified t) 54 59 (face font-lock-builtin-face fontified t) 59 60 (fontified t) 60 91 (face font-lock-string-face fontified t) 91 92 (fontified t) 92 93 (fontified t rear-nonsticky t) 93 98 (fontified t) 98 100 (face font-lock-keyword-face fontified t) 100 101 (fontified t) 101 104 (face font-lock-keyword-face fontified t) 104 105 (fontified t) 105 111 (face font-lock-variable-name-face fontified t) 111 113 (fontified t) 113 121 (fontified t) 121 126 (face font-lock-builtin-face fontified t) 126 127 (fontified t) 127 160 (face font-lock-string-face fontified t) 160 161 (fontified t rear-nonsticky t) 161 162 (fontified t) 162 170 (fontified t) 170 174 (face font-lock-keyword-face fontified t) 174 175 (face font-lock-keyword-face fontified t rear-nonsticky t) 175 176 (fontified t) 176 177 (fontified t) 177 181 (fontified t) 181 185 (fontified t) 185 188 (fontified t) 188 191 (face font-lock-builtin-face fontified t) 191 192 (fontified t) 192 197 (face font-lock-builtin-face fontified t) 197 198 (fontified t) 198 222 (face font-lock-string-face fontified t) 222 225 (fontified t) 225 226 (fontified t) 226 230 (fontified t) 230 232 (face font-lock-keyword-face fontified t) 232 233 (fontified t) 233 239 (fontified t) 239 248 (fontified t) 248 256 (fontified t) 256 266 (fontified t) 266 280 (fontified t) 280 281 (fontified t) 281 285 (fontified t) 285 289 (face font-lock-keyword-face fontified t) 289 290 (fontified t) 290 296 (fontified t) 296 305 (fontified t) 305 313 (fontified t) 313 323 (fontified t) 323 337 (fontified t) 337 338 (fontified t) 338 342 (fontified t) 342 346 (face font-lock-keyword-face fontified t) 346 347 (fontified t) 347 353 (fontified t) 353 362 (fontified t) 362 370 (fontified t) 370 380 (fontified t) 380 393 (fontified t) 393 394 (fontified t) 394 395 (fontified t) 395 399 (fontified t) 399 403 (face font-lock-keyword-face fontified t) 403 404 (fontified t) 404 410 (fontified t) 410 419 (fontified t) 419 427 (fontified t) 427 437 (fontified t) 437 450 (fontified t) 450 451 (fontified t) 451 452 (fontified t) 452 456 (fontified t) 456 460 (face font-lock-keyword-face fontified t) 460 461 (fontified t) 461 467 (fontified t) 467 476 (fontified t) 476 484 (fontified t) 484 494 (fontified t) 494 506 (fontified t) 506 507 (fontified t rear-nonsticky t) 507 508 (fontified t) 508 509 (fontified t) 509 513 (fontified t) 513 517 (face font-lock-keyword-face fontified t) 517 518 (fontified t) 518 524 (fontified t) 524 533 (fontified t) 533 541 (fontified t) 541 551 (fontified t) 551 563 (fontified t) 563 564 (fontified t) 564 568 (fontified t) 568 572 (face font-lock-keyword-face fontified t) 572 574 (fontified t) 574 582 (fontified t) 582 587 (face font-lock-builtin-face fontified t) 587 588 (fontified t) 588 606 (face font-lock-string-face fontified t) 606 607 (fontified t rear-nonsticky t) 607 608 (fontified t) 608 616 (fontified t) 616 621 (face font-lock-keyword-face fontified t) 621 622 (fontified t) 622 626 (fontified t) 626 631 (face font-lock-builtin-face fontified t) 631 632 (fontified t) 632 654 (face font-lock-string-face fontified t) 654 655 (face font-lock-string-face fontified t) 655 657 (fontified t) 657 662 (face font-lock-builtin-face fontified t) 662 663 (fontified t) 663 677 (fontified t) 677 678 (fontified t) 678 679 (fontified t)) #("#!/usr/bin/env python3
# coding=utf8
# ----------------------------------------------------------------------------
# Created By  : Anderson José de Souza Inácio
# Created Date: 2024-04-07
# version ='1.0'
# ---------------------------------------------------------------------------
\"\"\" Curso Estatística 2024 UFPR
Disciplina CI182 Fundamentos de Programacao de Computadores
Aula 4 Exercício 10.3 - 1 lanche

Escrever um programa que leia o código de um item pedido, a quantidade do
item e calcule o valor a ser pago por aquele item. Considere que a cada
execução do programa somente será calculado o valor referente a 1 (um)
item. Se um valor inválido de código  for indicado, o programa deve emitir
uma mensagem conveniente e, sem exibir outros resultados, terminar.\"\"\"
# ---------------------------------------------------------------------------
# Import
# ---------------------------------------------------------------------------
# from string import *
# import math
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 23 (face font-lock-comment-face fontified t) 23 25 (face font-lock-comment-delimiter-face fontified t) 25 37 (face font-lock-comment-face fontified t) 37 39 (face font-lock-comment-delimiter-face fontified t) 39 116 (face font-lock-comment-face fontified t) 116 118 (face font-lock-comment-delimiter-face fontified t) 118 162 (face font-lock-comment-face fontified t) 162 164 (face font-lock-comment-delimiter-face fontified t) 164 189 (face font-lock-comment-face fontified t) 189 191 (face font-lock-comment-delimiter-face fontified t) 191 206 (face font-lock-comment-face fontified t) 206 208 (face font-lock-comment-delimiter-face fontified t) 208 284 (face font-lock-comment-face fontified t) 284 286 (face font-lock-doc-face fontified t) 286 287 (face font-lock-doc-face fontified t syntax-table (15)) 287 376 (face font-lock-doc-face fontified t) 376 409 (face font-lock-doc-face fontified t) 409 410 (face font-lock-doc-face fontified t) 410 485 (face font-lock-doc-face fontified t) 485 492 (face font-lock-doc-face fontified t) 492 557 (face font-lock-doc-face fontified t) 557 580 (face font-lock-doc-face fontified t) 580 631 (face font-lock-doc-face fontified t) 631 671 (face font-lock-doc-face fontified t) 671 708 (face font-lock-doc-face fontified t) 708 754 (face font-lock-doc-face fontified t) 754 774 (face font-lock-doc-face fontified t) 774 775 (face font-lock-doc-face fontified t rear-nonsticky t) 775 776 (face font-lock-doc-face fontified t syntax-table (15)) 776 778 (face font-lock-doc-face fontified t) 778 779 (fontified t) 779 781 (face font-lock-comment-delimiter-face fontified t) 781 857 (face font-lock-comment-face fontified t) 857 859 (face font-lock-comment-delimiter-face fontified t) 859 866 (face font-lock-comment-face fontified t) 866 868 (face font-lock-comment-delimiter-face fontified t) 868 944 (face font-lock-comment-face fontified t) 944 946 (face font-lock-comment-delimiter-face fontified t) 946 967 (face font-lock-comment-face fontified t) 967 969 (face font-lock-comment-delimiter-face fontified t) 969 980 (face font-lock-comment-face fontified t) 980 981 (face font-lock-comment-face fontified t rear-nonsticky t))))
(setq search-ring '(#("/" 0 1 (isearch-regexp-function nil isearch-case-fold-search t))))
(setq regexp-search-ring '("updatebars" "togglebar" "setup" "drawbar" "configureno" "sp" "updatege" "indent" "scheme\\[SchemeNorm]\\[ColB" "updatesys" "mai"))
