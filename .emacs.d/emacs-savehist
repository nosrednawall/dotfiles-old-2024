;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(ido-buffer-history minibuffer-history empty-history counsel-M-x-history ivy-history file-name-history swiper-history ido-file-history))
(setq ido-buffer-history '("dwm.c" "config.def.h" "dwmbar-colored"))
(setq minibuffer-history '("/usr/bin/zsh"))
(setq counsel-M-x-history '(#("^ansi" 0 5 (ivy-index 1)) "ansi-term" #("^ggtags" 0 7 (ivy-index 1)) "ggtags-reload" #("^ggta" 0 5 (ivy-index 10)) "ggtags-mode" #("^gg" 0 3 (ivy-index 0)) "ggtags-create-tags" #("^display-loca" 0 13 (ivy-index 0)) "display-local-help" #("^display-fill" 0 13 (ivy-index 0)) "display-fill-column-indicator-mode" #("^html" 0 5 (ivy-index 1)) "html-mode"))
(setq ivy-history '(#("./" 0 2 (ivy-index 0)) #("... (choose a dir)" 0 18 (ivy-index 0)) #("powerline." 0 10 (ivy-index 0)) "powerline.el"))
(setq file-name-history '(#("/home/anderson/git/slstatus/config.def.h" 0 40 (ivy-index 8)) #("/home/anderson/.dotfiles/.local/bin/statusbar/dwmbar-colored" 0 60 (ivy-index 4)) #("/home/anderson/.dwm/config.def.h" 0 32 (ivy-index 10)) #("/home/anderson/.dotfiles/teste.html" 0 35 (ivy-index 0)) #("/home/anderson/.emacs.d/elpa/powerline-2.4/powerline.el" 0 55 (ivy-index 0)) "~/.dotfiles/.emacs.d/init.el" "~/.dotfiles/.emacs.d/myinit.org" "~/.emacs.d/myinit.org" "~/.emacs.d/init.el"))
(setq swiper-history '(#("setup" 0 5 (ivy-index 1)) #(" setup(void)" 0 1 (swiper-line-number 2149 display "2149 ") 1 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t c-type c-decl-arg-start) 7 11 (fontified t face font-lock-type-face) 11 12 (fontified t)) #("drawbar(Mo" 0 10 (ivy-index 1)) #(" drawbar(Monitor *m)" 0 1 (swiper-line-number 996 display "996  ") 1 8 (fontified t face font-lock-function-name-face) 8 9 (fontified t c-type c-decl-arg-start) 9 16 (fontified t face font-lock-type-face) 16 18 (fontified t) 18 19 (fontified t face font-lock-variable-name-face) 19 20 (fontified t)) #("static int bh," 0 14 (ivy-index 0)) #(" static int drawstatusbar(Monitor *m, int bh, char* text);" 0 1 (swiper-line-number 196 display "196  ") 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 10 (fontified t face font-lock-type-face) 10 11 (fontified t c-type c-decl-id-start face font-lock-type-face) 11 12 (fontified t) 12 25 (fontified t face font-lock-function-name-face) 25 26 (fontified t c-type c-decl-arg-start) 26 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 36 (fontified t face font-lock-variable-name-face) 36 37 (fontified t c-type c-decl-arg-start) 37 38 (fontified t) 38 41 (fontified t face font-lock-type-face) 41 42 (fontified t) 42 44 (fontified t face font-lock-variable-name-face) 44 45 (fontified t c-type c-decl-arg-start) 45 46 (fontified t) 46 50 (fontified t face font-lock-type-face) 50 52 (fontified t) 52 56 (fontified t face font-lock-variable-name-face) 56 58 (fontified t)) #(" " 0 1 (ivy-index 3)) #(" ** Environment e Fonte padrão" 0 1 (swiper-line-number 4 display "4   ") 1 2 (fontified t face (:foreground "#282828") keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle)))) 2 3 (fontified t composition (1 1 [9675]) keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) face org-level-2) 3 4 (fontified t keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) face org-level-2) 4 30 (fontified t face org-level-2))))
(setq ido-file-history '("statusbar.sh" "." "main.cpp" "init.el"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq kill-ring '("+	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[3]} },
+	{ MODKEY,                       XK_o,      setlayout,      {.v = &layouts[4]} }," "+	{ \"TTT\",      bstack },
+	{ \"===\",      bstackhoriz }," "netatom[NetWMIcon] = XInternAtom(dpy, \"_NET_WM_ICON\", False);" "+			drw_text(drw, x, 0, w, bh, lrpad / 2 + (m->sel->icon ? m->sel->icw + ICONSPACING : 0), m->sel->name, 0);
+			if (m->sel->icon) drw_pic(drw, x + lrpad / 2, (bh - m->sel->ich) / 2, m->sel->icw, m->sel->ich, m->sel->icon);" "NetWMIcon" "+#define ICONSIZE 16   /* icon size */
+#define ICONSPACING 5 /* space between icon and title */" #("" 0 1 (fontified t face font-lock-comment-face)) "\\uE0B0" "u'\\uE0A2'" "" #("\\" 0 2 (face font-lock-string-face fontified t)) #("" 0 1 (face font-lock-string-face fontified t)) "#!/usr/bin/bash

while true :; do

	ARROW_A=$'\\x1b[0m\\x1b[38;2;104;122;196m\\x1b[0m\\x1b[48;2;104;122;196m'
	ARROW_B=$'\\x1b[38;2;113;151;231m\\x1b[0m\\x1b[48;2;113;151;231m'
	ARROW_C=$'\\x1b[38;2;104;122;196m\\x1b[0m\\x1b[48;2;104;122;196m'

	status=\"${ARROW_A} ${ARROW_B}  $(uptime -p) ${ARROW_C} : $(acpi | awk '{print $4}' | sed s/,//) ${ARROW_B}  $(date '+%Y-%m-%d %H:%M') ${ARROW_C} $(free -h | awk '/^Mem:/ {print \":\" $3 \"/\" $2}') ${ARROW_B} 摒 $(curl -s wttr.in/\"Tampa,Florida?format=3\") ${ARROW_C}\"
	xsetroot -name \"$status\"
	echo \"$status\"

	sleep 60

done" #("+static int bh, plw, blw = 0; /* bar geometry */" 0 1 (fontified t face diff-indicator-added) 1 48 (fontified t face diff-added)) #(" SchemeTitle, SchemeTitleSel" 0 1 (fontified t) 1 12 (fontified t face font-lock-variable-name-face) 12 13 (fontified t c-type c-decl-id-start) 13 14 (fontified t) 14 28 (fontified t face font-lock-variable-name-face)) #("+enum { SchemeNorm, SchemeSel, SchemeTitle, SchemeTitleSel }; /* color schemes */" 0 1 (fontified t face diff-indicator-added) 1 81 (fontified t face diff-added)) #("
}
" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) ";; tags for code navigation
(use-package ggtags
:ensure t
:config
(add-hook 'c-mode-common-hook
(lambda ()
(when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
(ggtags-mode 1))))
)" ";; snippets and snippet expansion
(use-package yasnippet
:ensure t
:init
(yas-global-mode 1))" "(use-package auto-complete
:ensure t
:init
(progn
(ac-config-default)
(global-auto-complete-mode t)
))" #(" (defun elpy-mode-tweaks ()
	;; Enable Flycheck
	(flycheck-mode 1))
" 0 2 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 2 7 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 7 8 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 8 24 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 24 29 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 29 32 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 32 48 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 48 68 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("(add-hook 'python-mode-hook 'elpy-mode-tweaks)" 0 46 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) "(setq web-mode-engines-alist
      '((\"php\"    . \"\\\\.phtml\\\\'\")
        (\"blade\"  . \"\\\\.blade\\\\.\"))
)" "(add-to-list 'auto-mode-alist '(\"\\\\.html?\\\\'\" . web-mode))" "(require 'web-mode)
(add-to-list 'auto-mode-alist '(\"\\\\.phtml\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.tpl\\\\.php\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.[agj]sp\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.as[cp]x\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.erb\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.mustache\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.djhtml\\\\'\" . web-mode))" "(add-to-list 'auto-mode-alist '(\"\\\\.g\\\\'\" . gnuplot-mode))
" " /home/anderson/.emacs.d/elpa/powerline-2.4/powerline.e" #("(use-package projectile
  :ensure t)" 0 1 (fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 23 (face font-lock-constant-face fontified t) 23 26 (fontified t) 26 33 (face font-lock-builtin-face fontified t) 33 36 (fontified t)) "  (use-package dashboard
    :ensure t
    :init
    (setq dashboard-items '((recents . 15)
			    (projects . 5))
	  dashboard-banner-logo-title \"Hello!\"
	  dashboard-startup-banner 'logo
	  dashboard-set-file-icons t
	  dashboard-heading-icons t
	  dashboard-set-init-info nil
	  dashboard-center-content t)
    :config
    (dashboard-setup-startup-hook))
  (provide 'dashboard-config)"))
(setq search-ring 'nil)
(setq regexp-search-ring '("setup" "drawbar(Mo" "\\(static\\).*?\\(int\\).*?\\(bh,\\)"))
