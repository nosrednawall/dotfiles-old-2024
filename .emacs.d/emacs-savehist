;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(query-replace-history realgud:pdb-minibuffer-history gud-pdb-history coding-system-history string-rectangle-history read-expression-history command-history ess--completing-hist counsel-locate-history sql-product-history sql-server-history sql-database-history sql-user-history read-char-history counsel-git-history transient--history read-number-history compile-history shell-command-history magit-git-command-history magit-revision-history extended-command-history ido-file-history minibuffer-history empty-history read-from-kill-ring-history ivy-history counsel-M-x-history swiper-history ido-buffer-history file-name-history))
(setq query-replace-history '("#ebdbb2" "#dfbf8e" "#89B482" #("#427b58" 0 6 (face ((:foreground "white") (:background "#427b58"))) 6 7 (face ((:foreground "white") (:background "#427b58")) rear-nonsticky t)) "abcde" "$"))
(setq realgud:pdb-minibuffer-history '("python3 -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py" "python3 -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py" "python3 -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py" "python3 -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py" "python -m pdb /home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py"))
(setq gud-pdb-history '("prnabnt.py" "python -m pdb3" "python -m pdb" "python -m pdb prnabnt.py" "python -m pdb "))
(setq coding-system-history '(#("utf-8" 0 5 (ivy-index 16 idx 1033)) #("raw-text-unix" 0 13 (ivy-index 263 idx 1057)) #("iso-8859-6-unix" 0 15 (ivy-index 3 idx 19)) #("latin-1-unix" 0 12 (ivy-index 260 idx 1044)) #("unix" 0 4 (ivy-index 265 idx 1064)) #("iso-8859-6" 0 10 (ivy-index 17 idx 16)) #("prefer-utf-8" 0 12 (ivy-index 20 idx 1058)) #("utf-8-dos" 0 9 (ivy-index 18 idx 1035)) #("utf-8-unix" 0 10 (ivy-index 19 idx 1036)) #("georgian-academy" 0 16 (ivy-index 1 idx 0)) #("nil" 0 3 (ivy-index 0)) #("utf-8-auto" 0 10 (ivy-index 7 idx 1025))))
(setq command-history '((rainbow-mode 'toggle) (term "/usr/bin/zsh") (replace-string "#dfbf8e" "#ebdbb2" nil 5033 5040 nil nil) (shell nil) (kill-buffer "*shell*") (replace-string #("#427b58" 0 6 (face ((:foreground "white") (:background "#427b58"))) 6 7 (face ((:foreground "white") (:background "#427b58")) rear-nonsticky t)) "#89B482" nil nil nil nil nil) (map-query-replace-regexp "$" "abcde" nil nil nil nil) (realgud:pdb) (realgud:pdb-customize) (pdb-reset) (kill-buffer "*gud*") (package-install 'realgud nil) (pdb "prnabnt.py") (kill-buffer "*Python*") (cd "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/") (kill-buffer "slstatus.c") (pdb "python -m pdb3") (pdb "python -m pdb") (pdb "python -m pdb prnabnt.py") (pdb "python -m pdb ") (kill-buffer "*terminal*") (kill-buffer "emacs.org") (kill-buffer "slstatus") (kill-buffer "config.def.h") (kill-buffer "config.def.h<slstatus>") (kill-buffer "blocks.def.h") (kill-buffer "rofi_network") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/prnabnt.py") (tetris-end-game) (tetris) (kill-buffer "snake-scores") (snake) (snake-start-game) (pong-quit) (pong) (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_11/achaSpc.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_10/achamaior.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_10/lancheria.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_10/lanche.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_09/contapal.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_09/juntatxt.py") (kill-buffer "*scratch*") (kill-buffer "*EGLOT (UFPR_Estatistica/(python-mode)) events*") (ess-show-call-stack) (scroll-down nil) (magit-reset-hard "HEAD") (magit-reset) (magit-reset-mixed "main") (magit-revert-no-commit "main" '("--edit")) (magit-revert) (kill-buffer "prova_001.r") (kill-buffer "dwm.c") (package-delete #s(package-desc edwina (20221206 1610) "Dynamic window manager" ((emacs (25))) nil nil "/home/anderson/.emacs.d/elpa/edwina-20221206.1610" ((:url . "https://gitlab.com/ajgrf/edwina") (:keywords "convenience") (:maintainer "Alex Griffin" . "a@ajgrf.com") (:maintainers ("Alex Griffin" . "a@ajgrf.com")) (:authors ("Alex Griffin" . "a@ajgrf.com")) (:commit . "f95c31b1de95df7e83338a5d4daf3363df325862")) nil) nil nil) (find-file "~/.emacs.d/emacs.org" t) (find-file "/home/anderson/.dotfiles/.emacs.d/emacs.org") (find-file "/home/anderson/.emacs.d/init.el") (recover-session) (execute-extended-command nil "recover-session" "recover-sess") (set-clipboard-coding-system 'utf-8) (set-clipboard-coding-system 'raw-text-unix) (set-clipboard-coding-system 'iso-8859-6-unix) (set-clipboard-coding-system 'latin-1-unix) (set-clipboard-coding-system 'unix) (set-clipboard-coding-system 'iso-8859-6) (set-clipboard-coding-system 'prefer-utf-8) (set-clipboard-coding-system 'utf-8-dos) (set-clipboard-coding-system 'utf-8-unix) (set-clipboard-coding-system 'georgian-academy) (set-clipboard-coding-system nil) (set-clipboard-coding-system 'utf-8-auto) (electric-indent-mode 'toggle) (neotree-create-node "/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-corrige") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/poluicao.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/abnt.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/percdna.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/copel.py") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/Aula_07/003_loja.py") (xclip-mode 'toggle) (package-install 'xclip nil) (simpleclip-mode 'toggle) (simpleclip-paste) (package-install 'simpleclip nil) (set-language-environment "Brazilian Portuguese") (kill-buffer "NotasAula.pdf") (string-rectangle 2806 5317 "") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/Scripts_R/Analise_Exploratoria_com_R.r") (neotree-create-node "/home/anderson/.dotfiles/.local/bin/brilho_tela_diminui") (neotree-create-node "/home/anderson/.dotfiles/.local/bin/brilho_tela_aumenta") (kill-buffer "config.h") (jupyter-org-kill-block-and-results) (jupyter-org-hydra/body) (jupyter-run-repl "python3" nil t nil t) (jupyter-repl-mode) (jupyter-load-file "/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/014_Python_Data_science/Projeto+inicial+-+Python+para+DS.ipynb") (ein:stop t "http://127.0.0.1:8888") (ein:run "/usr/bin/jupyter" "/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/014_Python_Data_science/" nil #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil) (ein:stop t nil) (ein:notebook-open "http://127.0.0.1:8888" "Projeto_Python_Data_Science.ipynb") (ein:ipynb-mode) (ein:run "/usr/bin/jupyter" "/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/013_Python_Ciencia_Dados/" nil #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil) (ein:run "/usr/bin/jupyter-execute" "/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/013_Python_Ciencia_Dados/" nil #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil) (ein:login "http://127.0.0.1:8888" #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil nil nil) (ein:jupyter-server-stop t nil) (ein:login "http://127.0.0.1:0" #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil nil nil) (ein:login "http://127.0.0.1" #[514 "\300!\207" [pop-to-buffer] 4 "

(fn BUFFER URL-OR-PORT)"] nil nil nil) (package-install 'eink-theme nil) (package-install 'ein nil) (kill-buffer "100-graficos-tabelas-uni.R") (neotree-create-node "/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/Scripts_R/exercicio_medidas_posicao_dispersao.r") (projectile-switch-project nil) (project-switch-project "~/git/Educacional/Programa_Desenvolve_Boticario/") (project-switch-project "~/git/Educacional/UFPR_Estatistica/")))
(setq sql-product-history '(#("ansi" 0 4 (ivy-index 0))))
(setq sql-server-history '("172.17.0.2" "172.17.0.4" "172.17.0.3" "172.17.0.1"))
(setq sql-database-history '(#("alura" 0 5 (ivy-index 0)) #("postgres" 0 8 (ivy-index 0)) #("anderson" 0 8 (ivy-index 0))))
(setq sql-user-history '("postgres" "root"))
(setq read-number-history '("5432" "1"))
(setq compile-history '("make -k "))
(setq shell-command-history '("/usr/bin/zsh" "/usr/bin/bash"))
(setq magit-revision-history '(#("HEAD" 0 4 (ivy-index 3)) #("main" 0 4 (ivy-index 1)) #("5ad9048" 0 7 (ivy-index 0)) #("9e4e37a8e58c4c2695feeb6ce1223b8849c5f7f7" 0 40 (ivy-index 0)) #("e5b577f5f6a6135f1566bf97f4a4c1a2ea06af15" 0 40 (ivy-index 0)) #("origin/main" 0 11 (ivy-index 0)) #("1a51c1d" 0 7 (ivy-index 0)) #("ola mundo" 0 9 (ivy-index 0))))
(setq extended-command-history '("recover-session" "package-install"))
(setq ido-file-history '("." "prnabnt.py" "achaSpc.py" "achamaior.py" "lancheria.py" "test_while.py" "lanche.py" "contapal.py" "juntatxt.py" nil "emacs.org" "init.el" "dmenu-corrige" "poluicao.py" "abnt.py" "percdna.py" "copel.py" "003_loja.py" "Analise_Exploratoria_com_R.r" "brilho_tela_diminui" "brilho_tela_aumenta" "Projeto+inicial+-+Python+para+DS.ipynb" "exercicio_medidas_posicao_dispersao.r" "query_mariadb.sql" "somaMultiplos.py" "calculadora.py" "teste.sql" "onibus.py" "credito.py" "pesoideal.py" "achemaior.py" "medias.py" "multiplos.py" "notas.py" "calcnota.py" "py" "ultimoStr.py" "primaStr.py" "juntaStr.py" "compStr.py" "tamStr.py" "sl-wttr.sh" "sl-wttr.sh~" "degraus.py" "distpontos.py" "eq2graus.py" "volesFera.py" "calculos.py" "escada.py" "capitulo_02_resumo_dados.r" "sxhkdrc" "dmenu-bitwarden" "teste.ini" "config.ini" "teste" "eqSistCramer.py" "eqSist.py" "eqGrau1.py" "convKm.py" "mediaPond.py" "convFarenheit.py" "segundo2horas.py" "idadeDias2anos.py" "idadeAnos2dias.py" "media.py" "calcula_sistemas.py" "equacao_segundo_grau.py" "media_aritimetica.py" "media_aritimetica_3_valores.py" "soma_dois_numeros.py" "calcula_raiz_de_3_numeros.py" "aula004_usando_funcoes.sql" "aula003_sub_consultas.sql" "dmenu-teclados" "aula001.sql" "myinit.org" "tabela_funcionarios.sql" "tabela_aluno.sql" "README.md" "dunstrc" "cpu_status.sh" "music_status_bar.sh" "volume_icon.sh" "battery_status.sh" "advinha_mais.html" "estrelas.html" "media_idades_familiares.html" "media_idades_familiares.hml" "tabuada.html" "ano_copa.html" "jogo_advinha.html" "futebol.html" "imc.html" "programa.html" "texto_puro.html" "primeiro_teste.html"))
(setq minibuffer-history '("CE301_Estatistica_Basica/Exercicios/Prova_01_em_R/prova_001.r" ".emacs.d/emacs.org" ".local/bin/rofi_network" ".dwm/config.def.h" ".local/bin/dmenu/dmenu-monitor" ".dwm/autostart.sh" ".dwm/config.h" "jupyter-execute" "jupyter notebook" "/home/anderson/.local/bin/jupyter lab" "~/.local/bin/jupyter lab" "jupyter lab" "python3 -m jupyter lab" "jupyter" ".Xresources" "~/.dotfiles/" "djklsklsdsdnj" "dashboard" "/usr/bin/zsh" "select * from curso;" "select * from cursos;" "/usr/bin/bash"))
(setq ivy-history '(#("con" 0 3 (ivy-index 0)) "config.h" #("realgud" 0 7 (ivy-index 11)) #("prnabnt.py" 0 10 (ivy-index 0)) #("pr" 0 2 (ivy-index 0)) #("edwina-20221206.1610" 0 20 (ivy-index 1)) #("xclip" 0 5 (ivy-index 0)) #("simpleclip" 0 10 (ivy-index 1)) #("Brazilian Portuguese" 0 20 (idx 22 ivy-index 22)) #("config." 0 7 (ivy-index 0)) "config.def.h" #("CE301_Estatistica_Basica/" 0 25 (ivy-index 3)) #("/home/anderson/git/Educacional/UFPR_Estatistica/" 0 48 (ivy-index 2)) #("Python 3 (ipykernel)" 0 20 (ivy-index 0)) #("python3" 0 7 (idx 0 ivy-index 0)) #("http://127.0.0.1:8888/Projeto_Python_Data_Science.ipynb" 0 55 (ivy-index 0)) #("8888" 0 4 (ivy-index 0)) #("0" 0 1 (ivy-index 0)) #("eink-theme" 0 10 (ivy-index 4)) #("ein" 0 3 (ivy-index 5)) #("CE301_Estatistica_Basica/Scripts_R/" 0 35 (ivy-index 8)) #("005_Logica_Programacao_Javascript/Logica/jogo_advinha.html" 0 58 (ivy-index 34)) #("~/git/Educacional/Programa_Desenvolve_Boticario/" 0 48 (ivy-index 1)) #("CE300_Estatistica_e_Sociedade/Seminario_001/Impacto_Vacina_Tdap_em_gravidas.pdf" 0 79 (ivy-index 1)) #("~/git/Educacional/UFPR_Estatistica/" 0 35 (ivy-index 2)) #("... (choose a dir)" 0 18 (ivy-index 3)) #("~/.dotfiles/" 0 12 (ivy-index 1)) #("./" 0 2 (ivy-index 0)) #("compilation-disable-input" 0 25 (ivy-index 4)) #("tree-sitter-ispell" 0 18 (ivy-index 1)) #("tree-sitter-langs" 0 17 (ivy-index 0)) #("tree-sitter" 0 11 (ivy-index 4)) #("rainbow-mode" 0 12 (ivy-index 0)) #("101-medidas-uni.R" 0 17 (ivy-index 4)) #("origin" 0 6 (ivy-index 0)) #("master" 0 6 (ivy-index 0)) #("pdf-tools" 0 9 (ivy-index 0)) #("~/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/" 0 79 (ivy-index 0)) #("dape" 0 4 (ivy-index 0)) #("elpy" 0 4 (ivy-index 1)) #("nyan-mode" 0 9 (ivy-index 0)) #("flycheck" 0 8 (ivy-index 64)) #("emacsql-psql" 0 12 (ivy-index 13)) #("index.html" 0 10 (ivy-index 0)) #("myterminal-controls" 0 19 (ivy-index 10)) #("electric-indent-mode" 0 20 (ivy-index 14)) #("indent-guide" 0 12 (ivy-index 0)) #("web-mode-indent-style" 0 21 (ivy-index 0))))
(setq counsel-M-x-history '(#("^rainb" 0 6 (ivy-index 0)) "rainbow-mode" #("^rain" 0 5 (ivy-index 0)) #("^rainbo" 0 7 (ivy-index 0)) #("^term" 0 5 (ivy-index 0)) "term" #("^" 0 1 (ivy-index 2)) "replace-string" #("^shell" 0 6 (ivy-index 0)) "shell" #("^map" 0 4 (ivy-index 0)) "map-query-replace-regexp" #("^repla" 0 6 (ivy-index 1)) "realgud:pdb" #("^realgud:pd" 0 11 (ivy-index 3)) "realgud:pdb-customize" #("^pd" 0 3 (ivy-index 1)) "pdb-reset" #("^re" 0 3 (ivy-index 0)) #("^realgu" 0 7 (ivy-index 2)) #("^pack" 0 5 (ivy-index 0)) "package-install" #("^pdb" 0 4 (ivy-index 0)) "pdb" #("^cd" 0 3 (ivy-index 0)) "cd" #("^ter" 0 4 (ivy-index 0)) #("^proje" 0 6 (ivy-index 2)) "projectile-mode-menu" #("^tetr" 0 5 (ivy-index 1)) "tetris-end-game" "tetris" "snake" #("^snake" 0 6 (ivy-index 9)) "snake-start-game" #("^sna" 0 4 (ivy-index 0)) #("^pon" 0 4 (ivy-index 1)) "pong-quit" "pong" #("^package-inst" 0 13 (ivy-index 0)) #("^ess-" 0 5 (ivy-index 109)) "ess-show-call-stack" #("^scroll-down" 0 12 (ivy-index 0)) "scroll-down" #("^magit-re" 0 9 (ivy-index 0)) "magit-reset" #("^magit" 0 6 (ivy-index 22)) "magit-revert" #("^package" 0 8 (ivy-index 0)) "package-delete" "set-clipboard-coding-system" #("^set-cli" 0 8 (ivy-index 0)) #("^ele" 0 4 (ivy-index 3)) "electric-indent-mode" #("^xcl" 0 4 (ivy-index 0)) "xclip-mode" #("^xc" 0 3 (ivy-index 0)) #("^package-ins" 0 12 (ivy-index 0)) #("^simpl" 0 6 (ivy-index 0)) "simpleclip-mode" "simpleclip-paste" "set-language-environment" #("^set-la" 0 7 (ivy-index 0)) #("^jupyter-" 0 9 (ivy-index 57)) "jupyter-org-kill-block-and-results" #("^jupyter" 0 8 (ivy-index 11)) "jupyter-org-hydra/body" "jupyter-run-repl" "jupyter-repl-mode" #("^jupyter-re" 0 11 (ivy-index 0)) "jupyter-load-file" #("^jupyter-run" 0 12 (ivy-index 0)) "ein:stop" "ein:run" #("^ein" 0 4 (ivy-index 4)) "ein:ipynb-mode" "ein:login" "ein:jupyter-server-stop" #("^ein:l" 0 6 (ivy-index 0)) #("^package-install" 0 16 (ivy-index 0)) #("^projectile" 0 11 (ivy-index 0)) "projectile-switch-project" #("^projectile-s" 0 13 (ivy-index 1)) #("^packa" 0 6 (ivy-index 0)) #("^projectile-mo" 0 14 (ivy-index 1)) #("^projectile-co" 0 14 (ivy-index 2)) "projectile-configure-project" #("^projectile-" 0 12 (ivy-index 0)) "projectile-skel-dir-locals" #("^sql-maria" 0 10 (ivy-index 0)) "sql-mariadb" "sql-postgres" #("^sql-pos" 0 8 (ivy-index 0)) #("^sql-mari" 0 9 (ivy-index 0)) #("^python-mode" 0 12 (ivy-index 0)) "python-mode" #("^python" 0 7 (ivy-index 0)) #("^eglo" 0 5 (ivy-index 0)) "eglot" #("packa" 0 5 (ivy-index 0)) #("^magit-" 0 7 (ivy-index 24)) "magit-status" #("^pdf-view" 0 9 (ivy-index 0)) "pdf-view-mode" #("^pdf-vi" 0 7 (ivy-index 0)) #("^pdf-t" 0 6 (ivy-index 6)) "pdf-tools-enable-minor-modes" #("^try" 0 4 (ivy-index 0)) "try" #("^r" 0 2 (ivy-index 1)) "R" #("^R" 0 2 (ivy-index 1)) "R-mode" #("^dape" 0 5 (ivy-index 0)) "dape-continue" #("^elpy-mo" 0 8 (ivy-index 1)) "elpy-mode" #("^elpy-ena" 0 9 (ivy-index 0)) "elpy-enable" #("^elpy-dis" 0 9 (ivy-index 0)) "elpy-disable" #("^elpy" 0 5 (ivy-index 0)) #("^elpy-shell-send" 0 16 (ivy-index 2)) "elpy-shell-send-file" "elpy-shell-send-buffer" "elpy-shell-send-statement-and-step" #("^elpy-con" 0 9 (ivy-index 0)) "elpy-config" #("^elpy-s" 0 7 (ivy-index 11)) "elpy-shell-send-defun-and-go" #("^run-p" 0 6 (ivy-index 1)) "run-python" #("^sql-post" 0 9 (ivy-index 0)) #("^unta" 0 5 (ivy-index 0)) "untabify" #("^elpy-mode" 0 10 (ivy-index 0)) #("^elpy-mod" 0 9 (ivy-index 1)) #("^auto-com" 0 9 (ivy-index 2)) "auto-complete-mode" #("^auto" 0 5 (ivy-index 3)) "auto-complete" #("^elpy-c" 0 7 (ivy-index 1)) #("^elpy-conf" 0 10 (ivy-index 0)) #("^elpy-confi" 0 11 (ivy-index 0)) #("^nyan" 0 5 (ivy-index 4)) "nyan-start-animation" "nyan-start-music" "nyan-mode" "nyan-scroll-buffer" #("^nya" 0 4 (ivy-index 1)) "nyan-toggle-wavy-trail" #("nyan-" 0 5 (ivy-index 7)) #("^spaceline-toggle-n" 0 19 (ivy-index 1)) "spaceline-toggle-nyan-cat-on" "spaceline-toggle-nyan-cat" "elpy-autopep8-fix-code" #("^elpy-menu" 0 10 (ivy-index 0)) "elpy-menu" #("^elpy-" 0 6 (ivy-index 16)) "elpy-check" #("^elpy-config" 0 12 (ivy-index 0)) #("^elpy-en" 0 8 (ivy-index 0)) #("^pyve" 0 5 (ivy-index 5)) "pyvenv-workon" #("^pyvenv" 0 7 (ivy-index 6)) "pyvenv-activate" #("^elpy-rpc" 0 9 (ivy-index 1)) "elpy-rpc-restart" #("^elpy-rp" 0 8 (ivy-index 1)) #("^ansi" 0 5 (ivy-index 1)) "ansi-term" #("^python-mo" 0 10 (ivy-index 0)) #("^sql" 0 4 (ivy-index 1)) #("^conf-mo" 0 8 (ivy-index 0)) "conf-mode" #("linu" 0 4 (ivy-index 0)) "linum-mode" #("^sql-hel" 0 8 (ivy-index 0)) "sql-help" #("^sql-set" 0 8 (ivy-index 1)) "sql-set-sqli-buffer" "sql-set-product" #("^sql-mode" 0 9 (ivy-index 0)) "sql-mode" #("^markdown-pre" 0 13 (ivy-index 0)) "markdown-preview-cleanup" #("^markdown-previ" 0 15 (ivy-index 1)) "markdown-preview" "markdown-preview-mode" "markdown-preview-open-browser" #("^markdown-vi" 0 12 (ivy-index 0)) "markdown-view-mode" #("^markdown-v" 0 11 (ivy-index 0)) #("^markdown-p" 0 11 (ivy-index 0)) #("^markdown-mode" 0 14 (ivy-index 2)) "markdown-mode" #("^markdo" 0 7 (ivy-index 2)) #("^ra" 0 3 (ivy-index 1)) #("^conf-mod" 0 9 (ivy-index 0)) #("^myter" 0 6 (ivy-index 1)) "myterminal-controls-open-controls" #("^magit-rebase" 0 13 (ivy-index 2)) "magit-rebase" #("^magit-log-current" 0 18 (ivy-index 0)) "magit-log-current" #("^magit-log --g" 0 14 (ivy-index 0)) "magit-log:--grep" #("^magit-lo" 0 9 (ivy-index 1)) "magit-log:-G" #("^magit-log" 0 10 (ivy-index 8)) "magit-log" #("^centaur-tabs-mode" 0 18 (ivy-index 0)) "centaur-tabs-mode" #("^centaur-tabs-g" 0 15 (ivy-index 0)) "centaur-tabs-group-buffer-groups" #("^magit-merge" 0 12 (ivy-index 3)) "magit-merge" #("^magit-status" 0 13 (ivy-index 2)) #("^ansi-" 0 6 (ivy-index 1)) #("^conf-mode" 0 10 (ivy-index 0)) #("^magit-stat" 0 11 (ivy-index 2)) #("^ansi-te" 0 8 (ivy-index 0)) #("^java" 0 5 (ivy-index 1)) "javascript-mode" #("^customize-va" 0 13 (ivy-index 0)) "customize-variable" #("^indent-gui" 0 11 (ivy-index 0)) "indent-guide-mode" #("^package-lis" 0 12 (ivy-index 0)) "package-list-packages" #("^web-mode" 0 9 (ivy-index 82)) "web-mode" #("ansi" 0 4 (ivy-index 2)) #("^cua" 0 4 (ivy-index 5)) "cua-toggle-rectangle-mark" "cua-paste" "cua-paste-pop" "cua-cut-region" #("^cua-sc" 0 7 (ivy-index 1)) "cua-scroll-down" #("^cua-s" 0 6 (ivy-index 2)) "cua-selection-mode"))
(setq swiper-history '(#("updatebars" 0 10 (ivy-index 3)) #(" updatebars(void)" 0 1 (display "2467 " swiper-line-number 2467) 1 11 (face font-lock-function-name-face fontified t) 11 12 (c-type c-decl-arg-start fontified t) 12 16 (face font-lock-type-face fontified t) 16 17 (fontified t)) #("togglebar" 0 9 (ivy-index 1)) #(" togglebar(const Arg *arg)" 0 1 (display "2300 " swiper-line-number 2300) 1 10 (face font-lock-function-name-face fontified t) 10 11 (c-type c-decl-arg-start fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 17 (fontified t) 17 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 25 (face font-lock-variable-name-face fontified t) 25 26 (fontified t)) #("setup" 0 5 (ivy-index 1)) #(" setup(void)" 0 1 (display "2094 " swiper-line-number 2094) 1 6 (face font-lock-function-name-face fontified t) 6 7 (c-type c-decl-arg-start fontified t) 7 11 (face font-lock-type-face fontified t) 11 12 (fontified t)) #("drawbar" 0 7 (ivy-index 2)) #(" drawbar(Monitor *m)" 0 1 (display "1005 " swiper-line-number 1005) 1 8 (face font-lock-function-name-face fontified t) 8 9 (c-type c-decl-arg-start fontified t) 9 16 (face font-lock-type-face fontified t) 16 18 (fontified t) 18 19 (face font-lock-variable-name-face fontified t) 19 20 (fontified t)) #("configureno" 0 11 (ivy-index 3)) #(" configurenotify(XEvent *e)" 0 1 (swiper-line-number 687 display "687  ") 1 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t c-type c-decl-arg-start) 17 23 (fontified t face font-lock-type-face) 23 25 (fontified t) 25 26 (fontified t face font-lock-variable-name-face) 26 27 (fontified t)) #("sp" 0 2 (ivy-index 0)) #("  * whenever a new event has been fetched. This allows event dispatching" 0 1 (swiper-line-number 10 display "10   ") 1 72 (fontified t face font-lock-comment-face c-in-sws t)) #("updatege" 0 8 (ivy-index 4)) #(" updategeom(void)" 0 1 (swiper-line-number 2511 display "2511 ") 1 11 (fontified t face font-lock-function-name-face) 11 12 (fontified t c-type c-decl-arg-start) 12 16 (fontified t face font-lock-type-face) 16 17 (fontified t)) "indent" #("indent" 0 6 (ivy-index 16)) #("   indent-guide                   20160630       available    melpa-stable show vertical lines to guide indentation" 0 1 (swiper-line-number 1665 display "1665 ") 1 3 (tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 3 15 (button (t) category default-button face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package tabulated-list-column-name "Package" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 15 16 (tabulated-list-column-name "Package" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 16 34 (display (space :align-to 33) tabulated-list-column-name "Package" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 34 42 (font-lock-face package-status-available help-echo #("Version: 20160630" 9 17 (font-lock-face package-status-available)) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 42 43 (tabulated-list-column-name "Version" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 43 49 (display (space :align-to 48) tabulated-list-column-name "Version" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 49 58 (font-lock-face package-status-available help-echo #("Status: available" 8 17 (font-lock-face package-status-available)) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 58 59 (tabulated-list-column-name "Status" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 59 62 (display (space :align-to 61) tabulated-list-column-name "Status" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 62 69 (font-lock-face package-status-available help-echo #("Archive: melpa-stable" 9 21 (font-lock-face package-status-available)) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 69 74 (font-lock-face package-status-available display "…" help-echo #("Archive: melpa-stable" 9 21 (font-lock-face package-status-available)) tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 74 75 (tabulated-list-column-name "Archive" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))]) 75 115 (font-lock-face package-description help-echo #("Description: show vertical lines to guide indentation" 13 53 (font-lock-face package-description)) tabulated-list-column-name "Description" tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))])) "scheme[SchemeNorm][ColBg" #("scheme[SchemeNorm][ColB" 0 23 (ivy-index 8)) #(" 	XSetForeground(dpy, drw->gc, scheme[SchemeNorm][ColBg].pixel);" 0 1 (swiper-line-number 2761 display "2761 ") 1 2 (fontified t c-is-sws t) 2 3 (c-is-sws t fontified t) 3 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (fontified t rear-nonsticky t)) #("updatesys" 0 9 (ivy-index 18)) #(" updatesystray(void)" 0 1 (swiper-line-number 2700 display "2700 ") 1 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t c-type c-decl-arg-start) 15 19 (fontified t face font-lock-type-face) 19 20 (fontified t)) #("mai" 0 3 (ivy-index 0)) #(" main(int argc, char *argv[])" 0 1 (swiper-line-number 814 display "814 ") 1 5 (fontified t face font-lock-function-name-face) 5 6 (fontified t c-type c-decl-arg-start) 6 9 (fontified t face font-lock-type-face) 9 10 (fontified t) 10 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t c-type c-decl-arg-start) 15 16 (fontified t) 16 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-variable-name-face) 26 29 (fontified t))))
(setq ido-buffer-history '("*shell*" "*gud*" "*Python*" "slstatus.c" "*terminal*" "emacs.org" "slstatus" "config.def.h" "config.def.h<slstatus>" "blocks.def.h" "rofi_network" "snake-scores" "*scratch*" "*EGLOT (UFPR_Estatistica/(python-mode)) events*" "prova_001.r" "dwm.c" "NotasAula.pdf" "config.h" "100-graficos-tabelas-uni.R" "*SQL: MariaDB*" "achemaior.py" "sl-wttr.sh" "dmenu-docker-images" "dmenu-power" "dmenu-atalhos-programas" "equacao_segundo_grau.py" "media_aritimetica_3_valores.py" "calcula_raiz_de_3_numeros.py" "teste.py" "*Elpy Config*" "*Customize Option: Python Flymake Command*" "if_monitor.sh" "*ansi-term*" "dmenu-teclados" "tabela_funcionarios.sql" "aula001.sql" "banco-inicial.sql" "*SQL: Postgres*" "dmenu-docker-compose.sh" "HELLO" "index.theme" "icon-theme.cache" "]" "action-unavailable-symbolic.svg" "autostart.sh" "dmenu-window" "battery_status.sh" "init.el" "dunstrc" "*Compile-Log*" "picom.conf" "index.html" "config.mk" "Untitled<2>" "Untitled<3>" "Untitled" "myinit.org" "config" "muta_microfone" "config.def.h<.dwm>" "block-battery" "dwmbar-powerline" "diminui_volume" "muta_volume" "*Messages*" "*Async-native-compile-log*" "*Warnings*" "magit-process: .dotfiles" "magit: .dotfiles" "volume_icon.sh" "app.js" "x.c" "x.c.rej" "config.def.h.rej" "config.def.h<st>"))
(setq file-name-history '(#("/home/anderson/.dwm/autostart_blocking.sh" 0 41 (ivy-index 1)) #("/home/anderson/.Xresources" 0 26 (ivy-index 0)) #("/home/anderson/.dotfiles/.config/dwmblocks/blocks.def.h" 0 55 (ivy-index 7)) #("/home/anderson/.dotfiles/.config/slstatus/" 0 42 (ivy-index 0)) "~/.emacs.d/emacs.org" "/home/anderson/.dotfiles/.emacs.d/emacs.org" "/home/anderson/.emacs.d/init.el" #("/home/anderson/.dotfiles/" 0 25 (ivy-index 0)) #("/home/anderson/.xinitrc" 0 23 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/" 0 91 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/exercicios/teste_while.py" 0 116 (ivy-index 0)) #("/home/anderson/.emacs.d/emacs.org" 0 33 (ivy-index 3)) #("/home/anderson/.emacs.d/projects" 0 32 (ivy-index 19)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/013_Python_Ciencia_Dados/Projeto_Python_Data_Science.ipynb" 0 119 (ivy-index 2)) #("/home/anderson/git/Educacional/UFPR_Estatistica/SobreviventesTitanic.r" 0 70 (ivy-index 0)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/007_PostgreSQL/" 0 76 (ivy-index 9)) #("/home/anderson/git;Edu" 0 22 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/histograma_em_r.r" 0 90 (ivy-index 0)) "~/git/Educacional/Programa_Desenvolve_Boticario/012_PowerBI_Tratamento_Dados/power_query_dump.sql" "~/git/win10vm/win10.xml" #("/home/anderson/.dwm/autostart.sh" 0 32 (ivy-index 0)) #("/home/anderson/.config/slstatus/" 0 32 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/100-graficos-tabelas-uni.R" 0 99 (ivy-index 14)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/Livro_Estatitica_Basica/testes.r" 0 105 (ivy-index 0)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/" 0 73 (ivy-index 4)) #("/var/spool/cron/crontabs/anderson" 0 33 (ivy-index 0)) #("/var/spool/cron/crontabs/" 0 25 (ivy-index 2)) "/tmp/crontab.uSJaXd/crontab" "/tmp/crontab.vtEVge/crontab" "/home/anderson/.dotfiles/.local/bin/sl-wttr.sh~" #("/home/anderson/git/Educacional/UFPR_Estatistica/CE301_Estatistica_Basica/101-medidas-uni.R" 0 90 (ivy-index 0)) #("/home/anderson/.dwm/config.def.h" 0 32 (ivy-index 0)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/008_Postgres_views_funcoes_consultas/dados-aula-2.sql" 0 114 (ivy-index 5)) #("/home/anderson/git/Educacional/UFPR_Estatistica/CI182_Fundamentos_Programacao_Computadores/calcula_raiz_de_3_numeros.py" 0 119 (ivy-index 0)) #("/home/anderson/.dotfiles/.config/slstatus/config.def.h" 0 54 (ivy-index 0)) #("/home/anderson/.local/bin/battery_status.sh" 0 43 (ivy-index 1)) #("/home/anderson/teste.py" 0 23 (ivy-index 0)) #("/home/anderson/.dotfiles/.local/bin/dmenu/" 0 42 (ivy-index 2)) #("/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-docker-lista-funcionando" 0 72 (ivy-index 0)) #("/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-atalhos-programas" 0 65 (ivy-index 0)) #("/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-docker-images" 0 61 (ivy-index 4)) #("/home/anderson/dmenu-docker-compose.sh" 0 38 (ivy-index 2)) #("/home/anderson/.dotfiles/.dwm/config.def.h" 0 42 (ivy-index 0)) "/home/anderson/.emacs.d/myinit.org" #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/007_PostgreSQL/tabela_funcionarios.sql" 0 99 (ivy-index 9)) "/home/anderson/.dotfiles/.config/dunst/dunstrc" #("/home/anderson/.local/bin/volume_icon.sh" 0 40 (ivy-index 6)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/index.html" 0 102 (ivy-index 7)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/app.js" 0 98 (ivy-index 3)) #("/home/anderson/.config/picom.conf" 0 33 (ivy-index 3)) #("/home/anderson/.dotfiles/.dwm/" 0 30 (ivy-index 0)) #("/home/anderson/.dotfiles/.Xresources" 0 36 (ivy-index 0)) #("/home/anderson/.config/st/config.def.h" 0 38 (ivy-index 0)) "~/.dotfiles/.emacs.d/init.el"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq kill-ring '(#("#B8bb26" 0 7 (fontified t face ((:foreground "black") (:background "#B8bb26")) c-in-sws t)) #(" ^b#282828^^c#fb4934^" 0 3 (fontified t face font-lock-string-face) 3 4 (syntax-table (3) fontified t face ((:foreground "white") (:background "#282828"))) 4 10 (fontified t face ((:foreground "white") (:background "#282828"))) 10 13 (fontified t face font-lock-string-face) 13 14 (syntax-table (3) fontified t face ((:foreground "white") (:background "#fb4934"))) 14 20 (fontified t face ((:foreground "white") (:background "#fb4934"))) 20 21 (fontified t face font-lock-string-face)) "󰃞" "brilho=$(brightnessctl | awk '/%/ {print$4}' | cut -c 2-4 | sed 's/%//' | sed 's/)//')" "/home/anderson/Área de trabalho/pdf_do_alex.pdf" #("brilho=$(brightnessctl | awk '/%/ {print$4}' | cut -c 2-4 | sed 's/%//' | sed 's/)//')" 0 6 (fontified t face font-lock-variable-name-face) 6 9 (fontified t) 9 29 (fontified t face sh-quoted-exec) 29 44 (fontified t face sh-quoted-exec) 44 58 (fontified t face sh-quoted-exec) 58 64 (fontified t face sh-quoted-exec) 64 70 (fontified t face sh-quoted-exec) 70 71 (fontified t rear-nonsticky t face sh-quoted-exec) 71 72 (fontified t face sh-quoted-exec) 72 78 (fontified t face sh-quoted-exec) 78 81 (fontified t face sh-quoted-exec) 81 84 (fontified t face font-lock-string-face) 84 85 (fontified t rear-nonsticky t face font-lock-string-face) 85 86 (fontified t)) " | sed 's/)//'" #("brilho=$(brightnessctl | awk '/%/ {print$4}' | cut -c 2-4 | sed 's/%//')" 0 6 (fontified t face font-lock-variable-name-face) 6 9 (fontified t) 9 29 (fontified t face sh-quoted-exec) 29 44 (fontified t face sh-quoted-exec) 44 58 (fontified t face sh-quoted-exec) 58 64 (fontified t face sh-quoted-exec) 64 70 (fontified t face sh-quoted-exec) 70 71 (fontified t rear-nonsticky t face sh-quoted-exec) 71 72 (fontified t)) "| sed 's/%//'" "brightnessctl | awk '/%/ {print$4}' | cut -c 2-3" "\"($brilho*100/$maximo_brilho.0)\" | bc" #("maximo_brilho=$(brightnessctl m)
brilho=$(brightnessctl g)
brilho_perc=$(expr ($brilho / $maximo_brilho) \\* 100)
" 0 13 (fontified t face font-lock-variable-name-face) 13 16 (fontified t) 16 31 (fontified t face sh-quoted-exec) 31 33 (fontified t) 33 39 (fontified t face font-lock-variable-name-face) 39 42 (fontified t) 42 57 (fontified t face sh-quoted-exec) 57 59 (fontified t) 59 70 (fontified t face font-lock-variable-name-face) 70 73 (fontified t) 73 90 (fontified t face sh-quoted-exec) 90 103 (fontified t face sh-quoted-exec) 103 105 (fontified t) 105 107 (fontified t face font-lock-string-face) 107 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t)) #("brightnessctl g" 0 15 (fontified t face sh-quoted-exec)) #(" | cut -c 1-10" 0 3 (fontified t face sh-quoted-exec) 3 14 (fontified t face sh-quoted-exec)) "cut -c 1-35 " #("
static const struct arg args[] = {
	/* function                     format						argument */
	{ run_command,		\"^b#282828^^c#89B482^%s \",				\"bash ~/.local/bin/music_status_bar.sh\"},
	//	{ run_command,		\"^b#282828^^c#89B482^%s \",				\"bash ~/.local/bin/sl-wttr.sh\"},
	{ run_command,		\"^b#282828^^c#89B482^%s \",				\"bash ~/.local/bin/cpu_status.sh\"},
	//{ cpu_perc,		\"^b#282828^^c#89B482^ ^b#282828^^c#ebdbb2^%s󰏰 \",	NULL},
	//{ run_command,	\"^b#282828^^c#89B482^%s\",				\"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"},
	{ ram_perc,		\"^b#282828^^c#B8bb26^ ^b#282828^^c#ebdbb2^%s󰏰 \",	NULL},
	{ disk_perc,		\"^b#282828^^c#45858B^󰋊 ^b#282828^^c#ebdbb2^%s󰏰 \",	\"/\" },
	{ wifi_essid,		\"^b#282828^^c#fabd2f^ ^b#282828^^c#ebdbb2^%s\",	\"wlan0\" },
	{ wifi_perc,		\"^b#282828^^c#ebdbb2^%s󰏰 \",				\"wlan0\" },
	//{ netspeed_rx,	\"^b#282828^^c#fabd2f^  ^b#282828^^c#ebdbb2^%s\",	\"wlan0\" },
	//{ netspeed_tx,	\"^b#282828^^c#fabd2f^  ^b#282828^^c#ebdbb2^%s\",	\"wlan0\" },
	//{ battery_perc,	\"^b#282828^^c#b16286^  ^b#282828^^c#ebdbb2^%s󰏰 \",	\"BAT1\" },
	{ run_command,		\"%s\",							\"bash ~/.local/bin/battery_status.sh\" },
	{ run_command,		\"^b#282828^^c#89B482^%s \",				\"bash ~/.local/bin/volume_icon.sh\" },
	{ run_command,		\"^b#282828^^c#89B482^󰌌 ^b#282828^^c#ebdbb2^%s \",	\"setxkbmap -query | grep layout | awk '{print$2}'\"},
	{ run_command,		\"^b#282828^^c#89B482^ ^b#282828^^c#ebdbb2^%s \",	\"date +'%a %d %b %Y'\" },
	{ run_command,		\"^b#282828^^c#89B482^󰥔 ^b#282828^^c#ebdbb2^%s \",	\"date +'%H:%M'\"},
};
" 0 1 (fontified t c-is-sws t) 1 2 (fontified t c-is-sws t face font-lock-keyword-face) 2 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 23 (fontified t face font-lock-type-face) 23 24 (fontified t c-type c-decl-id-start face font-lock-type-face) 24 25 (fontified t) 25 29 (fontified t face font-lock-variable-name-face) 29 36 (fontified t) 36 37 (fontified t c-in-sws t c-is-sws t) 37 38 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 38 40 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 40 89 (fontified t c-in-sws t face font-lock-comment-face) 89 92 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 92 93 (fontified t c-in-sws t) 93 94 (fontified t c-is-sws t c-in-sws t) 94 95 (fontified t c-is-sws t c-type c-not-decl) 95 107 (fontified t) 107 108 (fontified t c-type c-not-decl) 108 110 (fontified t) 110 135 (fontified t face font-lock-string-face) 135 140 (fontified t) 140 179 (fontified t face font-lock-string-face) 179 182 (fontified t) 182 183 (fontified t c-in-sws t c-is-sws t) 183 184 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 184 186 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 186 265 (fontified t c-in-sws t face font-lock-comment-face) 265 266 (fontified t c-is-sws t c-in-sws t) 266 267 (fontified t c-is-sws t c-type c-not-decl) 267 279 (fontified t) 279 280 (fontified t c-type c-not-decl) 280 282 (fontified t) 282 307 (fontified t face font-lock-string-face) 307 312 (fontified t) 312 345 (fontified t face font-lock-string-face) 345 348 (fontified t) 348 349 (fontified t c-in-sws t c-is-sws t) 349 350 (fontified t c-in-sws t c-is-sws t face font-lock-comment-delimiter-face) 350 351 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 351 421 (fontified t c-in-sws t face font-lock-comment-face) 421 422 (fontified t c-in-sws t) 422 424 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 424 483 (fontified t c-in-sws t face font-lock-comment-face) 483 484 (fontified t c-in-sws t face font-lock-comment-face) 484 500 (fontified t c-in-sws t face font-lock-comment-face) 500 501 (fontified t c-in-sws t face font-lock-comment-face) 501 508 (fontified t c-in-sws t face font-lock-comment-face) 508 509 (fontified t c-in-sws t face font-lock-comment-face) 509 514 (fontified t c-in-sws t face font-lock-comment-face) 514 515 (fontified t c-in-sws t face font-lock-comment-face) 515 519 (fontified t c-in-sws t face font-lock-comment-face) 519 520 (fontified t c-is-sws t c-in-sws t) 520 521 (fontified t c-is-sws t c-type c-not-decl) 521 530 (fontified t) 530 531 (fontified t c-type c-not-decl) 531 533 (fontified t) 533 581 (fontified t face font-lock-string-face) 581 583 (fontified t) 583 587 (fontified t face font-lock-constant-face) 587 591 (fontified t) 591 592 (fontified t c-type c-not-decl) 592 602 (fontified t) 602 603 (fontified t c-type c-not-decl) 603 605 (fontified t) 605 653 (fontified t face font-lock-string-face) 653 655 (fontified t) 655 658 (fontified t face font-lock-string-face) 658 663 (fontified t) 663 664 (fontified t c-type c-not-decl) 664 675 (fontified t) 675 676 (fontified t c-type c-not-decl) 676 678 (fontified t) 678 724 (fontified t face font-lock-string-face) 724 726 (fontified t) 726 733 (fontified t face font-lock-string-face) 733 738 (fontified t) 738 739 (fontified t c-type c-not-decl) 739 749 (fontified t) 749 750 (fontified t c-type c-not-decl) 750 752 (fontified t) 752 778 (fontified t face font-lock-string-face) 778 779 (fontified t) 779 783 (fontified t) 783 790 (fontified t face font-lock-string-face) 790 794 (fontified t) 794 795 (fontified t c-in-sws t c-is-sws t) 795 796 (fontified t face font-lock-comment-delimiter-face c-in-sws t c-is-sws t) 796 797 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 797 872 (fontified t face font-lock-comment-face c-in-sws t) 872 873 (fontified t c-in-sws t) 873 875 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 875 950 (fontified t face font-lock-comment-face c-in-sws t) 950 951 (fontified t c-in-sws t) 951 953 (fontified t face font-lock-comment-delimiter-face c-in-sws t) 953 1030 (fontified t face font-lock-comment-face c-in-sws t) 1030 1031 (fontified t c-is-sws t c-in-sws t) 1031 1032 (fontified t c-is-sws t c-type c-not-decl) 1032 1044 (fontified t) 1044 1045 (fontified t c-type c-not-decl) 1045 1047 (fontified t) 1047 1051 (fontified t face font-lock-string-face) 1051 1059 (fontified t) 1059 1096 (fontified t face font-lock-string-face) 1096 1101 (fontified t) 1101 1102 (fontified t c-type c-not-decl) 1102 1114 (fontified t) 1114 1115 (fontified t c-type c-not-decl) 1115 1117 (fontified t) 1117 1142 (fontified t face font-lock-string-face) 1142 1147 (fontified t) 1147 1181 (fontified t face font-lock-string-face) 1181 1186 (fontified t) 1186 1187 (fontified t c-type c-not-decl) 1187 1199 (fontified t) 1199 1200 (fontified t c-type c-not-decl) 1200 1202 (fontified t) 1202 1249 (fontified t face font-lock-string-face) 1249 1251 (fontified t) 1251 1289 (fontified t face font-lock-string-face) 1289 1290 (fontified t face font-lock-string-face) 1290 1299 (fontified t face font-lock-string-face) 1299 1300 (fontified t face font-lock-string-face) 1300 1301 (fontified t face font-lock-string-face) 1301 1305 (fontified t) 1305 1306 (fontified t c-type c-not-decl) 1306 1318 (fontified t) 1318 1319 (fontified t c-type c-not-decl) 1319 1321 (fontified t) 1321 1368 (fontified t face font-lock-string-face) 1368 1370 (fontified t) 1370 1377 (fontified t face font-lock-string-face) 1377 1378 (fontified t face font-lock-string-face) 1378 1389 (fontified t face font-lock-string-face) 1389 1390 (fontified t face font-lock-string-face) 1390 1391 (fontified t face font-lock-string-face) 1391 1396 (fontified t) 1396 1397 (fontified t c-type c-not-decl) 1397 1409 (fontified t) 1409 1410 (fontified t c-type c-not-decl) 1410 1412 (fontified t) 1412 1459 (fontified t face font-lock-string-face) 1459 1461 (fontified t) 1461 1468 (fontified t face font-lock-string-face) 1468 1469 (fontified t face font-lock-string-face) 1469 1474 (fontified t face font-lock-string-face) 1474 1475 (fontified t face font-lock-string-face) 1475 1476 (fontified t face font-lock-string-face) 1476 1482 (fontified t)) #("#fabd2f" 0 7 (face ((:foreground "black") (:background "#fabd2f")) fontified t)) #("#ebdbb2" 0 7 (fontified t face ((:foreground "black") (:background "#ebdbb2")))) #("$tempCpuTxt" 0 10 (face font-lock-string-face fontified t) 10 11 (face font-lock-string-face rear-nonsticky t fontified t)) #("^b#282828^^c#dfbf8e^$tempCpuTxt" 0 2 (face font-lock-string-face fontified t) 2 3 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 3 9 (face ((:foreground "white") (:background "#282828")) fontified t) 9 12 (face font-lock-string-face fontified t) 12 13 (face ((:foreground "black") (:background "#dfbf8e")) syntax-table (3) fontified t) 13 19 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 19 20 (face font-lock-string-face rear-nonsticky t fontified t) 20 31 (face font-lock-string-face fontified t)) #("^b#282828^^c#dfbf8e^" 0 2 (face font-lock-string-face fontified t) 2 3 (face ((:foreground "white") (:background "#282828")) fontified t syntax-table (3)) 3 9 (face ((:foreground "white") (:background "#282828")) fontified t) 9 12 (face font-lock-string-face fontified t) 12 13 (face ((:foreground "black") (:background "#dfbf8e")) fontified t syntax-table (3)) 13 19 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 19 20 (face font-lock-string-face fontified t)) #("tempCpu" 0 7 (face font-lock-variable-name-face fontified t)) #("if [ \"$usageCpu\" -le 10 ]; then
    icon=\"^b#282828^^c#98971a^\"

elif [ \"$usageCpu\" -le 40 ]; then
    icon=\"^b#282828^^c#89B482^\"

elif [ \"$usageCpu\" -le 60 ]; then
    icon=\"^b#282828^^c#d79921^\"

elif [ \"$usageCpu\" -le 90 ]; then
    icon=\"^b#282828^^c#cc241d^\"

else
    icon=\"^b#282828^^c#98971a^\"

fi" 0 2 (face font-lock-keyword-face fontified t) 2 5 (fontified t) 5 16 (face font-lock-string-face fontified t) 16 27 (fontified t) 27 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 36 (fontified t) 36 40 (face font-lock-variable-name-face fontified t) 40 41 (fontified t) 41 44 (face font-lock-string-face fontified t) 44 45 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 45 51 (face ((:foreground "white") (:background "#282828")) fontified t) 51 54 (face font-lock-string-face fontified t) 54 55 (face ((:foreground "black") (:background "#98971a")) syntax-table (3) fontified t) 55 60 (face ((:foreground "black") (:background "#98971a")) fontified t) 60 61 (face ((:foreground "black") (:background "#98971a")) fontified t rear-nonsticky t) 61 63 (face font-lock-string-face fontified t) 63 64 (face font-lock-string-face fontified t rear-nonsticky t) 64 65 (fontified t) 65 66 (fontified t) 66 70 (face font-lock-keyword-face fontified t) 70 73 (fontified t) 73 83 (face font-lock-string-face fontified t) 83 84 (face font-lock-string-face rear-nonsticky t fontified t) 84 95 (fontified t) 95 99 (face font-lock-keyword-face fontified t) 99 100 (fontified t) 100 104 (fontified t) 104 108 (face font-lock-variable-name-face fontified t) 108 109 (fontified t) 109 112 (face font-lock-string-face fontified t) 112 113 (face ((:foreground "white") (:background "#282828")) fontified t syntax-table (3)) 113 119 (face ((:foreground "white") (:background "#282828")) fontified t) 119 122 (face font-lock-string-face fontified t) 122 123 (face ((:foreground "black") (:background "#89B482")) fontified t syntax-table (3)) 123 129 (face ((:foreground "black") (:background "#89B482")) fontified t) 129 131 (face font-lock-string-face fontified t) 131 132 (face font-lock-string-face fontified t rear-nonsticky t) 132 133 (fontified t) 133 134 (fontified t) 134 138 (face font-lock-keyword-face fontified t) 138 141 (fontified t) 141 151 (face font-lock-string-face fontified t) 151 152 (face font-lock-string-face rear-nonsticky t fontified t) 152 163 (fontified t) 163 167 (face font-lock-keyword-face fontified t) 167 168 (fontified t) 168 172 (fontified t) 172 176 (face font-lock-variable-name-face fontified t) 176 177 (fontified t) 177 180 (face font-lock-string-face fontified t) 180 181 (face ((:foreground "white") (:background "#282828")) fontified t syntax-table (3)) 181 187 (face ((:foreground "white") (:background "#282828")) fontified t) 187 190 (face font-lock-string-face fontified t) 190 191 (face ((:foreground "black") (:background "#d79921")) fontified t syntax-table (3)) 191 196 (face ((:foreground "black") (:background "#d79921")) fontified t) 196 197 (face ((:foreground "black") (:background "#d79921")) fontified t rear-nonsticky t) 197 199 (face font-lock-string-face fontified t) 199 200 (face font-lock-string-face fontified t rear-nonsticky t) 200 201 (fontified t) 201 202 (fontified t) 202 206 (face font-lock-keyword-face fontified t) 206 209 (fontified t) 209 219 (face font-lock-string-face fontified t) 219 220 (face font-lock-string-face rear-nonsticky t fontified t) 220 231 (fontified t) 231 235 (face font-lock-keyword-face fontified t) 235 236 (fontified t) 236 240 (fontified t) 240 244 (face font-lock-variable-name-face fontified t) 244 245 (fontified t) 245 248 (face font-lock-string-face fontified t) 248 249 (face ((:foreground "white") (:background "#282828")) fontified t syntax-table (3)) 249 255 (face ((:foreground "white") (:background "#282828")) fontified t) 255 258 (face font-lock-string-face fontified t) 258 259 (face ((:foreground "white") (:background "#cc241d")) fontified t syntax-table (3)) 259 264 (face ((:foreground "white") (:background "#cc241d")) fontified t) 264 265 (face ((:foreground "white") (:background "#cc241d")) fontified t rear-nonsticky t) 265 267 (face font-lock-string-face fontified t) 267 268 (face font-lock-string-face fontified t rear-nonsticky t) 268 269 (fontified t) 269 270 (fontified t) 270 274 (face font-lock-keyword-face fontified t) 274 275 (fontified t) 275 279 (fontified t) 279 283 (face font-lock-variable-name-face fontified t) 283 284 (fontified t) 284 287 (face font-lock-string-face fontified t) 287 288 (face ((:foreground "white") (:background "#282828")) fontified t syntax-table (3)) 288 294 (face ((:foreground "white") (:background "#282828")) fontified t) 294 297 (face font-lock-string-face fontified t) 297 298 (face ((:foreground "black") (:background "#98971a")) fontified t syntax-table (3)) 298 303 (face ((:foreground "black") (:background "#98971a")) fontified t) 303 304 (face ((:foreground "black") (:background "#98971a")) fontified t rear-nonsticky t) 304 306 (face font-lock-string-face fontified t) 306 307 (face font-lock-string-face fontified t rear-nonsticky t) 307 308 (fontified t) 308 309 (fontified t) 309 310 (face font-lock-keyword-face fontified t) 310 311 (face font-lock-keyword-face fontified t rear-nonsticky t)) #("\"$usageCpu\"" 0 11 (face font-lock-string-face fontified t)) #("icon=\"^b#282828^^c#98971a^\"" 0 4 (face font-lock-variable-name-face fontified t) 4 5 (fontified t) 5 8 (face font-lock-string-face fontified t) 8 9 (face ((:foreground "white") (:background "#282828")) fontified t syntax-table (3)) 9 15 (face ((:foreground "white") (:background "#282828")) fontified t) 15 18 (face font-lock-string-face fontified t) 18 19 (face ((:foreground "black") (:background "#98971a")) fontified t syntax-table (3)) 19 24 (face ((:foreground "black") (:background "#98971a")) fontified t) 24 25 (face ((:foreground "black") (:background "#98971a")) fontified t rear-nonsticky t) 25 27 (face font-lock-string-face fontified t) 27 28 (face font-lock-string-face fontified t rear-nonsticky t)) #("icon=\"^b#282828^^c#cc241d^\"" 0 4 (face font-lock-variable-name-face fontified t) 4 5 (fontified t) 5 8 (face font-lock-string-face fontified t) 8 9 (face ((:foreground "white") (:background "#282828")) fontified t syntax-table (3)) 9 15 (face ((:foreground "white") (:background "#282828")) fontified t) 15 18 (face font-lock-string-face fontified t) 18 19 (face ((:foreground "white") (:background "#cc241d")) fontified t syntax-table (3)) 19 24 (face ((:foreground "white") (:background "#cc241d")) fontified t) 24 25 (face ((:foreground "white") (:background "#cc241d")) fontified t rear-nonsticky t) 25 27 (face font-lock-string-face fontified t) 27 28 (face font-lock-string-face fontified t rear-nonsticky t)) #("icon=\"^b#282828^^c#d79921^\"" 0 4 (face font-lock-variable-name-face fontified t) 4 5 (fontified t) 5 8 (face font-lock-string-face fontified t) 8 9 (face ((:foreground "white") (:background "#282828")) fontified t syntax-table (3)) 9 15 (face ((:foreground "white") (:background "#282828")) fontified t) 15 18 (face font-lock-string-face fontified t) 18 19 (face ((:foreground "black") (:background "#d79921")) fontified t syntax-table (3)) 19 24 (face ((:foreground "black") (:background "#d79921")) fontified t) 24 25 (face ((:foreground "black") (:background "#d79921")) fontified t rear-nonsticky t) 25 27 (face font-lock-string-face fontified t) 27 28 (face font-lock-string-face fontified t rear-nonsticky t)) #("icon=\"^b#282828^^c#89B482^\"" 0 4 (face font-lock-variable-name-face fontified t) 4 5 (fontified t) 5 8 (face font-lock-string-face fontified t) 8 9 (face ((:foreground "white") (:background "#282828")) fontified t syntax-table (3)) 9 15 (face ((:foreground "white") (:background "#282828")) fontified t) 15 18 (face font-lock-string-face fontified t) 18 19 (face ((:foreground "black") (:background "#89B482")) fontified t syntax-table (3)) 19 25 (face ((:foreground "black") (:background "#89B482")) fontified t) 25 27 (face font-lock-string-face fontified t) 27 28 (face font-lock-string-face fontified t rear-nonsticky t)) #("    icon=\"^b#282828^^c#98971a^\"" 0 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t) 9 12 (face font-lock-string-face fontified t) 12 13 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 13 19 (face ((:foreground "white") (:background "#282828")) fontified t) 19 22 (face font-lock-string-face fontified t) 22 23 (face ((:foreground "black") (:background "#98971a")) syntax-table (3) fontified t) 23 28 (face ((:foreground "black") (:background "#98971a")) fontified t) 28 29 (face ((:foreground "black") (:background "#98971a")) rear-nonsticky t fontified t) 29 31 (face font-lock-string-face fontified t) 31 32 (face font-lock-string-face fontified t rear-nonsticky t)) #("c#98971a" 0 1 (face font-lock-string-face fontified t) 1 2 (face ((:foreground "black") (:background "#98971a")) fontified t syntax-table (3)) 2 8 (face ((:foreground "black") (:background "#98971a")) fontified t)) #("    icon=\"^b#282828^^c#cc241d^\"" 0 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t) 9 12 (face font-lock-string-face fontified t) 12 13 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 13 19 (face ((:foreground "white") (:background "#282828")) fontified t) 19 22 (face font-lock-string-face fontified t) 22 23 (face ((:foreground "white") (:background "#cc241d")) syntax-table (3) fontified t) 23 28 (face ((:foreground "white") (:background "#cc241d")) fontified t) 28 29 (face ((:foreground "white") (:background "#cc241d")) fontified t rear-nonsticky t) 29 31 (face font-lock-string-face fontified t) 31 32 (face font-lock-string-face fontified t rear-nonsticky t)) #("#cc241d" 0 1 (face ((:foreground "white") (:background "#cc241d")) fontified t syntax-table (3)) 1 7 (face ((:foreground "white") (:background "#cc241d")) fontified t)) "#d79921" #("    icon=\"^b#282828^^c#d79921^\"" 0 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t) 9 12 (face font-lock-string-face fontified t) 12 13 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 13 19 (face ((:foreground "white") (:background "#282828")) fontified t) 19 22 (face font-lock-string-face fontified t) 22 23 (face ((:foreground "black") (:background "#d79921")) syntax-table (3) fontified t) 23 28 (face ((:foreground "black") (:background "#d79921")) fontified t) 28 29 (face ((:foreground "black") (:background "#d79921")) rear-nonsticky t fontified t) 29 31 (face font-lock-string-face fontified t) 31 32 (face font-lock-string-face rear-nonsticky t fontified t)) #("#d79921" 0 1 (face ((:foreground "black") (:background "#d79921")) fontified t syntax-table (3)) 1 7 (face ((:foreground "black") (:background "#d79921")) fontified t)) #("icon=\"^b#282828^^c#89B482^\"" 0 4 (face font-lock-variable-name-face fontified t) 4 5 (fontified t) 5 8 (face font-lock-string-face fontified t) 8 9 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 9 15 (face ((:foreground "white") (:background "#282828")) fontified t) 15 18 (face font-lock-string-face fontified t) 18 19 (face ((:foreground "black") (:background "#89B482")) syntax-table (3) fontified t) 19 25 (face ((:foreground "black") (:background "#89B482")) fontified t) 25 28 (face font-lock-string-face fontified t)) #("    if [ \"$battery_level\" -le 30 ]; then
	icon=\"^b#282828^^c#cc241d^\"
    elif [ \"$battery_level\" -le 40 ]; then
	icon=\"^b#282828^^c#cc241d^\"
    elif [ \"$battery_level\" -le 60 ]; then
	icon=\"^b#282828^^c#d79921^\"
    elif [ \"$battery_level\" -le 90 ]; then
	icon=\"^b#282828^^c#98971a^\"
    else
	icon=\"^b#282828^^c#98971a^\"
    fi" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 9 (fontified t) 9 25 (face font-lock-string-face fontified t) 25 36 (fontified t) 36 40 (face font-lock-keyword-face fontified t) 40 42 (fontified t) 42 46 (face font-lock-variable-name-face fontified t) 46 47 (fontified t) 47 50 (face font-lock-string-face fontified t) 50 51 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 51 57 (face ((:foreground "white") (:background "#282828")) fontified t) 57 60 (face font-lock-string-face fontified t) 60 61 (face ((:foreground "white") (:background "#cc241d")) syntax-table (3) fontified t) 61 67 (face ((:foreground "white") (:background "#cc241d")) fontified t) 67 70 (face font-lock-string-face fontified t) 70 75 (fontified t) 75 79 (face font-lock-keyword-face fontified t) 79 82 (fontified t) 82 98 (face font-lock-string-face fontified t) 98 109 (fontified t) 109 113 (face font-lock-keyword-face fontified t) 113 115 (fontified t) 115 119 (face font-lock-variable-name-face fontified t) 119 120 (fontified t) 120 123 (face font-lock-string-face fontified t) 123 124 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 124 130 (face ((:foreground "white") (:background "#282828")) fontified t) 130 133 (face font-lock-string-face fontified t) 133 134 (face ((:foreground "white") (:background "#cc241d")) syntax-table (3) fontified t) 134 140 (face ((:foreground "white") (:background "#cc241d")) fontified t) 140 143 (face font-lock-string-face fontified t) 143 148 (fontified t) 148 152 (face font-lock-keyword-face fontified t) 152 155 (fontified t) 155 171 (face font-lock-string-face fontified t) 171 182 (fontified t) 182 186 (face font-lock-keyword-face fontified t) 186 188 (fontified t) 188 192 (face font-lock-variable-name-face fontified t) 192 193 (fontified t) 193 196 (face font-lock-string-face fontified t) 196 197 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 197 203 (face ((:foreground "white") (:background "#282828")) fontified t) 203 206 (face font-lock-string-face fontified t) 206 207 (face ((:foreground "black") (:background "#d79921")) syntax-table (3) fontified t) 207 213 (face ((:foreground "black") (:background "#d79921")) fontified t) 213 216 (face font-lock-string-face fontified t) 216 221 (fontified t) 221 225 (face font-lock-keyword-face fontified t) 225 228 (fontified t) 228 244 (face font-lock-string-face fontified t) 244 255 (fontified t) 255 259 (face font-lock-keyword-face fontified t) 259 261 (fontified t) 261 265 (face font-lock-variable-name-face fontified t) 265 266 (fontified t) 266 269 (face font-lock-string-face fontified t) 269 270 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 270 276 (face ((:foreground "white") (:background "#282828")) fontified t) 276 279 (face font-lock-string-face fontified t) 279 280 (face ((:foreground "black") (:background "#98971a")) syntax-table (3) fontified t) 280 286 (face ((:foreground "black") (:background "#98971a")) fontified t) 286 289 (face font-lock-string-face fontified t) 289 294 (fontified t) 294 298 (face font-lock-keyword-face fontified t) 298 300 (fontified t) 300 304 (face font-lock-variable-name-face fontified t) 304 305 (fontified t) 305 308 (face font-lock-string-face fontified t) 308 309 (face ((:foreground "white") (:background "#282828")) syntax-table (3) fontified t) 309 315 (face ((:foreground "white") (:background "#282828")) fontified t) 315 318 (face font-lock-string-face fontified t) 318 319 (face ((:foreground "black") (:background "#98971a")) syntax-table (3) fontified t) 319 325 (face ((:foreground "black") (:background "#98971a")) fontified t) 325 328 (face font-lock-string-face fontified t) 328 333 (fontified t) 333 335 (face font-lock-keyword-face fontified t)) #("^b#282828^^c#dfbf8e^" 0 2 (face font-lock-string-face fontified t) 2 9 (face ((:foreground "white") (:background "#282828")) fontified t) 9 12 (face font-lock-string-face fontified t) 12 19 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 19 20 (face font-lock-string-face fontified t)) #("#45858b" 0 7 (face ((:foreground "white") (:background "#45858b")) fontified t)) #("#45858" 0 6 (face ((:foreground "white") (:background "#45858b")) fontified t)) #("#b16286" 0 7 (face ((:foreground "white") (:background "#b16286")) fontified t c-in-sws t)) #("#fabd2f" 0 7 (face ((:foreground "black") (:background "#fabd2f")) fontified t c-in-sws t)) #("#45858B" 0 7 (face ((:foreground "white") (:background "#45858B")) fontified t c-in-sws t)) #("#B8bb26" 0 7 (face ((:foreground "black") (:background "#B8bb26")) c-in-sws t fontified t)) #("#fb4934" 0 7 (face ((:foreground "white") (:background "#fb4934")) c-in-sws t fontified t)) #("#fb4934" 0 7 (face ((:foreground "white") (:background "#fb4934")) c-in-sws t fontified t)) #("
static const struct arg args[] = {
	/* function                     format						argument */
	{ run_command,		\"^b#282828^^c#89B482^ %s\",				\"bash ~/.local/bin/music_status_bar.sh\"},
	{ run_command,		\"^b#282828^^c#89B482^ %s\",				\"bash ~/.local/bin/sl-wttr.sh\"},
	{ run_command,		\"^b#282828^^c#89B482^ %s\",				\"bash ~/.local/bin/cpu_status.sh\"},
	//{ cpu_perc,		\"^b#282828^^c#89B482^ ^b#282828^^c#dfbf8e^%s󰏰 \",	NULL},
	//{ run_command,	\"^b#282828^^c#89B482^%s\",				\"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"},
	{ ram_perc,		\"^b#282828^^c#89B482^  ^b#282828^^c#dfbf8e^%s󰏰 \",	NULL},
	{ disk_perc,		\"^b#282828^^c#89B482^ 󰋊 ^b#282828^^c#dfbf8e^%s󰏰 \",	\"/\" },
	{ wifi_essid,		\"^b#282828^^c#89B482^  ^b#282828^^c#dfbf8e^%s\",	\"wlan0\" },
	{ wifi_perc,		\"^b#282828^^c#dfbf8e^ %s󰏰 \",				\"wlan0\" },
	//{ netspeed_rx,	\"^b#282828^^c#89B482^  ^b#282828^^c#dfbf8e^%s\",	\"wlan0\" },
	//{ netspeed_tx,	\"^b#282828^^c#89B482^  ^b#282828^^c#dfbf8e^%s\",	\"wlan0\" },
	//{ battery_perc,	\"^b#282828^^c#89B482^  ^b#282828^^c#dfbf8e^%s󰏰 \",	\"BAT1\" },
	{ run_command,		\"%s\",							\"bash ~/.local/bin/battery_status.sh\" },
	{ run_command,		\"^b#282828^^c#89B482^ %s\",				\"bash ~/.local/bin/volume_icon.sh\" },
	{ run_command,		\"^b#282828^^c#89B482^ 󰌌 ^b#282828^^c#dfbf8e^%s\",	\"setxkbmap -query | grep layout | awk '{print$2}'\"},
	{ run_command,		\"^b#282828^^c#89B482^  ^b#282828^^c#dfbf8e^%s\",	\"date +'%a %d %b %Y'\" },
	{ run_command,		\"^b#282828^^c#89B482^ 󰥔 ^b#282828^^c#dfbf8e^%s \",	\"date +'%H:%M'\"},
};

" 0 1 (c-is-sws t fontified t) 1 2 (face font-lock-keyword-face c-is-sws t fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 23 (face font-lock-type-face fontified t) 23 24 (face font-lock-type-face c-type c-decl-id-start fontified t) 24 25 (fontified t) 25 29 (face font-lock-variable-name-face fontified t) 29 36 (fontified t) 36 37 (c-is-sws t c-in-sws t fontified t) 37 38 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 38 40 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 40 89 (face font-lock-comment-face c-in-sws t fontified t) 89 92 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 92 93 (c-in-sws t fontified t) 93 94 (c-in-sws t c-is-sws t fontified t) 94 95 (c-type c-not-decl c-is-sws t fontified t) 95 107 (fontified t) 107 108 (c-type c-not-decl fontified t) 108 110 (fontified t) 110 113 (face font-lock-string-face fontified t) 113 120 (face ((:foreground "white") (:background "#282828")) fontified t) 120 123 (face font-lock-string-face fontified t) 123 130 (face ((:foreground "black") (:background "#89B482")) fontified t) 130 135 (face font-lock-string-face fontified t) 135 140 (fontified t) 140 179 (face font-lock-string-face fontified t) 179 183 (fontified t) 183 184 (c-type c-not-decl fontified t) 184 196 (fontified t) 196 197 (c-type c-not-decl fontified t) 197 199 (fontified t) 199 202 (face font-lock-string-face fontified t) 202 209 (face ((:foreground "white") (:background "#282828")) fontified t) 209 212 (face font-lock-string-face fontified t) 212 219 (face ((:foreground "black") (:background "#89B482")) fontified t) 219 224 (face font-lock-string-face fontified t) 224 229 (fontified t) 229 259 (face font-lock-string-face fontified t) 259 263 (fontified t) 263 264 (c-type c-not-decl fontified t) 264 276 (fontified t) 276 277 (c-type c-not-decl fontified t) 277 279 (fontified t) 279 282 (face font-lock-string-face fontified t) 282 289 (face ((:foreground "white") (:background "#282828")) fontified t) 289 292 (face font-lock-string-face fontified t) 292 299 (face ((:foreground "black") (:background "#89B482")) fontified t) 299 304 (face font-lock-string-face fontified t) 304 309 (fontified t) 309 342 (face font-lock-string-face fontified t) 342 345 (fontified t) 345 346 (c-is-sws t c-in-sws t fontified t) 346 347 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 347 348 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 348 364 (face font-lock-comment-face c-in-sws t fontified t) 364 371 (face ((:foreground "white") (:background "#282828")) c-in-sws t fontified t) 371 374 (face font-lock-comment-face c-in-sws t fontified t) 374 381 (face ((:foreground "black") (:background "#89B482")) c-in-sws t fontified t) 381 386 (face font-lock-comment-face c-in-sws t fontified t) 386 393 (face ((:foreground "white") (:background "#282828")) c-in-sws t fontified t) 393 396 (face font-lock-comment-face c-in-sws t fontified t) 396 403 (face ((:foreground "black") (:background "#dfbf8e")) c-in-sws t fontified t) 403 418 (face font-lock-comment-face c-in-sws t fontified t) 418 419 (c-in-sws t fontified t) 419 421 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 421 439 (face font-lock-comment-face c-in-sws t fontified t) 439 446 (face ((:foreground "white") (:background "#282828")) c-in-sws t fontified t) 446 449 (face font-lock-comment-face c-in-sws t fontified t) 449 456 (face ((:foreground "black") (:background "#89B482")) c-in-sws t fontified t) 456 480 (face font-lock-comment-face c-in-sws t fontified t) 480 481 (face font-lock-comment-face c-in-sws t fontified t syntax-table (1)) 481 497 (face font-lock-comment-face c-in-sws t fontified t) 497 498 (face font-lock-comment-face c-in-sws t fontified t syntax-table (1)) 498 505 (face font-lock-comment-face c-in-sws t fontified t) 505 506 (face font-lock-comment-face c-in-sws t fontified t syntax-table (1)) 506 511 (face font-lock-comment-face c-in-sws t fontified t) 511 512 (face font-lock-comment-face c-in-sws t fontified t syntax-table (1)) 512 516 (face font-lock-comment-face c-in-sws t fontified t) 516 517 (c-in-sws t c-is-sws t fontified t) 517 518 (c-type c-not-decl c-is-sws t fontified t) 518 527 (fontified t) 527 528 (c-type c-not-decl fontified t) 528 530 (fontified t) 530 533 (face font-lock-string-face fontified t) 533 540 (face ((:foreground "white") (:background "#282828")) fontified t) 540 543 (face font-lock-string-face fontified t) 543 550 (face ((:foreground "black") (:background "#89B482")) fontified t) 550 556 (face font-lock-string-face fontified t) 556 563 (face ((:foreground "white") (:background "#282828")) fontified t) 563 566 (face font-lock-string-face fontified t) 566 572 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 572 573 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 573 579 (face font-lock-string-face fontified t) 579 581 (fontified t) 581 585 (face font-lock-constant-face fontified t) 585 588 (fontified t) 588 589 (fontified t) 589 590 (c-type c-not-decl fontified t) 590 600 (fontified t) 600 601 (c-type c-not-decl fontified t) 601 603 (fontified t) 603 606 (face font-lock-string-face fontified t) 606 613 (face ((:foreground "white") (:background "#282828")) fontified t) 613 616 (face font-lock-string-face fontified t) 616 623 (face ((:foreground "black") (:background "#89B482")) fontified t) 623 629 (face font-lock-string-face fontified t) 629 636 (face ((:foreground "white") (:background "#282828")) fontified t) 636 639 (face font-lock-string-face fontified t) 639 646 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 646 652 (face font-lock-string-face fontified t) 652 654 (fontified t) 654 657 (face font-lock-string-face fontified t) 657 662 (fontified t) 662 663 (c-type c-not-decl fontified t) 663 674 (fontified t) 674 675 (c-type c-not-decl fontified t) 675 677 (fontified t) 677 680 (face font-lock-string-face fontified t) 680 687 (face ((:foreground "white") (:background "#282828")) fontified t) 687 690 (face font-lock-string-face fontified t) 690 697 (face ((:foreground "black") (:background "#89B482")) fontified t) 697 703 (face font-lock-string-face fontified t) 703 710 (face ((:foreground "white") (:background "#282828")) fontified t) 710 713 (face font-lock-string-face fontified t) 713 720 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 720 724 (face font-lock-string-face fontified t) 724 726 (fontified t) 726 733 (face font-lock-string-face fontified t) 733 738 (fontified t) 738 739 (c-type c-not-decl fontified t) 739 749 (fontified t) 749 750 (c-type c-not-decl fontified t) 750 752 (fontified t) 752 755 (face font-lock-string-face fontified t) 755 762 (face ((:foreground "white") (:background "#282828")) fontified t) 762 765 (face font-lock-string-face fontified t) 765 772 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 772 779 (face font-lock-string-face fontified t) 779 784 (fontified t) 784 791 (face font-lock-string-face fontified t) 791 795 (fontified t) 795 796 (c-is-sws t c-in-sws t fontified t) 796 797 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 797 798 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 798 816 (face font-lock-comment-face c-in-sws t fontified t) 816 823 (face ((:foreground "white") (:background "#282828")) c-in-sws t fontified t) 823 826 (face font-lock-comment-face c-in-sws t fontified t) 826 833 (face ((:foreground "black") (:background "#89B482")) c-in-sws t fontified t) 833 839 (face font-lock-comment-face c-in-sws t fontified t) 839 846 (face ((:foreground "white") (:background "#282828")) c-in-sws t fontified t) 846 849 (face font-lock-comment-face c-in-sws t fontified t) 849 856 (face ((:foreground "black") (:background "#dfbf8e")) c-in-sws t fontified t) 856 873 (face font-lock-comment-face c-in-sws t fontified t) 873 874 (c-in-sws t fontified t) 874 876 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 876 894 (face font-lock-comment-face c-in-sws t fontified t) 894 901 (face ((:foreground "white") (:background "#282828")) c-in-sws t fontified t) 901 904 (face font-lock-comment-face c-in-sws t fontified t) 904 911 (face ((:foreground "black") (:background "#89B482")) c-in-sws t fontified t) 911 917 (face font-lock-comment-face c-in-sws t fontified t) 917 924 (face ((:foreground "white") (:background "#282828")) c-in-sws t fontified t) 924 927 (face font-lock-comment-face c-in-sws t fontified t) 927 934 (face ((:foreground "black") (:background "#dfbf8e")) c-in-sws t fontified t) 934 951 (face font-lock-comment-face c-in-sws t fontified t) 951 952 (c-in-sws t fontified t) 952 954 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 954 973 (face font-lock-comment-face c-in-sws t fontified t) 973 980 (face ((:foreground "white") (:background "#282828")) c-in-sws t fontified t) 980 983 (face font-lock-comment-face c-in-sws t fontified t) 983 990 (face ((:foreground "black") (:background "#89B482")) c-in-sws t fontified t) 990 996 (face font-lock-comment-face c-in-sws t fontified t) 996 1003 (face ((:foreground "white") (:background "#282828")) c-in-sws t fontified t) 1003 1006 (face font-lock-comment-face c-in-sws t fontified t) 1006 1013 (face ((:foreground "black") (:background "#dfbf8e")) c-in-sws t fontified t) 1013 1031 (face font-lock-comment-face c-in-sws t fontified t) 1031 1032 (c-in-sws t c-is-sws t fontified t) 1032 1033 (c-type c-not-decl c-is-sws t fontified t) 1033 1045 (fontified t) 1045 1046 (c-type c-not-decl fontified t) 1046 1048 (fontified t) 1048 1052 (face font-lock-string-face fontified t) 1052 1060 (fontified t) 1060 1097 (face font-lock-string-face fontified t) 1097 1102 (fontified t) 1102 1103 (c-type c-not-decl fontified t) 1103 1115 (fontified t) 1115 1116 (c-type c-not-decl fontified t) 1116 1118 (fontified t) 1118 1121 (face font-lock-string-face fontified t) 1121 1128 (face ((:foreground "white") (:background "#282828")) fontified t) 1128 1131 (face font-lock-string-face fontified t) 1131 1138 (face ((:foreground "black") (:background "#89B482")) fontified t) 1138 1143 (face font-lock-string-face fontified t) 1143 1148 (fontified t) 1148 1182 (face font-lock-string-face fontified t) 1182 1187 (fontified t) 1187 1188 (c-type c-not-decl fontified t) 1188 1200 (fontified t) 1200 1201 (c-type c-not-decl fontified t) 1201 1203 (fontified t) 1203 1206 (face font-lock-string-face fontified t) 1206 1213 (face ((:foreground "white") (:background "#282828")) fontified t) 1213 1216 (face font-lock-string-face fontified t) 1216 1223 (face ((:foreground "black") (:background "#89B482")) fontified t) 1223 1229 (face font-lock-string-face fontified t) 1229 1236 (face ((:foreground "white") (:background "#282828")) fontified t) 1236 1239 (face font-lock-string-face fontified t) 1239 1246 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 1246 1250 (face font-lock-string-face fontified t) 1250 1252 (fontified t) 1252 1290 (face font-lock-string-face fontified t) 1290 1291 (face font-lock-string-face fontified t syntax-table (1)) 1291 1300 (face font-lock-string-face fontified t) 1300 1301 (face font-lock-string-face fontified t syntax-table (1)) 1301 1302 (face font-lock-string-face fontified t) 1302 1306 (fontified t) 1306 1307 (c-type c-not-decl fontified t) 1307 1319 (fontified t) 1319 1320 (c-type c-not-decl fontified t) 1320 1322 (fontified t) 1322 1325 (face font-lock-string-face fontified t) 1325 1332 (face ((:foreground "white") (:background "#282828")) fontified t) 1332 1335 (face font-lock-string-face fontified t) 1335 1342 (face ((:foreground "black") (:background "#89B482")) fontified t) 1342 1348 (face font-lock-string-face fontified t) 1348 1355 (face ((:foreground "white") (:background "#282828")) fontified t) 1355 1358 (face font-lock-string-face fontified t) 1358 1365 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 1365 1369 (face font-lock-string-face fontified t) 1369 1371 (fontified t) 1371 1378 (face font-lock-string-face fontified t) 1378 1379 (face font-lock-string-face fontified t syntax-table (1)) 1379 1390 (face font-lock-string-face fontified t) 1390 1391 (face font-lock-string-face fontified t syntax-table (1)) 1391 1392 (face font-lock-string-face fontified t) 1392 1397 (fontified t) 1397 1398 (c-type c-not-decl fontified t) 1398 1410 (fontified t) 1410 1411 (c-type c-not-decl fontified t) 1411 1413 (fontified t) 1413 1416 (face font-lock-string-face fontified t) 1416 1423 (face ((:foreground "white") (:background "#282828")) fontified t) 1423 1426 (face font-lock-string-face fontified t) 1426 1433 (face ((:foreground "black") (:background "#89B482")) fontified t) 1433 1439 (face font-lock-string-face fontified t) 1439 1446 (face ((:foreground "white") (:background "#282828")) fontified t) 1446 1449 (face font-lock-string-face fontified t) 1449 1456 (face ((:foreground "black") (:background "#dfbf8e")) fontified t) 1456 1461 (face font-lock-string-face fontified t) 1461 1463 (fontified t) 1463 1470 (face font-lock-string-face fontified t) 1470 1471 (face font-lock-string-face fontified t syntax-table (1)) 1471 1476 (face font-lock-string-face fontified t) 1476 1477 (face font-lock-string-face fontified t syntax-table (1)) 1477 1478 (face font-lock-string-face fontified t) 1478 1485 (fontified t)) "^b#282828^^c#89B482^" "^b#282828^^c#dfbf8e^" "^b#282828^^c#89B482^" #("^b#282828^^c#dfbf8e^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 18 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 18 19 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e"))) 19 20 (rear-nonsticky t fontified t face font-lock-string-face)) #("^b#282828^^c#89B482^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 19 (fontified t face ((:foreground "black") (:background "#89B482"))) 19 20 (fontified t face font-lock-string-face)) #("^b#282828^^c#dfbf8e^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 18 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 18 19 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e"))) 19 20 (rear-nonsticky t fontified t face font-lock-string-face)) #("^c#dfbf8e^" 0 2 (fontified t face font-lock-string-face) 2 8 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 8 9 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e"))) 9 10 (rear-nonsticky t fontified t face font-lock-string-face)) "static const char c_bg[]          = \"#222121\";
static const char c_fg[]          = \"#dfbf8e\";
static const char c_white[]       = \"#fbf1c7\";
static const char c_red[]         = \"#cc241d\";
static const char c_green[]       = \"#B8bb26\";
static const char c_yellow[]      = \"#fabd2f\";
static const char c_blue[]        = \"#45858B\";
static const char c_purple[]      = \"#b16286\";
static const char c_aqua[]        = \"#689d6a\";
static const char c_gray[]        = \"#a89984\";
static const char c_orange[]      = \"#d65d0e\";
static const char c_aqua2[]       = \"#427b58\";

static const char icone_color[] = \"^b#282828^^c#629464^\";
static const char texto_color[] = \"^b#282828^^c^#dfbf8e\";

static const struct arg args[] = {
	/* function                     format					argument */
	{ run_command,		\"^b#282828^^c#629464^ %s\",			\"bash ~/.local/bin/music_status_bar.sh\"},
	{ run_command,		\"^b#282828^^c#b16286^ %s\",			\"bash ~/.local/bin/sl-wttr.sh\"},
	{ run_command,		\"^b#282828^^c#fb4934^ %s\",			\"bash ~/.local/bin/cpu_status.sh\"},
	//{ cpu_perc,		\"^b#282828^^c#fb4934^ %.3s󰏰 \",			NULL},
	//{ run_command,	\"^b#282828^^c#fb4934^%s\",			\"sensors | awk '/edge/ {print$2}' | sed 's/+//'\"},
	{ ram_perc,		\"^b#282828^^c#B8bb26^  %s󰏰 \",			NULL},
	{ disk_perc,		\"^b#282828^^c#45858B^ 󰋊 %s󰏰 \",			\"/\" },
	{ wifi_essid,		\"^b#282828^^c#fabd2f^  %s\",			\"wlan0\" },
	{ wifi_perc,		\"^b#282828^^c#fabd2f^ %s󰏰 \",			\"wlan0\" },
	//{ netspeed_rx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ netspeed_tx,		\"^b#282828^^c#fabd2f^   %s\",			\"wlan0\" },
	//{ battery_perc,	\"^b#282828^^c#b16286^  %s󰏰 \",			\"BAT1\" },
	{ run_command,		\"%s\",						\"bash ~/.local/bin/battery_status.sh\" },
	{ run_command,		\"^b#282828^^c#dfbf8e^ %s\",			\"bash ~/.local/bin/volume_icon.sh\" },
	{ run_command,		\"^b#282828^^c#45858b^ 󰌌 %s\",			\"setxkbmap -query | grep layout | awk '{print$2}'\"},
	{ run_command,		\"^b#282828^^c#d65d0e^  %s\",			\"date +'%a %d %b %Y'\" },
	{ run_command,		\"^b#282828^^c#689d6a^ 󰥔 %s \",			\"date +'%H:%M'\"},
};
" "#89B482" #("#427b58" 0 7 (fontified t face ((:foreground "white") (:background "#427b58")))) #("^b#282828^^c#dfbf8e^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 18 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 18 19 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e"))) 19 20 (fontified t rear-nonsticky t face font-lock-string-face)) #("#dfbf8e" 0 6 (fontified t face ((:foreground "black") (:background "#dfbf8e"))) 6 7 (rear-nonsticky t fontified t face ((:foreground "black") (:background "#dfbf8e")))) #("^b#282828^^c#427b58^" 0 2 (fontified t face font-lock-string-face) 2 9 (fontified t face ((:foreground "white") (:background "#282828"))) 9 12 (fontified t face font-lock-string-face) 12 19 (fontified t face ((:foreground "white") (:background "#427b58"))) 19 20 (fontified t face font-lock-string-face))))
(setq search-ring '(#("/" 0 1 (isearch-regexp-function nil isearch-case-fold-search t))))
(setq regexp-search-ring '("updatebars" "togglebar" "setup" "drawbar" "configureno" "sp" "updatege" "indent" "scheme\\[SchemeNorm]\\[ColB" "updatesys" "mai"))
