;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(counsel-locate-history sql-product-history sql-server-history sql-database-history sql-user-history read-char-history counsel-git-history transient--history read-number-history compile-history shell-command-history magit-git-command-history magit-revision-history extended-command-history ido-file-history minibuffer-history empty-history read-from-kill-ring-history ivy-history counsel-M-x-history swiper-history ido-buffer-history file-name-history))
(setq sql-product-history '(#("ansi" 0 4 (ivy-index 0))))
(setq sql-server-history '("172.17.0.2" "172.17.0.1"))
(setq sql-database-history '(#("alura" 0 5 (ivy-index 0)) #("postgres" 0 8 (ivy-index 0)) #("anderson" 0 8 (ivy-index 0))))
(setq sql-user-history '("postgres"))
(setq read-number-history '("1"))
(setq compile-history '("make -k "))
(setq shell-command-history '("/usr/bin/zsh" "/usr/bin/bash"))
(setq magit-revision-history '(#("5ad9048" 0 7 (ivy-index 0)) #("9e4e37a8e58c4c2695feeb6ce1223b8849c5f7f7" 0 40 (ivy-index 0)) #("e5b577f5f6a6135f1566bf97f4a4c1a2ea06af15" 0 40 (ivy-index 0)) #("HEAD" 0 4 (ivy-index 3)) #("main" 0 4 (ivy-index 0)) #("origin/main" 0 11 (ivy-index 0)) #("1a51c1d" 0 7 (ivy-index 0)) #("ola mundo" 0 9 (ivy-index 0))))
(setq ido-file-history '("." "dmenu-teclados" "aula001.sql" "init.el" "emacs.org" "myinit.org" nil "tabela_funcionarios.sql" "tabela_aluno.sql" "README.md" "dunstrc" "cpu_status.sh" "music_status_bar.sh" "volume_icon.sh" "battery_status.sh" "advinha_mais.html" "estrelas.html" "media_idades_familiares.html" "media_idades_familiares.hml" "tabuada.html" "ano_copa.html" "jogo_advinha.html" "futebol.html" "imc.html" "programa.html" "texto_puro.html" "primeiro_teste.html"))
(setq minibuffer-history '("/usr/bin/zsh" "select * from curso;" "select * from cursos;" "/usr/bin/bash"))
(setq ivy-history '(#("flycheck" 0 8 (ivy-index 64)) #("origin" 0 6 (ivy-index 0)) #("~/.dotfiles/" 0 12 (ivy-index 0)) #("emacsql-psql" 0 12 (ivy-index 13)) #("index.html" 0 10 (ivy-index 0)) #("myterminal-controls" 0 19 (ivy-index 10)) #("./" 0 2 (ivy-index 0)) #("... (choose a dir)" 0 18 (ivy-index 1)) #("electric-indent-mode" 0 20 (ivy-index 14)) #("indent-guide" 0 12 (ivy-index 0)) #("web-mode-indent-style" 0 21 (ivy-index 0)) #("rainbow-mode" 0 12 (ivy-index 3))))
(setq counsel-M-x-history '(#("^elpy" 0 5 (ivy-index 1)) "elpy-config" #("^package-ins" 0 12 (ivy-index 0)) "package-install" #("^pyve" 0 5 (ivy-index 5)) "pyvenv-workon" #("^elpy-con" 0 9 (ivy-index 0)) #("^pyvenv" 0 7 (ivy-index 6)) "pyvenv-activate" #("^elpy-ena" 0 9 (ivy-index 0)) "elpy-enable" #("^elpy-rpc" 0 9 (ivy-index 1)) "elpy-rpc-restart" #("^elpy-confi" 0 11 (ivy-index 0)) #("^elpy-rp" 0 8 (ivy-index 1)) #("^ansi" 0 5 (ivy-index 1)) "ansi-term" #("^term" 0 5 (ivy-index 0)) "term" #("^try" 0 4 (ivy-index 1)) "try" #("^python-mo" 0 10 (ivy-index 0)) "python-mode" #("^rain" 0 5 (ivy-index 0)) "rainbow-mode" #("^sql" 0 4 (ivy-index 1)) "sql-postgres" #("^sql-pos" 0 8 (ivy-index 0)) #("^rainbo" 0 7 (ivy-index 0)) #("^conf-mo" 0 8 (ivy-index 0)) "conf-mode" #("linu" 0 4 (ivy-index 0)) "linum-mode" #("^sql-hel" 0 8 (ivy-index 0)) "sql-help" #("^sql-set" 0 8 (ivy-index 1)) "sql-set-sqli-buffer" "sql-set-product" #("^sql-mode" 0 9 (ivy-index 0)) "sql-mode" #("^ter" 0 4 (ivy-index 0)) #("^markdown-pre" 0 13 (ivy-index 0)) "markdown-preview-cleanup" #("^markdown-previ" 0 15 (ivy-index 1)) "markdown-preview" "markdown-preview-mode" "markdown-preview-open-browser" #("^markdown-vi" 0 12 (ivy-index 0)) "markdown-view-mode" #("^markdown-v" 0 11 (ivy-index 0)) #("^markdown-p" 0 11 (ivy-index 0)) #("^markdown-mode" 0 14 (ivy-index 2)) "markdown-mode" #("^markdo" 0 7 (ivy-index 2)) #("^ra" 0 3 (ivy-index 1)) #("^conf-mod" 0 9 (ivy-index 0)) #("^myter" 0 6 (ivy-index 1)) "myterminal-controls-open-controls" #("^magit-rebase" 0 13 (ivy-index 2)) "magit-rebase" #("^magit-log-current" 0 18 (ivy-index 0)) "magit-log-current" #("^magit-log --g" 0 14 (ivy-index 0)) "magit-log:--grep" #("^magit-lo" 0 9 (ivy-index 1)) "magit-log:-G" #("^magit-log" 0 10 (ivy-index 8)) "magit-log" #("^centaur-tabs-mode" 0 18 (ivy-index 0)) "centaur-tabs-mode" #("^centaur-tabs-g" 0 15 (ivy-index 0)) "centaur-tabs-group-buffer-groups" #("^magit-merge" 0 12 (ivy-index 3)) "magit-merge" #("^magit-status" 0 13 (ivy-index 2)) "magit-status" #("^rainb" 0 6 (ivy-index 0)) #("^ansi-" 0 6 (ivy-index 1)) #("^conf-mode" 0 10 (ivy-index 0)) #("^magit-stat" 0 11 (ivy-index 2)) #("^ansi-te" 0 8 (ivy-index 0)) #("^java" 0 5 (ivy-index 1)) "javascript-mode" #("^customize-va" 0 13 (ivy-index 0)) "customize-variable" #("^indent-gui" 0 11 (ivy-index 0)) "indent-guide-mode" #("^package-install" 0 16 (ivy-index 0)) #("^package-lis" 0 12 (ivy-index 0)) "package-list-packages" #("^web-mode" 0 9 (ivy-index 82)) "web-mode" #("ansi" 0 4 (ivy-index 2)) #("^cua" 0 4 (ivy-index 5)) "cua-toggle-rectangle-mark" "cua-paste" "cua-paste-pop" "cua-cut-region" #("^cua-sc" 0 7 (ivy-index 1)) "cua-scroll-down" #("^cua-s" 0 6 (ivy-index 2)) "cua-selection-mode"))
(setq swiper-history '(#("indent" 0 6 (ivy-index 16)) #("   indent-guide                   20160630       available    melpa-stable show vertical lines to guide indentation" 0 1 (display "1665 " swiper-line-number 1665) 1 3 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil)) 3 15 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Package" action package-menu-describe-package package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) follow-link t font-lock-face package-name face package-name category default-button button (t)) 15 16 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Package") 16 34 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Package" display (space :align-to 33)) 34 42 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Version" help-echo #("Version: 20160630" 9 17 (font-lock-face package-status-available)) font-lock-face package-status-available) 42 43 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Version") 43 49 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Version" display (space :align-to 48)) 49 58 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face package-status-available)) font-lock-face package-status-available) 58 59 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Status") 59 62 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Status" display (space :align-to 61)) 62 69 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Archive" help-echo #("Archive: melpa-stable" 9 21 (font-lock-face package-status-available)) font-lock-face package-status-available) 69 74 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Archive" help-echo #("Archive: melpa-stable" 9 21 (font-lock-face package-status-available)) display "…" font-lock-face package-status-available) 74 75 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Archive") 75 115 (tabulated-list-entry [("indent-guide" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) action package-menu-describe-package) #("20160630" 0 8 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("melpa-stable" 0 12 (font-lock-face package-status-available)) #("show vertical lines to guide indentation" 0 40 (font-lock-face package-description))] tabulated-list-id #s(package-desc indent-guide (20160630) "show vertical lines to guide indentation" nil tar "melpa-stable" nil ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:authors ("zk_phi")) (:maintainers ("zk_phi")) (:maintainer "zk_phi") (:url . "http://hins11.yu-yake.com/")) nil) tabulated-list-column-name "Description" help-echo #("Description: show vertical lines to guide indentation" 13 53 (font-lock-face package-description)) font-lock-face package-description)) "scheme[SchemeNorm][ColBg" #("scheme[SchemeNorm][ColB" 0 23 (ivy-index 8)) #(" 	XSetForeground(dpy, drw->gc, scheme[SchemeNorm][ColBg].pixel);" 0 1 (display "2761 " swiper-line-number 2761) 1 2 (c-is-sws t fontified t) 2 3 (fontified t c-is-sws t) 3 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (rear-nonsticky t fontified t)) #("updatesys" 0 9 (ivy-index 18)) #(" updatesystray(void)" 0 1 (display "2700 " swiper-line-number 2700) 1 14 (face font-lock-function-name-face fontified t) 14 15 (c-type c-decl-arg-start fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (fontified t)) #("mai" 0 3 (ivy-index 0)) #(" main(int argc, char *argv[])" 0 1 (display "814 " swiper-line-number 814) 1 5 (face font-lock-function-name-face fontified t) 5 6 (c-type c-decl-arg-start fontified t) 6 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 14 (face font-lock-variable-name-face fontified t) 14 15 (c-type c-decl-arg-start fontified t) 15 16 (fontified t) 16 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 26 (face font-lock-variable-name-face fontified t) 26 29 (fontified t))))
(setq ido-buffer-history '("*Elpy Config*" "*ansi-term*" "*terminal*" "dmenu-teclados" "config.def.h" "config.def.h<slstatus>" "tabela_funcionarios.sql" "aula001.sql" "banco-inicial.sql" "*SQL: Postgres*" "dmenu-docker-compose.sh" "HELLO" "index.theme" "icon-theme.cache" "]" "action-unavailable-symbolic.svg" "autostart.sh" "dmenu-window" "dmenu-power" "dmenu-docker-images" "battery_status.sh" "emacs.org" "init.el" "dunstrc" "*Compile-Log*" "picom.conf" "index.html" "config.mk" "Untitled<2>" "Untitled<3>" "Untitled" "myinit.org" "config" "muta_microfone" "config.def.h<.dwm>" "block-battery" "dwmbar-powerline" "diminui_volume" "muta_volume" "*scratch*" "*Messages*" "*Async-native-compile-log*" "*Warnings*" "magit-process: .dotfiles" "magit: .dotfiles" "volume_icon.sh" "app.js" "x.c" "x.c.rej" "config.def.h.rej" "config.def.h<st>"))
(setq file-name-history '(#("/home/anderson/teste.py" 0 23 (ivy-index 0)) #("/home/anderson/.dotfiles/.local/bin/dmenu/" 0 42 (ivy-index 2)) #("/home/anderson/.emacs.d/emacs.org" 0 33 (ivy-index 3)) #("/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-docker-lista-funcionando" 0 72 (ivy-index 0)) #("/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-atalhos-programas" 0 65 (ivy-index 0)) #("/home/anderson/.dotfiles/.local/bin/dmenu/dmenu-docker-images" 0 61 (ivy-index 4)) #("/home/anderson/dmenu-docker-compose.sh" 0 38 (ivy-index 2)) #("/home/anderson/.dotfiles/.dwm/config.def.h" 0 42 (ivy-index 0)) "/home/anderson/.emacs.d/init.el" "/home/anderson/.emacs.d/myinit.org" #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/007_PostgreSQL/tabela_funcionarios.sql" 0 99 (ivy-index 9)) #("/home/anderson/.dwm/autostart.sh" 0 32 (ivy-index 0)) "/home/anderson/.dotfiles/.config/dunst/dunstrc" #("/home/anderson/.local/bin/volume_icon.sh" 0 40 (ivy-index 6)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/index.html" 0 102 (ivy-index 7)) #("/home/anderson/git/Educacional/Programa_Desenvolve_Boticario/006_Git_Github/projeto_inicial/app.js" 0 98 (ivy-index 3)) #("/home/anderson/.config/picom.conf" 0 33 (ivy-index 3)) #("/home/anderson/.dotfiles/.dwm/" 0 30 (ivy-index 0)) #("/home/anderson/.dotfiles/.Xresources" 0 36 (ivy-index 0)) #("/home/anderson/.config/st/config.def.h" 0 38 (ivy-index 0)) "~/.dotfiles/.emacs.d/init.el"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq kill-ring '("(setq elpy-rpc-python-command \"python3\")" "(use-package elpy
  :ensure t
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))" "(use-package 'python)." "Elpy..............: Not found (Python), 1.35.0 (Emacs Lisp)" "(use-package pyenv-mode-auto
  :ensure t
  :config
  (let ((workon-home (expand-file-name \"~/.pyenv/versions\")))
  (setenv \"WORKON_HOME\" workon-home)
  (setenv \"VIRTUALENVWRAPPER_HOOK_DIR\" workon-home)))" "/home/anderson/.emacs.d/elpy/rpc-venv/bin
" "/home/anderson/.emacs.d/elpy/rpc-venv/bin/python3" "(setq elpy-rpc-python-command \"python3\")" ";; Seleções Visíveis
(setq transient-mark-mode t)

;; Seleção PC
(require 'pc-select)
(pc-selection-mode)

;; Sobrescrevendo seleções automaticamente
(require 'delsel)
(delete-selection-mode 1)

;; End vai para o fim da linha
(define-key global-map [end] 'end-of-line)

;; Home vai para o comeco da linha
(define-key global-map [home] 'beginning-of-line)

;; CTRL-End vai para o fim do documento
(define-key global-map [C-end] 'end-of-buffer)

;; CTRL-Home vai para o comeco do documento
(define-key global-map [C-home] 'beginning-of-buffer)

;; Backspace
(define-key global-map [backspace]
'delete-backward-char)

;; Delete
(define-key global-map [delete]
'delete-char)" "󰌌" "setxkbmap -query | grep layout | awk '{print$2}'
" "setxkbmap" #("	{ MODKEY,                       XK_w,                           spawn,          SHCMD(\"~/.local/bin/dmenu/dmenu-pulseaudio-sink\") }" 0 1 (fontified t) 1 2 (fontified t c-type c-not-decl) 2 9 (fontified t) 9 10 (fontified t c-type c-not-decl) 10 37 (fontified t) 37 38 (fontified t c-type c-not-decl) 38 70 (fontified t) 70 71 (fontified t c-type c-not-decl) 71 87 (fontified t) 87 129 (fontified t face font-lock-string-face) 129 132 (fontified t)) "keyboard.svg" #("usr/share/icons/ePapirus/16x16/devices/computer-laptop.svg" 0 58 (face font-lock-string-face)) "󰌌" "setxkbmap -model pc105 -layout us" "setxkbmap -model pc105 -layout br -variant abnt2
" #("#!/bin/bash

casa=\"󰍹  Monitor Externo\"
notebook=\"  Notebook\"
noite=\"󱩍 Noite\"
dia=\"󰛨 Dia\"
tabletwaconhdmi=\"󰓶 Tablet Wacon HDMI\"
tabletwaconnotebook=\"󰓶 Tablet Wacon Notebook\"

# Variable passed to dmenu
options=\"$casa\\n$notebook\\n$dia\\n$noite\\n$tabletwaconhdmi\\n$tabletwaconnotebook\"

chosen=\"$(echo -e \"$options\" | dmenu -p \"Scripts de monitor \" )\"
case $chosen in
    $casa)
	xrandr --output HDMI-0 --auto --rotate normal --dpi 96 --output eDP-1-1 --primary --auto --rotate normal --dpi 96 --left-of HDMI-0
	notify-send -t 3000 \"󰡁 HDMI Inserido\" \"Adicionado tela via HDMI\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/computer.svg\"
	;;
    $notebook)
	xrandr --output HDMI-0 --off --output eDP-1-1 --primary --auto --rotate normal --dpi 96
	notify-send -t 3000 \"  Modo Laptop\" \"Alterado tela para modo Laptop\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/computer-laptop.svg\"
	;;
    $dia)
	redshift -P -O 6500
	notify-send -t 3000 \"󰛨 Modo Diurno\" \"Alterado o brilho da tela para o modo diurno\" --icon=\"/usr/share/icons/ePapirus/16x16/actions/colors-chromablue.svg\"
	;;
    $noite)
	redshift -P -O 4500
	notify-send -t 3000 \"󱩍 Modo noturno\" \"Alterado o brilho da tela para o modo noturno\" --icon=\"/usr/share/icons/ePapirus/16x16/actions/redeyes.svg\"
	;;
    $tabletwaconhdmi)
	/home/anderson/.local/bin/mapwacon.sh -d \"Wacom Intuos S Pen stylus\" -s \"HDMI-0\"
	notify-send -t 3000 \"󰓶 Tablet Wacon HDMI\" \"Configurado a área do tablet wacon para a tela HDMI\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/input-tablet.svg\"
	;;
    $tabletwaconnotebook)
	/home/anderson/.local/bin/mapwacon.sh -d \"Wacom Intuos S Pen stylus\" -s \"eDP-1-1\"
	notify-send -t 3000 \"󰓶 Tablet Wacon Notebook\" \"Configurado a área do tablet wacon para a tela do Notebook\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/input-tablet.svg\"
	;;
esac
]
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 7 (fontified t face font-lock-comment-face) 7 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t face font-lock-comment-face) 12 13 (fontified t) 13 17 (fontified t face font-lock-variable-name-face) 17 18 (fontified t) 18 38 (fontified t face font-lock-string-face) 38 39 (fontified t) 39 47 (fontified t face font-lock-variable-name-face) 47 48 (fontified t) 48 61 (fontified t face font-lock-string-face) 61 62 (fontified t) 62 67 (fontified t face font-lock-variable-name-face) 67 68 (fontified t) 68 77 (fontified t face font-lock-string-face) 77 78 (fontified t) 78 81 (fontified t face font-lock-variable-name-face) 81 82 (fontified t) 82 89 (fontified t face font-lock-string-face) 89 90 (fontified t) 90 105 (fontified t face font-lock-variable-name-face) 105 106 (fontified t) 106 127 (fontified t face font-lock-string-face) 127 128 (fontified t) 128 147 (fontified t face font-lock-variable-name-face) 147 148 (fontified t) 148 173 (fontified t face font-lock-string-face) 173 175 (fontified t) 175 177 (fontified t face font-lock-comment-delimiter-face) 177 202 (fontified t face font-lock-comment-face) 202 209 (fontified t face font-lock-variable-name-face) 209 210 (fontified t) 210 282 (fontified t face font-lock-string-face) 282 284 (fontified t) 284 290 (fontified t face font-lock-variable-name-face) 290 291 (fontified t) 291 294 (fontified t face font-lock-string-face) 294 302 (fontified t face sh-quoted-exec) 302 303 (fontified t syntax-table (1) face sh-quoted-exec) 303 311 (fontified t face sh-quoted-exec) 311 312 (fontified t syntax-table (1) face sh-quoted-exec) 312 324 (fontified t face sh-quoted-exec) 324 325 (fontified t syntax-table (1) face sh-quoted-exec) 325 344 (fontified t face sh-quoted-exec) 344 345 (fontified t syntax-table (1) face sh-quoted-exec) 345 346 (fontified t face sh-quoted-exec) 346 348 (fontified t face font-lock-string-face) 348 349 (fontified t) 349 353 (fontified t face font-lock-keyword-face) 353 355 (fontified t) 355 361 (fontified t face font-lock-variable-name-face) 361 362 (fontified t face font-lock-keyword-face) 362 364 (fontified t syntax-multiline t face font-lock-keyword-face) 364 370 (fontified t syntax-multiline t) 370 374 (fontified t syntax-multiline t face font-lock-variable-name-face) 374 375 (fontified t syntax-multiline t syntax-table (1)) 375 529 (fontified t) 529 546 (fontified t face font-lock-string-face) 546 547 (fontified t) 547 573 (fontified t face font-lock-string-face) 573 581 (fontified t) 581 635 (fontified t face font-lock-string-face) 635 637 (fontified t) 637 645 (fontified t syntax-multiline t) 645 653 (fontified t syntax-multiline t face font-lock-variable-name-face) 653 654 (fontified t syntax-multiline t syntax-table (1)) 654 765 (fontified t) 765 781 (fontified t face font-lock-string-face) 781 782 (fontified t) 782 814 (fontified t face font-lock-string-face) 814 822 (fontified t) 822 883 (fontified t face font-lock-string-face) 883 885 (fontified t) 885 893 (fontified t syntax-multiline t) 893 896 (fontified t syntax-multiline t face font-lock-variable-name-face) 896 897 (fontified t syntax-multiline t syntax-table (1)) 897 940 (fontified t) 940 955 (fontified t face font-lock-string-face) 955 956 (fontified t) 956 1002 (fontified t face font-lock-string-face) 1002 1010 (fontified t) 1010 1073 (fontified t face font-lock-string-face) 1073 1075 (fontified t) 1075 1083 (fontified t syntax-multiline t) 1083 1088 (fontified t syntax-multiline t face font-lock-variable-name-face) 1088 1089 (fontified t syntax-multiline t syntax-table (1)) 1089 1132 (fontified t) 1132 1148 (fontified t face font-lock-string-face) 1148 1149 (fontified t) 1149 1196 (fontified t face font-lock-string-face) 1196 1204 (fontified t) 1204 1257 (fontified t face font-lock-string-face) 1257 1259 (fontified t) 1259 1267 (fontified t syntax-multiline t) 1267 1282 (fontified t syntax-multiline t face font-lock-variable-name-face) 1282 1283 (fontified t syntax-multiline t syntax-table (1)) 1283 1326 (fontified t) 1326 1353 (fontified t face font-lock-string-face) 1353 1357 (fontified t) 1357 1365 (fontified t face font-lock-string-face) 1365 1387 (fontified t) 1387 1408 (fontified t face font-lock-string-face) 1408 1409 (fontified t) 1409 1462 (fontified t face font-lock-string-face) 1462 1470 (fontified t) 1470 1500 (fontified t face font-lock-string-face) 1500 1528 (fontified t face font-lock-string-face) 1528 1529 (fontified t) 1529 1530 (fontified t) 1530 1538 (fontified t syntax-multiline t) 1538 1557 (fontified t syntax-multiline t face font-lock-variable-name-face) 1557 1558 (fontified t syntax-multiline t syntax-table (1)) 1558 1601 (fontified t) 1601 1628 (fontified t face font-lock-string-face) 1628 1632 (fontified t) 1632 1641 (fontified t face font-lock-string-face) 1641 1663 (fontified t) 1663 1688 (fontified t face font-lock-string-face) 1688 1689 (fontified t) 1689 1749 (fontified t face font-lock-string-face) 1749 1757 (fontified t) 1757 1815 (fontified t face font-lock-string-face) 1815 1820 (fontified t) 1820 1824 (fontified t face font-lock-keyword-face) 1824 1827 (fontified t)) #("#!/bin/bash

casa=\"󰍹  Monitor Externo\"
notebook=\"  Notebook\"
noite=\"󱩍 Noite\"
dia=\"󰛨 Dia\"
tabletwaconhdmi=\"󰓶 Tablet Wacon HDMI\"
tabletwaconnotebook=\"󰓶 Tablet Wacon Notebook\"

# Variable passed to dmenu
options=\"$casa\\n$notebook\\n$dia\\n$noite\\n$tabletwaconhdmi\\n$tabletwaconnotebook\"

chosen=\"$(echo -e \"$options\" | dmenu -p \"Scripts de monitor \" )\"
case $chosen in
    $casa)
	xrandr --output HDMI-0 --auto --rotate normal --dpi 96 --output eDP-1-1 --primary --auto --rotate normal --dpi 96 --left-of HDMI-0
	notify-send -t 3000 \"󰡁 HDMI Inserido\" \"Adicionado tela via HDMI\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/computer.svg\"
	;;
    $notebook)
	xrandr --output HDMI-0 --off --output eDP-1-1 --primary --auto --rotate normal --dpi 96
	notify-send -t 3000 \"  Modo Laptop\" \"Alterado tela para modo Laptop\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/computer-laptop.svg\"
	;;
    $dia)
	redshift -P -O 6500
	notify-send -t 3000 \"󰛨 Modo Diurno\" \"Alterado o brilho da tela para o modo diurno\" --icon=\"/usr/share/icons/ePapirus/16x16/actions/colors-chromablue.svg\"
	;;
    $noite)
	redshift -P -O 4500
	notify-send -t 3000 \"󱩍 Modo noturno\" \"Alterado o brilho da tela para o modo noturno\" --icon=\"/usr/share/icons/ePapirus/16x16/actions/redeyes.svg\"
	;;
    $tabletwaconhdmi)
	/home/anderson/.local/bin/mapwacon.sh -d \"Wacom Intuos S Pen stylus\" -s \"HDMI-0\"
	notify-send -t 3000 \"󰓶 Tablet Wacon HDMI\" \"Configurado a área do tablet wacon para a tela HDMI\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/input-tablet.svg\"
	;;
    $tabletwaconnotebook)
	/home/anderson/.local/bin/mapwacon.sh -d \"Wacom Intuos S Pen stylus\" -s \"eDP-1-1\"
	notify-send -t 3000 \"󰓶 Tablet Wacon Notebook\" \"Configurado a área do tablet wacon para a tela do Notebook\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/input-tablet.svg\"
	;;
esac
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 7 (face font-lock-comment-face fontified t) 7 11 (face font-lock-keyword-face fontified t) 11 12 (face font-lock-comment-face fontified t) 12 13 (fontified t) 13 17 (face font-lock-variable-name-face fontified t) 17 18 (fontified t) 18 38 (face font-lock-string-face fontified t) 38 39 (fontified t) 39 47 (face font-lock-variable-name-face fontified t) 47 48 (fontified t) 48 61 (face font-lock-string-face fontified t) 61 62 (fontified t) 62 67 (face font-lock-variable-name-face fontified t) 67 68 (fontified t) 68 77 (face font-lock-string-face fontified t) 77 78 (fontified t) 78 81 (face font-lock-variable-name-face fontified t) 81 82 (fontified t) 82 89 (face font-lock-string-face fontified t) 89 90 (fontified t) 90 105 (face font-lock-variable-name-face fontified t) 105 106 (fontified t) 106 127 (face font-lock-string-face fontified t) 127 128 (fontified t) 128 147 (face font-lock-variable-name-face fontified t) 147 148 (fontified t) 148 173 (face font-lock-string-face fontified t) 173 175 (fontified t) 175 177 (face font-lock-comment-delimiter-face fontified t) 177 202 (face font-lock-comment-face fontified t) 202 209 (face font-lock-variable-name-face fontified t) 209 210 (fontified t) 210 282 (face font-lock-string-face fontified t) 282 284 (fontified t) 284 290 (face font-lock-variable-name-face fontified t) 290 291 (fontified t) 291 294 (face font-lock-string-face fontified t) 294 302 (face sh-quoted-exec fontified t) 302 303 (face sh-quoted-exec syntax-table (1) fontified t) 303 311 (face sh-quoted-exec fontified t) 311 312 (face sh-quoted-exec syntax-table (1) fontified t) 312 324 (face sh-quoted-exec fontified t) 324 325 (face sh-quoted-exec syntax-table (1) fontified t) 325 344 (face sh-quoted-exec fontified t) 344 345 (face sh-quoted-exec syntax-table (1) fontified t) 345 346 (face sh-quoted-exec fontified t) 346 348 (face font-lock-string-face fontified t) 348 349 (fontified t) 349 353 (face font-lock-keyword-face fontified t) 353 355 (fontified t) 355 361 (face font-lock-variable-name-face fontified t) 361 362 (face font-lock-keyword-face fontified t) 362 364 (face font-lock-keyword-face syntax-multiline t fontified t) 364 370 (syntax-multiline t fontified t) 370 374 (face font-lock-variable-name-face syntax-multiline t fontified t) 374 375 (syntax-table (1) syntax-multiline t fontified t) 375 529 (fontified t) 529 546 (face font-lock-string-face fontified t) 546 547 (fontified t) 547 573 (face font-lock-string-face fontified t) 573 581 (fontified t) 581 635 (face font-lock-string-face fontified t) 635 637 (fontified t) 637 645 (syntax-multiline t fontified t) 645 653 (face font-lock-variable-name-face syntax-multiline t fontified t) 653 654 (syntax-table (1) syntax-multiline t fontified t) 654 765 (fontified t) 765 781 (face font-lock-string-face fontified t) 781 782 (fontified t) 782 814 (face font-lock-string-face fontified t) 814 822 (fontified t) 822 883 (face font-lock-string-face fontified t) 883 885 (fontified t) 885 893 (syntax-multiline t fontified t) 893 896 (face font-lock-variable-name-face syntax-multiline t fontified t) 896 897 (syntax-table (1) syntax-multiline t fontified t) 897 940 (fontified t) 940 955 (face font-lock-string-face fontified t) 955 956 (fontified t) 956 1002 (face font-lock-string-face fontified t) 1002 1010 (fontified t) 1010 1073 (face font-lock-string-face fontified t) 1073 1075 (fontified t) 1075 1083 (syntax-multiline t fontified t) 1083 1088 (face font-lock-variable-name-face syntax-multiline t fontified t) 1088 1089 (syntax-table (1) syntax-multiline t fontified t) 1089 1132 (fontified t) 1132 1148 (face font-lock-string-face fontified t) 1148 1149 (fontified t) 1149 1196 (face font-lock-string-face fontified t) 1196 1204 (fontified t) 1204 1257 (face font-lock-string-face fontified t) 1257 1259 (fontified t) 1259 1267 (syntax-multiline t fontified t) 1267 1282 (face font-lock-variable-name-face syntax-multiline t fontified t) 1282 1283 (syntax-table (1) syntax-multiline t fontified t) 1283 1326 (fontified t) 1326 1353 (face font-lock-string-face fontified t) 1353 1357 (fontified t) 1357 1365 (face font-lock-string-face fontified t) 1365 1387 (fontified t) 1387 1408 (face font-lock-string-face fontified t) 1408 1409 (fontified t) 1409 1462 (face font-lock-string-face fontified t) 1462 1470 (fontified t) 1470 1500 (face font-lock-string-face fontified t) 1500 1528 (face font-lock-string-face fontified t) 1528 1529 (fontified t) 1529 1530 (fontified t) 1530 1538 (syntax-multiline t fontified t) 1538 1557 (face font-lock-variable-name-face syntax-multiline t fontified t) 1557 1558 (syntax-table (1) syntax-multiline t fontified t) 1558 1601 (fontified t) 1601 1628 (face font-lock-string-face fontified t) 1628 1632 (fontified t) 1632 1641 (face font-lock-string-face fontified t) 1641 1663 (fontified t) 1663 1688 (face font-lock-string-face fontified t) 1688 1689 (fontified t) 1689 1749 (face font-lock-string-face fontified t) 1749 1757 (fontified t) 1757 1815 (face font-lock-string-face fontified t) 1815 1820 (fontified t) 1820 1824 (face font-lock-keyword-face fontified t) 1824 1825 (fontified t)) "/home/anderson/.local/bin/mapwacon.sh
" "(use-package excorporate :after org-agenda)

;; Track whether we've turned excorporate on or not
(setq my-calendar-init nil)

;; setup a callback to cleanup the diary buffers for use below
(defun my-diary-cleanup ()
  (when (get-buffer \"diary\")
    (kill-buffer \"diary\"))
  (when (get-buffer \"diary-excorporate-transient\")
    (kill-buffer \"diary-excorporate-transient\"))
  (when (get-buffer \"diary-excorporate-today\")
    (kill-buffer \"diary-excorporate-today\"))
  (org-agenda-maybe-redo)
  (message \"Cleaned up diary buffers\"))  


;; Load today's org agenda with excorporate. 
;; excorporate uses the fsm (finite-state-machine) to do most operations aysnc
;; Wired in via advice below
(defun my-agenda-update-diary (&optional args)
  \"call excorporate to update the diary for today\"

  ;; onetime setup
  (when (not my-calendar-init)
    (progn
      (message \"excorporate setup starting\")
      ;; turn off diarying for this call
      (excorporate)
      (message \"excorporate setup done\")
      (setq my-calendar-init t)))
  
  ;; skip if the file was updated within the last minute
  (message \"my diary update started %s\" (current-time-string))
  (when (> (time-convert (time-subtract (current-time) (file-attribute-modification-time
                            (file-attributes \"~/.emacs.d/excorporate/diary-excorporate-today\"))) 'integer) 60)
    
    (exco-diary-diary-advice (calendar-current-date) (calendar-current-date) #'my-diary-cleanup)))

;; Setup advice so the agenda update runs before the org-agenda command
(advice-add 'org-agenda :before #'my-agenda-update-diary)

;; import emacs calendar/diary entries in org
(setq org-agenda-include-diary t)" "A9w@arM4AY3u*%" "INSERT INTO aluno (primeiro_nome, ultimo_nome, data_nascimento) VALUES (
	'Vinicius', 'Dias', '1997-10-15'
), (
	'Patricia', 'Freitas', '1986-10-25'
), (
	'Diogo', 'Oliveira', '1984-08-27'
), (
	'Maria', 'Rosa', '1985-01-01'
);

INSERT INTO categoria (nome) VALUES ('Front-end'), ('Programação'), ('Bancos de dados'), ('Data Science');

INSERT INTO curso (nome, categoria_id) VALUES
	('HTML', 1),
	('CSS', 1),
	('JS', 1),
	('PHP', 2),
	('Java', 2),
	('C++', 2),
	('PostgreSQL', 3),
	('MySQL', 3),
	('Oracle', 3),
	('SQL Server', 3),
	('SQLite', 3),
	('Pandas', 4),
	('Machine Learning', 4),
	('Power BI', 4);
	
INSERT INTO aluno_curso VALUES (1, 4), (1, 11), (2, 1), (2, 2), (3, 4), (3, 3), (4, 4), (4, 6), (4, 5);" #("CREATE DATABASE alura;

CREATE TABLE aluno (
    id SERIAL PRIMARY KEY,
	primeiro_nome VARCHAR(255) NOT NULL,
	ultimo_nome VARCHAR(255) NOT NULL,
	data_nascimento DATE NOT NULL
);

CREATE TABLE categoria (
    id SERIAL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE curso (
    id SERIAL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL,
	categoria_id INTEGER NOT NULL REFERENCES categoria(id)
);

CREATE TABLE aluno_curso (
	aluno_id INTEGER NOT NULL REFERENCES aluno(id),
	curso_id INTEGER NOT NULL REFERENCES curso(id),
	PRIMARY KEY (aluno_id, curso_id)
);

" 0 6 (fontified t face font-lock-keyword-face) 6 24 (fontified t) 24 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t) 31 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 42 (fontified t face font-lock-function-name-face) 42 59 (fontified t) 59 66 (fontified t face font-lock-keyword-face) 66 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 87 (fontified t) 87 94 (fontified t face font-lock-type-face) 94 100 (fontified t) 100 103 (fontified t face font-lock-keyword-face) 103 104 (fontified t) 104 108 (fontified t face font-lock-keyword-face) 108 123 (fontified t) 123 130 (fontified t face font-lock-type-face) 130 136 (fontified t) 136 139 (fontified t face font-lock-keyword-face) 139 140 (fontified t) 140 144 (fontified t face font-lock-keyword-face) 144 163 (fontified t) 163 167 (fontified t face font-lock-type-face) 167 168 (fontified t) 168 171 (fontified t face font-lock-keyword-face) 171 172 (fontified t) 172 176 (fontified t face font-lock-keyword-face) 176 181 (fontified t) 181 187 (fontified t face font-lock-keyword-face) 187 188 (fontified t) 188 193 (fontified t face font-lock-keyword-face) 193 194 (fontified t) 194 203 (fontified t face font-lock-function-name-face) 203 220 (fontified t) 220 227 (fontified t face font-lock-keyword-face) 227 228 (fontified t) 228 231 (fontified t face font-lock-keyword-face) 231 239 (fontified t) 239 246 (fontified t face font-lock-type-face) 246 252 (fontified t) 252 255 (fontified t face font-lock-keyword-face) 255 256 (fontified t) 256 260 (fontified t face font-lock-keyword-face) 260 261 (fontified t) 261 267 (fontified t face font-lock-keyword-face) 267 272 (fontified t) 272 278 (fontified t face font-lock-keyword-face) 278 279 (fontified t) 279 284 (fontified t face font-lock-keyword-face) 284 285 (fontified t) 285 290 (fontified t face font-lock-function-name-face) 290 307 (fontified t) 307 314 (fontified t face font-lock-keyword-face) 314 315 (fontified t) 315 318 (fontified t face font-lock-keyword-face) 318 326 (fontified t) 326 333 (fontified t face font-lock-type-face) 333 339 (fontified t) 339 342 (fontified t face font-lock-keyword-face) 342 343 (fontified t) 343 347 (fontified t face font-lock-keyword-face) 347 363 (fontified t) 363 370 (fontified t face font-lock-type-face) 370 371 (fontified t) 371 374 (fontified t face font-lock-keyword-face) 374 375 (fontified t) 375 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 390 (fontified t face font-lock-keyword-face) 390 409 (fontified t) 409 415 (fontified t face font-lock-keyword-face) 415 416 (fontified t) 416 421 (fontified t face font-lock-keyword-face) 421 422 (fontified t) 422 433 (fontified t face font-lock-function-name-face) 433 446 (fontified t) 446 453 (fontified t face font-lock-type-face) 453 454 (fontified t) 454 457 (fontified t face font-lock-keyword-face) 457 458 (fontified t) 458 462 (fontified t face font-lock-keyword-face) 462 463 (fontified t) 463 473 (fontified t face font-lock-keyword-face) 473 495 (fontified t) 495 502 (fontified t face font-lock-type-face) 502 503 (fontified t) 503 506 (fontified t face font-lock-keyword-face) 506 507 (fontified t) 507 511 (fontified t face font-lock-keyword-face) 511 512 (fontified t) 512 522 (fontified t face font-lock-keyword-face) 522 535 (fontified t) 535 542 (fontified t face font-lock-keyword-face) 542 543 (fontified t) 543 546 (fontified t face font-lock-keyword-face) 546 572 (fontified t)) "docker container list -s -a --format \"table {{.ID}}\\t{{.Names}}\\t{{.Status}}\\t{{.Networks}}\\t{{.Size}}\" |dmenu
" "A9w@arM4AY3u*%" #("	 notify-send -t 3000 \" Container Up\" \"Foi instanciado o containert curso-alura-postgres-desenvolve\" --icon=\"/usr/share/icons/ePapirus/16x16/actions/code-block.svg\"" 0 2 (fontified t) 2 22 (fontified t) 22 23 (face font-lock-string-face fontified t) 23 24 (face font-lock-string-face rear-nonsticky t fontified t) 24 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (fontified t) 39 101 (face font-lock-string-face fontified t) 101 109 (fontified t) 109 110 (face font-lock-string-face fontified t) 110 150 (face font-lock-string-face fontified t) 150 163 (face font-lock-string-face fontified t) 163 164 (face font-lock-string-face rear-nonsticky t fontified t) 164 165 (face font-lock-string-face rear-nonsticky t fontified t)) "code-block.svg" #("/usr/share/icons/ePapirus/16x16/devices/" 0 40 (face font-lock-string-face fontified t)) "" #("	notify-send -t 3000 \"󰡁 HDMI Inserido\" \"Adicionado tela via HDMI\" --icon=\"/usr/share/icons/ePapirus/16x16/devices/computer.svg\"" 0 21 (fontified t) 21 38 (face font-lock-string-face fontified t) 38 39 (fontified t) 39 65 (face font-lock-string-face fontified t) 65 73 (fontified t) 73 127 (face font-lock-string-face fontified t)) "" #("SUDO_ASKPASS=/usr/bin/ssh-askpass sudo -A" 0 12 (fontified t face font-lock-variable-name-face) 12 41 (fontified t)) #("docker container start curso-alura-postgres-desenvolve" 0 54 (fontified t face font-lock-comment-face)) #("	{ MODKEY|ShiftMask,             XK_a,                           spawn,          SHCMD(\"~/.local/bin/dmenu/dmenu-docker-images\") }," 0 1 (fontified t) 1 2 (fontified t c-type c-not-decl) 2 19 (fontified t) 19 20 (fontified t c-type c-not-decl) 20 37 (fontified t) 37 38 (fontified t c-type c-not-decl) 38 70 (fontified t) 70 71 (fontified t c-type c-not-decl) 71 87 (fontified t) 87 127 (fontified t face font-lock-string-face) 127 131 (fontified t)) "SUDO_ASKPASS=/usr/bin/ssh-askpass sudo -A" "/usr/bin/ssh-askpass" "SUDO_ASKPASS=" " 4617  sudo docker container start curso-alura-postgres-desenvolve
 4618  sudo docker container start pgadmin-docker
" #("#!/bin/bash

chrome=\" Chrome\"
thunar=\" Thunar\"
emacs=\" Emacs\"
spotify=\" Spotify\"
spotube=\" Spotube\"
telegram=\" Telegram\"
discord=\"󰙯 Discord\"
obsidian=\" Obsidian\"
openboard=\"󰢐 OpenBoard\"
rstudio=\" R-Studio\"
drawio=\"󰽉 Draw.io\"
brmodelo=\" brModelo\"

# Variable passed to dmenu
options=\"$chrome\\n$thunar\\n$emacs\\n$spotify\\n$spotube\\n$telegram\\n$discord\\n$obsidian\\n$openboard\\n$rstudio\\n$drawio\\n$brmodelo\"

chosen=\"$(echo -e \"$options\" | dmenu -p \"Scripts de monitor \" )\"
case $chosen in
     $chrome)
	google-chrome-stable
	;;
     $thunar)
	thunar
	;;
     $emacs)
	 emacs
	;;
     $spotify)
	 flatpak run com.spotify.Client
	;;
     $spotube)
	 spotube
	;;
     $telegram)
	 telegram-desktop
	;;
     $discord)
	 flatpak run com.discordapp.Discord
	;;
     $obsidian)
	 flatpak run md.obsidian.Obsidian
	;;
     $openboard)
	 openboard
	;;
     $rstudio)
	 rstudio
	;;
     $drawio)
	 flatpak run com.jgraph.drawio.desktop
	 ;;
     $brmodelo)
	 java -jar ~/.programas/brmodelo/brModelo.jar
	 ;;
esac
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 7 (face font-lock-comment-face fontified t) 7 11 (face font-lock-keyword-face fontified t) 11 12 (face font-lock-comment-face fontified t) 12 13 (fontified t) 13 19 (face font-lock-variable-name-face fontified t) 19 20 (fontified t) 20 30 (face font-lock-string-face fontified t) 30 31 (fontified t) 31 37 (face font-lock-variable-name-face fontified t) 37 38 (fontified t) 38 48 (face font-lock-string-face fontified t) 48 49 (fontified t) 49 54 (face font-lock-variable-name-face fontified t) 54 55 (fontified t) 55 64 (face font-lock-string-face fontified t) 64 65 (fontified t) 65 72 (face font-lock-variable-name-face fontified t) 72 73 (fontified t) 73 84 (face font-lock-string-face fontified t) 84 85 (fontified t) 85 92 (face font-lock-variable-name-face fontified t) 92 93 (fontified t) 93 104 (face font-lock-string-face fontified t) 104 105 (fontified t) 105 113 (face font-lock-variable-name-face fontified t) 113 114 (fontified t) 114 126 (face font-lock-string-face fontified t) 126 127 (fontified t) 127 134 (face font-lock-variable-name-face fontified t) 134 135 (fontified t) 135 146 (face font-lock-string-face fontified t) 146 147 (fontified t) 147 155 (face font-lock-variable-name-face fontified t) 155 156 (fontified t) 156 168 (face font-lock-string-face fontified t) 168 169 (fontified t) 169 178 (face font-lock-variable-name-face fontified t) 178 179 (fontified t) 179 192 (face font-lock-string-face fontified t) 192 193 (fontified t) 193 200 (face font-lock-variable-name-face fontified t) 200 201 (fontified t) 201 213 (face font-lock-string-face fontified t) 213 214 (fontified t) 214 220 (face font-lock-variable-name-face fontified t) 220 221 (fontified t) 221 232 (face font-lock-string-face fontified t) 232 233 (fontified t) 233 241 (face font-lock-variable-name-face fontified t) 241 242 (fontified t) 242 254 (face font-lock-string-face fontified t) 254 256 (fontified t) 256 258 (face font-lock-comment-delimiter-face fontified t) 258 283 (face font-lock-comment-face fontified t) 283 290 (face font-lock-variable-name-face fontified t) 290 291 (fontified t) 291 411 (face font-lock-string-face fontified t) 411 413 (fontified t) 413 419 (face font-lock-variable-name-face fontified t) 419 420 (fontified t) 420 423 (face font-lock-string-face fontified t) 423 431 (face sh-quoted-exec fontified t) 431 432 (face sh-quoted-exec syntax-table (1) fontified t) 432 440 (face sh-quoted-exec fontified t) 440 441 (face sh-quoted-exec syntax-table (1) fontified t) 441 453 (face sh-quoted-exec fontified t) 453 454 (face sh-quoted-exec syntax-table (1) fontified t) 454 473 (face sh-quoted-exec fontified t) 473 474 (face sh-quoted-exec syntax-table (1) fontified t) 474 475 (face sh-quoted-exec fontified t) 475 477 (face font-lock-string-face fontified t) 477 478 (fontified t) 478 482 (face font-lock-keyword-face fontified t) 482 484 (fontified t) 484 490 (face font-lock-variable-name-face fontified t) 490 491 (face font-lock-keyword-face fontified t) 491 493 (face font-lock-keyword-face syntax-multiline t fontified t) 493 500 (syntax-multiline t fontified t) 500 506 (face font-lock-variable-name-face syntax-multiline t fontified t) 506 507 (syntax-table (1) syntax-multiline t fontified t) 507 531 (fontified t) 531 540 (syntax-multiline t fontified t) 540 546 (face font-lock-variable-name-face syntax-multiline t fontified t) 546 547 (syntax-table (1) syntax-multiline t fontified t) 547 557 (fontified t) 557 566 (syntax-multiline t fontified t) 566 571 (face font-lock-variable-name-face syntax-multiline t fontified t) 571 572 (syntax-table (1) syntax-multiline t fontified t) 572 582 (fontified t) 582 591 (syntax-multiline t fontified t) 591 598 (face font-lock-variable-name-face syntax-multiline t fontified t) 598 599 (syntax-table (1) syntax-multiline t fontified t) 599 634 (fontified t) 634 643 (syntax-multiline t fontified t) 643 650 (face font-lock-variable-name-face syntax-multiline t fontified t) 650 651 (syntax-table (1) syntax-multiline t fontified t) 651 663 (fontified t) 663 672 (syntax-multiline t fontified t) 672 680 (face font-lock-variable-name-face syntax-multiline t fontified t) 680 681 (syntax-table (1) syntax-multiline t fontified t) 681 702 (fontified t) 702 711 (syntax-multiline t fontified t) 711 718 (face font-lock-variable-name-face syntax-multiline t fontified t) 718 719 (syntax-table (1) syntax-multiline t fontified t) 719 758 (fontified t) 758 767 (syntax-multiline t fontified t) 767 775 (face font-lock-variable-name-face syntax-multiline t fontified t) 775 776 (syntax-table (1) syntax-multiline t fontified t) 776 813 (fontified t) 813 822 (syntax-multiline t fontified t) 822 831 (face font-lock-variable-name-face syntax-multiline t fontified t) 831 832 (syntax-table (1) syntax-multiline t fontified t) 832 846 (fontified t) 846 855 (syntax-multiline t fontified t) 855 862 (face font-lock-variable-name-face syntax-multiline t fontified t) 862 863 (syntax-table (1) syntax-multiline t fontified t) 863 875 (fontified t) 875 884 (syntax-multiline t fontified t) 884 890 (face font-lock-variable-name-face syntax-multiline t fontified t) 890 891 (syntax-table (1) syntax-multiline t fontified t) 891 934 (fontified t) 934 943 (syntax-multiline t fontified t) 943 951 (face font-lock-variable-name-face syntax-multiline t fontified t) 951 952 (syntax-table (1) syntax-multiline t fontified t) 952 1005 (fontified t) 1005 1009 (face font-lock-keyword-face fontified t) 1009 1010 (fontified t)) "A9w@arM4AY3u*%" #("	 java -jar ~/.programas/brmodelo/brModelo.jar" 0 25 (fontified t) 25 46 (fontified t)) "" #("SELECT nome,
       COUNT(id)
    FROM funcionarios
    GROUP BY nome
    HAVING COUNT(id) > 1;
" 0 6 (fontified t face font-lock-keyword-face) 6 20 (fontified t) 20 25 (fontified t face font-lock-builtin-face) 25 34 (fontified t) 34 38 (fontified t face font-lock-keyword-face) 38 56 (fontified t) 56 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 64 (fontified t face font-lock-keyword-face) 64 70 (fontified t) 70 74 (fontified t) 74 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 86 (fontified t face font-lock-builtin-face) 86 94 (fontified t) 94 95 (fontified t rear-nonsticky t) 95 96 (fontified t)) "SELECT nome,
       COUNT(id)
    FROM funcionarios
    GROUP BY nome
    HAVING COUNT(id) > 1;" #("SELECT curso.nome,
       COUNT(aluno.id)
FROM CURSO
     LEFT JOIN aluno_curso ON aluno_curso.curso_id = curso.id
     LEFT JOIN aluno ON aluno.id = aluno_curso.aluno_id
GROUP BY 1
HAVING COUNT(aluno.id) = 0
" 0 6 (fontified t face font-lock-keyword-face) 6 13 (fontified t) 13 19 (fontified t) 19 26 (fontified t) 26 31 (fontified t face font-lock-builtin-face) 31 41 (fontified t) 41 42 (fontified t) 42 46 (fontified t face font-lock-keyword-face) 46 53 (fontified t) 53 58 (fontified t) 58 62 (fontified t face font-lock-keyword-face) 62 63 (fontified t) 63 67 (fontified t face font-lock-keyword-face) 67 80 (fontified t) 80 82 (fontified t face font-lock-keyword-face) 82 115 (fontified t) 115 120 (fontified t) 120 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 129 (fontified t face font-lock-keyword-face) 129 136 (fontified t) 136 138 (fontified t face font-lock-keyword-face) 138 170 (fontified t) 170 171 (fontified t) 171 176 (fontified t face font-lock-keyword-face) 176 177 (fontified t) 177 179 (fontified t face font-lock-keyword-face) 179 182 (fontified t) 182 188 (fontified t face font-lock-keyword-face) 188 189 (fontified t) 189 194 (fontified t face font-lock-builtin-face) 194 208 (fontified t) 208 209 (fontified t)) #("SELECT curso.nome,
       COUNT(aluno.id)
FROM CURSO
LEFT JOIN aluno_curso ON aluno_curso.curso_id = curso.id
LEFT JOIN aluno ON aluno.id = aluno_curso.aluno_id
GROUP BY 1" 0 6 (fontified t face font-lock-keyword-face) 6 13 (fontified t) 13 19 (fontified t) 19 26 (fontified t) 26 31 (fontified t face font-lock-builtin-face) 31 41 (fontified t) 41 42 (fontified t) 42 46 (fontified t face font-lock-keyword-face) 46 53 (fontified t) 53 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 62 (fontified t face font-lock-keyword-face) 62 75 (fontified t) 75 77 (fontified t face font-lock-keyword-face) 77 110 (fontified t) 110 114 (fontified t face font-lock-keyword-face) 114 115 (fontified t) 115 119 (fontified t face font-lock-keyword-face) 119 126 (fontified t) 126 128 (fontified t face font-lock-keyword-face) 128 160 (fontified t) 160 161 (fontified t) 161 166 (fontified t face font-lock-keyword-face) 166 167 (fontified t) 167 169 (fontified t face font-lock-keyword-face) 169 171 (fontified t)) #("SELECT curso.nome,
       COUNT(aluno.id)
 FROM aluno
      JOIN aluno_curso ON aluno.id = aluno_curso.aluno_id
      JOIN curso ON curso.id = aluno_curso.curso_id
GROUP BY 1
ORDER BY 1" 0 6 (fontified t face font-lock-keyword-face) 6 13 (fontified t) 13 19 (fontified t) 19 26 (fontified t) 26 31 (fontified t face font-lock-builtin-face) 31 42 (fontified t) 42 43 (fontified t) 43 47 (fontified t face font-lock-keyword-face) 47 54 (fontified t) 54 60 (fontified t) 60 64 (fontified t face font-lock-keyword-face) 64 77 (fontified t) 77 79 (fontified t face font-lock-keyword-face) 79 112 (fontified t) 112 118 (fontified t) 118 122 (fontified t face font-lock-keyword-face) 122 129 (fontified t) 129 131 (fontified t face font-lock-keyword-face) 131 164 (fontified t) 164 169 (fontified t face font-lock-keyword-face) 169 170 (fontified t) 170 172 (fontified t face font-lock-keyword-face) 172 175 (fontified t) 175 180 (fontified t face font-lock-keyword-face) 180 181 (fontified t) 181 183 (fontified t face font-lock-keyword-face) 183 185 (fontified t)) #("
select
       nome,
       sobrenome
from funcionarios
group by nome, sobrenome
order by nome;
" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 15 (fontified t) 15 21 (fontified t) 21 28 (fontified t) 28 38 (fontified t) 38 42 (fontified t face font-lock-keyword-face) 42 56 (fontified t) 56 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 64 (fontified t face font-lock-keyword-face) 64 65 (fontified t) 65 80 (fontified t) 80 81 (fontified t) 81 86 (fontified t face font-lock-keyword-face) 86 87 (fontified t) 87 89 (fontified t face font-lock-keyword-face) 89 90 (fontified t) 90 94 (fontified t) 94 95 (fontified t) 95 96 (fontified t)) #("INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M001', 'Diogo', 'Mascarenhas');
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 11 (fontified t face font-lock-keyword-face) 11 54 (fontified t) 54 60 (fontified t face font-lock-keyword-face) 60 62 (fontified t) 62 68 (fontified t face font-lock-string-face) 68 70 (fontified t) 70 77 (fontified t face font-lock-string-face) 77 79 (fontified t) 79 92 (fontified t face font-lock-string-face) 92 95 (fontified t)) #("select distinct nome
from funcionarios
order by nome;
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 21 (fontified t) 21 25 (fontified t face font-lock-keyword-face) 25 39 (fontified t) 39 44 (fontified t face font-lock-keyword-face) 44 45 (fontified t) 45 47 (fontified t face font-lock-keyword-face) 47 48 (fontified t) 48 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t)) #("SELECT
	COUNT(id),
	SUM(ID),
	MAX(ID),
	MIN(ID),
	ROUND(AVG(ID),2)
FROM funcionarios;
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t) 8 13 (fontified t face font-lock-builtin-face) 13 19 (fontified t) 19 20 (fontified t) 20 23 (fontified t face font-lock-builtin-face) 23 29 (fontified t) 29 30 (fontified t) 30 33 (fontified t face font-lock-builtin-face) 33 39 (fontified t) 39 40 (fontified t) 40 43 (fontified t face font-lock-builtin-face) 43 49 (fontified t) 49 56 (fontified t) 56 59 (fontified t face font-lock-builtin-face) 59 66 (fontified t) 66 67 (fontified t) 67 71 (fontified t face font-lock-keyword-face) 71 86 (fontified t)) #("
SELECT *
FROM FUNCIONARIOS
ORDER BY id
LIMIT 5
OFFSET 4;" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 10 (fontified t) 10 14 (fontified t face font-lock-keyword-face) 14 28 (fontified t) 28 33 (fontified t face font-lock-keyword-face) 33 34 (fontified t) 34 36 (fontified t face font-lock-keyword-face) 36 39 (fontified t) 39 40 (fontified t) 40 45 (fontified t face font-lock-keyword-face) 45 48 (fontified t) 48 56 (fontified t) 56 57 (fontified t)) "SELECT 
        aluno.id as aluno_id,
        aluno.nome as \"Nome do Aluno\",
        curso.id as \"curso_id\",
        curso.nome as \"Nome do Curso\"
    FROM aluno
    JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
    JOIN curso ON curso.id = aluno_curso.curso_id
    ORDER BY nome" "SELECT *
    FROM funcionarios
    ORDER BY 4 DESC, nome DESC, 2" "SELECT *
    FROM funcionarios
    ORDER BY 3, 4, 2" "SELECT * 
    FROM funcionarios
    ORDER BY nome;" "INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M001', 'Diogo', 'Mascarenhas');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M002', 'Vinícius', 'Dias');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M003', 'Nico', 'Steppat');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M004', 'João', 'Roberto');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M005', 'Diogo', 'Mascarenhas');
INSERT INTO funcionarios (matricula, nome, sobrenome) VALUES ('M006', 'Alberto', 'Martins');" "CREATE TABLE funcionarios(
    id SERIAL PRIMARY KEY,
    matricula VARCHAR(10),
    nome VARCHAR(255),
    sobrenome VARCHAR(255)
);"))
(setq search-ring 'nil)
(setq regexp-search-ring '("indent" "scheme\\[SchemeNorm]\\[ColB" "updatesys" "mai"))
