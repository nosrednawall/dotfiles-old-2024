;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(minibuffer-history empty-history read-from-kill-ring-history ivy-history counsel-M-x-history swiper-history ido-buffer-history file-name-history))
(setq minibuffer-history '("/usr/bin/zsh"))
(setq ivy-history '(#("rainbow-mode" 0 12 (ivy-index 3))))
(setq counsel-M-x-history '(#("^ansi" 0 5 (ivy-index 1)) "ansi-term" #("^cua" 0 4 (ivy-index 5)) "cua-toggle-rectangle-mark" "cua-paste" "cua-paste-pop" "cua-cut-region" #("^cua-sc" 0 7 (ivy-index 1)) "cua-scroll-down" #("^cua-s" 0 6 (ivy-index 2)) "cua-selection-mode" #("^rainbo" 0 7 (ivy-index 0)) "rainbow-mode" #("^rain" 0 5 (ivy-index 0)) #("^package-install" 0 16 (ivy-index 0)) "package-install"))
(setq swiper-history '("scheme[SchemeNorm][ColBg" #("scheme[SchemeNorm][ColB" 0 23 (ivy-index 8)) #(" 	XSetForeground(dpy, drw->gc, scheme[SchemeNorm][ColBg].pixel);" 0 1 (display "2761 " swiper-line-number 2761) 1 2 (c-is-sws t fontified t) 2 3 (fontified t c-is-sws t) 3 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t) 63 64 (rear-nonsticky t fontified t)) #("updatesys" 0 9 (ivy-index 18)) #(" updatesystray(void)" 0 1 (display "2700 " swiper-line-number 2700) 1 14 (face font-lock-function-name-face fontified t) 14 15 (c-type c-decl-arg-start fontified t) 15 19 (face font-lock-type-face fontified t) 19 20 (fontified t)) #("mai" 0 3 (ivy-index 0)) #(" main(int argc, char *argv[])" 0 1 (display "814 " swiper-line-number 814) 1 5 (face font-lock-function-name-face fontified t) 5 6 (c-type c-decl-arg-start fontified t) 6 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 14 (face font-lock-variable-name-face fontified t) 14 15 (c-type c-decl-arg-start fontified t) 15 16 (fontified t) 16 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 26 (face font-lock-variable-name-face fontified t) 26 29 (fontified t))))
(setq ido-buffer-history '("*Messages*" "x.c" "x.c.rej" "config.def.h" "config.def.h.rej" "config.def.h<st>"))
(setq file-name-history '(#("/home/anderson/.dotfiles/.dwm/" 0 30 (ivy-index 0)) #("/home/anderson/.dotfiles/.Xresources" 0 36 (ivy-index 0)) #("/home/anderson/.config/st/config.def.h" 0 38 (ivy-index 0)) "~/.dotfiles/.emacs.d/init.el"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq kill-ring '(#("#282828" 0 6 (face font-lock-string-face fontified t) 6 7 (face font-lock-string-face rear-nonsticky t fontified t)) "#282828" #("b#222121
b#222121
b#222121
b#222121
b#222121
b#222121
b#222121
b#222121
b#222121
b#222121
b#222121
b#222121" 0 107 (yank-handler (rectangle--insert-for-yank ("b#222121" "b#222121" "b#222121" "b#222121" "b#222121" "b#222121" "b#222121" "b#222121" "b#222121" "b#222121" "b#222121" "b#222121") t))) #("#222121" 0 6 (face ((:foreground "white") (:background "#222121")) fontified t) 6 7 (face ((:foreground "white") (:background "#222121")) rear-nonsticky t fontified t)) "# 000000" "#1D1D1D" #("scheme[SchemeNorm][ColBg].pixel" 0 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t)) #("XSetForeground(dpy, drw->gc, scheme[SchemeNorm][ColBg].pixel);" 0 1 (c-is-sws t fontified t) 1 62 (fontified t)) "#222121" "'Capitaine Cursors (Gruvbox) - White'" "Xcursor.theme: cursor-theme" "+       else if (!strcmp(argv[i], \"-s\")) { /* case-sensitive item matching */
+           fstrncmp = strncmp;
+           fstrstr = strstr;
" #("+static size_t currentfont = 0;" 0 1 (face diff-indicator-added fontified t) 1 31 (face diff-added fontified t)) #("\"Mononoki Nerd Font:style=Bold:size=12:antialias=true:autohint=true:pixelsize=16\",
	\"DejaVu Sans Mono for Powerline:size=12:pixelsize=16\"" 0 81 (face font-lock-string-face fontified t) 81 84 (fontified t) 84 105 (face font-lock-string-face fontified t) 105 137 (face font-lock-string-face fontified t)) #("Comic code:size=12:antialias=true:autohint=true:pixelsize=16" 0 60 (c-in-sws t face font-lock-comment-face fontified t)) #("+static void cyclefonts(const Arg *);" 0 1 (face diff-indicator-added fontified t) 1 37 (face diff-added fontified t)) "+       { TERMMOD,              XK_S,           cyclefonts,     {}        },
" "+static char *fonts[] = {
+       \"Liberation Mono:pixelsize=12:antialias=true:autohint=true\",
+       \"Gohu GohuFont:pixelsize=11:antialias=false:autohint=false\",
+};
"))
(setq search-ring 'nil)
(setq regexp-search-ring '("scheme\\[SchemeNorm]\\[ColB" "updatesys" "mai"))
