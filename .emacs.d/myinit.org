#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* Fonte padrão
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Comic code" :height 90)
(add-to-list 'default-frame-alist '(font . "Comic code-10"))
#+END_SRC

* Declaração de variáveis
#+BEGIN_SCR emacs-lisp
(eval-when-compile (defvar inhibiy-startup-message)
                   (defvar ido-enable-flex-matching)
                   (defvar ido-everywhere)
                   (defvar spaceline-emacs-theme)
                   (defvar global-flycheck-mode)
                   (defvar ispell-program-name)
                   (defvar ispell-dictionary))
 #+END_SRC
* Alteraões e ajustes na interface
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
  ;;(global-auto-revert-mode t) ;; Auto atualiza os buffers
  (setq visible-bell 1)  ;; tira o barulho chato de beep
  (setq inhibiy-startup-message t)  ;; tira a mensagem padrão de inicio do emacs
  (tool-bar-mode -1)  ;; tira a barra de ferramentas
  (menu-bar-mode -1)  ;; tira a barra de ferramentas
  (scroll-bar-mode -1)  ; Remover barra de rolagem
  ;; Adiciona navegação entre os buffers, com as teclas Alt+Setas
  (when (fboundp 'windmove-default-keybindings)
	(windmove-default-keybindings))
  ;
  (add-hook 'text-mode-hook 'linum-mode)
  (add-hook 'prog-mode-hook 'linum-mode)
  (fset 'yes-or-no-p 'y-or-n-p)
  (electric-indent-mode 0)
  (setq-default c-basic-offset 4
				tab-width 4)  ;; identação
 #+END_SRC

* Configurações gerais dos Buffers
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)  ; flexibilita a procura de buffers
  (setq ido-everywhere t) ; busca qualquer coisa
  (ido-mode 1) ; inicia no modo 1 - com um buffer apenas
  (defalias 'list-buffers 'ibuffer) ; make ibuffer default
#+END_SRC

* Instala Try, que serve para testar pacotes sem instalá-los
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
	
* theme gruvbox
#+BEGIN_SRC emacs-lisp
(use-package gruvbox-theme
  :ensure t)
(load-theme 'gruvbox-dark-medium t)
#+END_SRC

* Help key combinations
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* Alt Tab Entre os Buffers e Buffers com Tabs
#+BEGIN_SRC emacs-lisp
  (use-package buffer-flip
	:ensure t
	:bind  (("M-<tab>" . buffer-flip)
			:map buffer-flip-map
			( "M-<tab>" .   buffer-flip-forward) 
			( "M-S-<tab>" . buffer-flip-backward) 
			( "M-ESC" .     buffer-flip-abort))
	:config
	(setq buffer-flip-skip-patterns
		  '("^\\*helm\\b"
			"^\\*swiper\\*$")))

  ;; Buffer tabs
  (global-unset-key (kbd "C-x <prior>"))
  (global-unset-key (kbd "C-x <next>"))

  (use-package centaur-tabs
	:ensure t
	:demand
	:config
	(setq centaur-tabs-style "box"
	  centaur-tabs-set-bar 'over
	  centaur-tabs-set-modified-marker t
	  centaur-tabs-modified-marker "*"
	  centaur-tabs-set-icons t
	  centaur-tabs-height 32)
	(centaur-tabs-change-fonts (face-attribute 'default :font) 120)
	(centaur-tabs-headline-match)
	(centaur-tabs-mode t)
	:bind
	("C-x <prior>" . centaur-tabs-backward)
	("C-x <next>" . centaur-tabs-forward)
	:hook
	(dashboard-mode . centaur-tabs-local-mode)
	(vterm-mode . centaur-tabs-local-mode))
#+END_SRC

* Neotree, All the Icons e SpaceLine
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)

(use-package spaceline
  :ensure t)

(use-package spaceline-config
  :config (spaceline-emacs-theme))

;; neotree
(use-package neotree
  :ensure t
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'ascii))
  :bind (("C-\\". 'neotree-toggle))
  )
#+END_SRC

* Python Ferramentas
** Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :init (advice-add 'python-mode :before 'elpy-enable))
#+END_SRC

** Flychek
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t)
(setq global-flycheck-mode t)
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
;; it looks like counsel is a requirement for swiper
(use-package counsel
:ensure t
)

(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

* Auto complete
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 3)
(global-company-mode t))

(use-package company-irony
  :ensure t
  :config
(add-to-list 'company-backends 'company-irony))

(use-package irony
  :ensure t
  :config
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(use-package irony-eldoc
  :ensure t
  :config
(add-hook 'irony-mode-hook #'irony-eldoc))

(use-package company-jedi
  :ensure t
  :config
(add-hook 'python-mode-hook 'jedi:setup))

(defun my/python-mode-hook ()
(add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)
;; Show diff inline
(use-package diff-hl
  :ensure t)

#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Musica - FrontEnd MPD
#+BEGIN_SRC emacs-lisp
(use-package mingus
  :ensure t)
#+END_SRC
* Dicionários - Corretor ortográfico
#+BEGIN_SRC emacs-lisp
;; Spell
(setq
    ispell-program-name "/usr/bin/hunspell"
    ispell-dictionary "pt_BR")

    (defun flyspell-on-for-buffer-type ()
      "Enable Flyspell appropriately for the major mode of the current buffer.  Uses `flyspell-prog-mode' for modes derived from `prog-mode', so only strings and comments get checked.  All other buffers get `flyspell-mode' to check all text.  If flyspell is already enabled, does nothing."
      (interactive)
      (if (not (symbol-value flyspell-mode)) ; if not already on
	(progn
	  (if (derived-mode-p 'prog-mode)
	    (progn
	      (message "Flyspell on (code)")
	      (flyspell-prog-mode))
	    ;; else
	    (progn
	      (message "Flyspell on (text)")
	      (flyspell-mode 1)))
	  ;; I tried putting (flyspell-buffer) here but it didn't seem to work
	  )))
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq dashboard-items '((recents . 5)
                          (projects . 5))
	dashboard-banner-logo-title "Hello!"
	dashboard-startup-banner 'logo
	dashboard-set-file-icons t
	dashboard-heading-icons t
	dashboard-set-init-info nil
        dashboard-center-content t)
  :config
  (dashboard-setup-startup-hook))
(provide 'dashboard-config)
#+END_SRC
* PDFs
#+BEGIN_SRC emacs-lisp

#+END_SRC
